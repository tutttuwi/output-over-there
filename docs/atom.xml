<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OUTPUT*OVER-THERE</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-29T15:07:44.045Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>t-tsutsui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020-04_Javaによる関数型プログラミングJava8ラムダ式とStream</title>
    <link href="http://yoursite.com/uncategorized/2020-04_Java%E3%81%AB%E3%82%88%E3%82%8B%E9%96%A2%E6%95%B0%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0Java8%E3%83%A9%E3%83%A0%E3%83%80%E5%BC%8F%E3%81%A8Stream/"/>
    <id>http://yoursite.com/uncategorized/2020-04_Java%E3%81%AB%E3%82%88%E3%82%8B%E9%96%A2%E6%95%B0%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0Java8%E3%83%A9%E3%83%A0%E3%83%80%E5%BC%8F%E3%81%A8Stream/</id>
    <published>2023-06-24T05:22:58.003Z</published>
    <updated>2020-04-29T15:07:44.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javaによる関数型プログラミングJava8ラムダ式とStream"><a href="#Javaによる関数型プログラミングJava8ラムダ式とStream" class="headerlink" title="Javaによる関数型プログラミングJava8ラムダ式とStream"></a>Javaによる関数型プログラミングJava8ラムダ式とStream</h1><ul><li>著者：vankat subramaniam</li><li>訳：株式会社プログラミングシステム社</li><li>2014年10月 発行</li><li>オライリー本</li></ul><h2 id="まえがき"><a href="#まえがき" class="headerlink" title="まえがき"></a>まえがき</h2><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><h3 id="対象者"><a href="#対象者" class="headerlink" title="対象者"></a>対象者</h3><ul><li>Java5経験者</li><li>他の言語で関数型プログラミングを行っていて、Javaで実施したい人</li><li>すでにラムダ式に詳しい人は、チームメンバーのトレーニングに使用できる</li></ul><h3 id="本書の内容"><a href="#本書の内容" class="headerlink" title="本書の内容"></a>本書の内容</h3><ul><li>最初から最後まで通して読むことをおすすめする（前の章で紹介した内容を後ろの章で使ってる）</li></ul><h3 id="使用するJavaのバージョン"><a href="#使用するJavaのバージョン" class="headerlink" title="使用するJavaのバージョン"></a>使用するJavaのバージョン</h3><ul><li><code>Java8</code>が必要</li></ul><h3 id="サンプルコードの読み方"><a href="#サンプルコードの読み方" class="headerlink" title="サンプルコードの読み方"></a>サンプルコードの読み方</h3><ul><li>サンプル<ul><li><a href="https://pragprog.com/titles/vsjava8/source_code">https://pragprog.com/titles/vsjava8/source_code</a></li></ul></li></ul><h3 id="オンラインリソース"><a href="#オンラインリソース" class="headerlink" title="オンラインリソース"></a>オンラインリソース</h3><ul><li>サンプルコード<ul><li><a href="https://pragprog.com/book/vsjava8/functional-programming-in-java">https://pragprog.com/book/vsjava8/functional-programming-in-java</a></li></ul></li></ul><h2 id="1章-Hello、ラムダ式"><a href="#1章-Hello、ラムダ式" class="headerlink" title="1章　Hello、ラムダ式"></a>1章　Hello、ラムダ式</h2><h3 id="1-1-考え方を変える"><a href="#1-1-考え方を変える" class="headerlink" title="1.1 考え方を変える"></a>1.1 考え方を変える</h3><ul><li>ラムダ式の紹介</li></ul><h3 id="1-2-関数型のコードによる大きな利益"><a href="#1-2-関数型のコードによる大きな利益" class="headerlink" title="1.2 関数型のコードによる大きな利益"></a>1.2 関数型のコードによる大きな利益</h3><h3 id="1-3-なぜ関数型で記述するのか"><a href="#1-3-なぜ関数型で記述するのか" class="headerlink" title="1.3 なぜ関数型で記述するのか"></a>1.3 なぜ関数型で記述するのか</h3><h3 id="1-4-革命ではなく、進化"><a href="#1-4-革命ではなく、進化" class="headerlink" title="1.4 革命ではなく、進化"></a>1.4 革命ではなく、進化</h3><h3 id="1-5-簡単にするためのほんの少しの砂糖"><a href="#1-5-簡単にするためのほんの少しの砂糖" class="headerlink" title="1.5 簡単にするためのほんの少しの砂糖"></a>1.5 簡単にするためのほんの少しの砂糖</h3><h3 id="1-6-まとめ"><a href="#1-6-まとめ" class="headerlink" title="1.6 まとめ"></a>1.6 まとめ</h3><ul><li>第一章はラムダ式の紹介をしていたので流し読み</li></ul><h2 id="2章-コレクションの使用"><a href="#2章-コレクションの使用" class="headerlink" title="2章　コレクションの使用"></a>2章　コレクションの使用</h2><h3 id="2-1-リストをイテレート"><a href="#2-1-リストをイテレート" class="headerlink" title="2.1 リストをイテレート"></a>2.1 リストをイテレート</h3><ul><li>今までの書き方から徐々にエレガントに進化させていく</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自殺点パターンと呼ぶ</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; friends.size(); i++) &#123;</span><br><span class="line">      System.out.println(friends.get(i));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 冗長でエラーが発生しやすいから</span></span><br><span class="line"><span class="comment">// &lt;i だったかな？ &lt;=i だったかな？と悩む</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上記よりは儀式が少なくなっている</span></span><br><span class="line"><span class="comment">// 特定のインデックスに対する操作がなければ、上記より優れているパターン</span></span><br><span class="line">    <span class="keyword">for</span>(String name : friends) &#123;</span><br><span class="line">      System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// これら両方とも命令形のコードであり、モダンなJavaでは捨て去ることができる</span></span><br></pre></td></tr></table></figure><ul><li><p>関数型へ移行を進める理由</p><ul><li>forループは本質的にシーケンシャルであり、並列化が極めて難しい</li><li>このようなループはポリモーフィックではなく、命令した通りのことを実行される。コレクションに対して（ポリモーフィックな処理を行う）メソッドを呼び出すのではなく、forループに渡している</li><li>設計レベルで、コードは「伝えろ、聞くな」という原則を破っている。forループではイテレーションの詳細をライブラリに任せるのではなく、特定のイテレーション処理を実行するよう要求している</li></ul></li><li><p>Tell, Don’t Ask <a href="https://www.jabba.cloud/20150912232135/">https://www.jabba.cloud/20150912232135/</a></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"START:INTERNAL_OUTPUT"</span>);</span><br><span class="line">friends.forEach((<span class="keyword">final</span> String name) -&gt; System.out.println(name));</span><br><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"END:INTERNAL_OUTPUT"</span>);</span><br><span class="line"></span><br><span class="line">friends.forEach((name) -&gt; System.out.println(name));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 型推論されたパラメータはfinalが保証されなくなる</span></span><br><span class="line"><span class="comment">// 引数を変更しない習慣を開発者自身が身につける必要がある</span></span><br><span class="line">friends.forEach(name -&gt; System.out.println(name));</span><br><span class="line"></span><br><span class="line">friends.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="2-2-リストの変換"><a href="#2-2-リストの変換" class="headerlink" title="2.2 リストの変換"></a>2.2 リストの変換</h3><h4 id="2-2-1-ラムダ式を使う"><a href="#2-2-1-ラムダ式を使う" class="headerlink" title="2.2.1 ラムダ式を使う"></a>2.2.1 ラムダ式を使う</h4><ul><li>map()メソッドについて：連続した入力を連続した出力に変換します</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// こうじゃなくて</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; uppercaseNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    friends.forEach(name -&gt; uppercaseNames.add(name.toUpperCase()));</span><br><span class="line">    System.out.println(uppercaseNames);</span><br><span class="line"></span><br><span class="line"><span class="comment">// こう書く</span></span><br><span class="line">    friends.stream()</span><br><span class="line">           .map(name -&gt; name.toUpperCase())</span><br><span class="line">           .forEach(name -&gt; System.out.print(name + <span class="string">" "</span>));</span><br></pre></td></tr></table></figure><h4 id="2-2-2-メソッド参照を使用"><a href="#2-2-2-メソッド参照を使用" class="headerlink" title="2.2.2 メソッド参照を使用"></a>2.2.2 メソッド参照を使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">friends.stream()</span><br><span class="line">       .map(String::toUpperCase)</span><br><span class="line">       .forEach(name -&gt; System.out.println(name));</span><br></pre></td></tr></table></figure><ul><li>メソッド参照の使い所<ul><li>ラムダ式が非常に短い場合や、ラムダ式がインスタンスメソッドやstaticメソッドをシンプルで直接的に呼び出している場合における優れた代替手段</li><li>映画「Offiece Space」のTom Smykowskiのようなもの…　著者が例えている</li><li>→個人的に「Offiece-spaceパターン」とよんでいる</li></ul></li></ul><h3 id="2-3-要素の検索"><a href="#2-3-要素の検索" class="headerlink" title="2.3 要素の検索"></a>2.3 要素の検索</h3><ul><li>fileter()<ul><li>コレクションから要素を抜き出すために用いる</li><li>map()メソッドと同様にイテレーターを返すが、同じ要素数返すとは限らない</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; startsWithN = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="keyword">for</span>(String name : friends) &#123;</span><br><span class="line">      <span class="keyword">if</span>(name.startsWith(<span class="string">"N"</span>)) &#123;</span><br><span class="line">        startsWithN.add(name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(String.format(<span class="string">"Found %d names"</span>, startsWithN.size()));</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; startsWithN =</span><br><span class="line">      friends.stream()</span><br><span class="line">             .filter(name -&gt; name.startsWith(<span class="string">"N"</span>))</span><br><span class="line">             .collect(Collectors.toList());</span><br><span class="line">    System.out.println(String.format(<span class="string">"Found %d names"</span>, startsWithN.size()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-ラムダ式の再利用"><a href="#2-4-ラムダ式の再利用" class="headerlink" title="2.4 ラムダ式の再利用"></a>2.4 ラムダ式の再利用</h3><ul><li>ラムダ式を定義しておいて重複をなくそうという説明</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Predicate&lt;String&gt; startsWithN = name -&gt; name.startsWith(<span class="string">"N"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> countFriendsStartN =</span><br><span class="line">  friends.stream()</span><br><span class="line">         .filter(startsWithN)</span><br><span class="line">         .count();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> countEditorsStartN =</span><br><span class="line">  editors.stream()</span><br><span class="line">         .filter(startsWithN)</span><br><span class="line">         .count();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> countComradesStartN =</span><br><span class="line">  comrades.stream()</span><br><span class="line">          .filter(startsWithN)</span><br><span class="line">          .count();</span><br></pre></td></tr></table></figure><ul><li>DRYの原則</li></ul><h3 id="2-5-静的スコープとクロージャ"><a href="#2-5-静的スコープとクロージャ" class="headerlink" title="2.5 静的スコープとクロージャ"></a>2.5 静的スコープとクロージャ</h3><ul><li><p>ラムダ式内は実質的にfinalな変数しか使えない</p></li><li><p><code>Predicate&lt;T&gt;</code>は<code>T</code>型を引数に取り、関数が行う検査の結果として<code>boolean</code>を返却。候補値の取捨選択を行う際に利用できる。</p></li><li><p><code>Function&lt;T,R&gt;</code>は<code>T</code>型の引数を取り、<code>R</code>型の結果を返す関数。常に<code>boolean</code>を返却する<code>Predicate&lt;T&gt;</code>より汎用的。</p></li><li><p><code>Optional</code>クラスは、結果が存在しない可能性がある場合に便利</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Function&lt;String, Predicate&lt;String&gt;&gt; startsWithLetter =</span><br><span class="line">  letter -&gt; name -&gt; name.startsWith(letter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> countFriendsStartN =</span><br><span class="line">  friends.stream()</span><br><span class="line">         .filter(startsWithLetter.apply(<span class="string">"N"</span>)).count();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> countFriendsStartB =</span><br><span class="line">  friends.stream()</span><br><span class="line">         .filter(startsWithLetter.apply(<span class="string">"B"</span>)).count();</span><br></pre></td></tr></table></figure><ul><li>MEMO: Functionで囲うメリットがいまいち理解できていない（2020-04-26 14:52:51）</li></ul><h3 id="2-6-要素を-1つ選択"><a href="#2-6-要素を-1つ選択" class="headerlink" title="2.6 要素を 1つ選択"></a>2.6 要素を 1つ選択</h3><ul><li>Null初期化は、Nullであることを確認する作業が必要になって来る<ul><li>これを忘れるとNullpointerExcepiton</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// エレガントな例</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pickName</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> List&lt;String&gt; names, <span class="keyword">final</span> String startingLetter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Optional&lt;String&gt; foundName = </span><br><span class="line">      names.stream()</span><br><span class="line">           .filter(name -&gt;name.startsWith(startingLetter))</span><br><span class="line">           .findFirst();</span><br><span class="line">    System.out.println(String.format(<span class="string">"A name starting with %s: %s"</span>,</span><br><span class="line">      startingLetter, foundName.orElse(<span class="string">"No name found"</span>)));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>OptionalはNull脱臭剤</li></ul><h3 id="2-7-コレクションを単一の値に集約（reduce）"><a href="#2-7-コレクションを単一の値に集約（reduce）" class="headerlink" title="2.7 コレクションを単一の値に集約（reduce）"></a>2.7 コレクションを単一の値に集約（reduce）</h3><ul><li>本節では、要素の比較や計算状態をコレクションに渡って持ち越して使用する方法を学ぶ</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"START:SUM_OUTPUT"</span>);</span><br><span class="line">      System.out.println(<span class="string">"Total number of characters in all names: "</span> +</span><br><span class="line">        friends.stream()</span><br><span class="line">               .mapToInt(name -&gt; name.length())</span><br><span class="line">               .sum());</span><br><span class="line">    &#125;</span><br><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"END:SUM_OUTPUT"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"END:AVERAGE_OUTPUT"</span>);</span><br><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"START:REDUCE_OUTPUT"</span>);</span><br><span class="line">    <span class="keyword">final</span> Optional&lt;String&gt; aLongName =</span><br><span class="line">      friends.stream()</span><br><span class="line">             .reduce((name1, name2) -&gt;</span><br><span class="line">                name1.length() &gt;= name2.length() ? name1 : name2);</span><br><span class="line">    aLongName.ifPresent(name -&gt;</span><br><span class="line">      System.out.println(String.format(<span class="string">"A longest name: %s"</span>, name)));</span><br><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"END:REDUCE_OUTPUT"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String steveOrLonger =</span><br><span class="line">      friends.stream()</span><br><span class="line">             .reduce(<span class="string">"Steve"</span>, (name1, name2) -&gt;</span><br><span class="line">                name1.length() &gt;= name2.length() ? name1 : name2);</span><br><span class="line"></span><br><span class="line">    System.out.println(steveOrLonger);</span><br></pre></td></tr></table></figure><h3 id="2-8-要素の結合"><a href="#2-8-要素の結合" class="headerlink" title="2.8 要素の結合"></a>2.8 要素の結合</h3><ul><li>StringJoinerの説明</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"START:MAP_JOIN_OUTPUT"</span>);</span><br><span class="line">    System.out.println(</span><br><span class="line">      friends.stream()</span><br><span class="line">             .map(String::toUpperCase)</span><br><span class="line">             .collect(joining(<span class="string">", "</span>)));</span><br><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"END:MAP_JOIN_OUTPUT"</span>);</span><br></pre></td></tr></table></figure><h3 id="2-9-まとめ"><a href="#2-9-まとめ" class="headerlink" title="2.9 まとめ"></a>2.9 まとめ</h3><ul><li>コレクションはプログラムにおいてはありふれたもので、</li><li>ラムダ式によりJavaにおけるコレクションの利用は従来よりも遥かに簡単で単純になりました</li><li>記述するコード量が減少し、保守性が高くなる</li></ul><h2 id="3章-文字列、コンパレータ、フィルタ"><a href="#3章-文字列、コンパレータ、フィルタ" class="headerlink" title="3章　文字列、コンパレータ、フィルタ"></a>3章　文字列、コンパレータ、フィルタ</h2><ul><li>ラムダ式とメソッド参照を使用してSringをいてレートし、Comparatorを実装し、ディレクトリのファイルリストを取得し、</li><li>そしてファイルやディレクトリを監視します</li></ul><h3 id="3-1-文字列のイテレーション"><a href="#3-1-文字列のイテレーション" class="headerlink" title="3.1 文字列のイテレーション"></a>3.1 文字列のイテレーション</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"START:ITERATE_OUTPUT"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> String str = <span class="string">"w00t"</span>;</span><br><span class="line"></span><br><span class="line">str.chars()</span><br><span class="line">   .forEach(ch -&gt; System.out.println(ch));</span><br><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"END:ITERATE_OUTPUT"</span>);</span><br><span class="line"></span><br><span class="line">str.chars()</span><br><span class="line">   .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"START:FIX_OUTPUT"</span>);</span><br><span class="line">str.chars()</span><br><span class="line">   .forEach(IterateString::printChar);</span><br><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"END:FIX_OUTPUT"</span>);</span><br><span class="line"></span><br><span class="line">    str.chars()</span><br><span class="line">       .mapToObj(ch -&gt; Character.valueOf((<span class="keyword">char</span>)ch))</span><br><span class="line">       .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"START:FILTER_OUTPUT"</span>);</span><br><span class="line">str.chars()</span><br><span class="line">   .filter(ch -&gt; Character.isDigit(ch))</span><br><span class="line">   .forEach(ch -&gt; printChar(ch));</span><br><span class="line">System.out.println(<span class="string">""</span>);</span><br><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"END:FILTER_OUTPUT"</span>);</span><br><span class="line"></span><br><span class="line">str.chars()</span><br><span class="line">   .filter(ch -&gt; Character.isDigit(ch));</span><br><span class="line"></span><br><span class="line">str.chars()</span><br><span class="line">   .filter(Character::isDigit);</span><br><span class="line"></span><br><span class="line">str.chars()</span><br><span class="line">   .filter(Character::isDigit)</span><br><span class="line">   .forEach(IterateString::printChar);</span><br></pre></td></tr></table></figure><ul><li><p>インスタンスメソッドのメソッド参照（String::toUppercase）と、staticメソッドのメソッド参照（Character::isDigit）は構造的に同じように見えるが異なる</p></li><li><p>インスタンスメソッド： <code>引数.toUppercase();</code></p></li><li><p>staticメソッド： <code>Character.isDigit(引数);</code></p></li><li><p>インスタンスメソッドとstaticメソッドの定義が衝突すると、</p></li><li><p>どちらを使用していいかコンパイラが判断できなくなりコンパイルエラーとなる</p><ul><li>→この場合はラムダ式を使う！</li><li>ラムダ式とメソッド参照を自由自在に切り替えられるようになる</li></ul></li></ul><h3 id="3-2-Comparatorインタフェースを実装"><a href="#3-2-Comparatorインタフェースを実装" class="headerlink" title="3.2 Comparatorインタフェースを実装"></a>3.2 Comparatorインタフェースを実装</h3><ul><li><code>List</code>の<code>sort()メソッド</code>だと戻り値が<code>void</code>なので、リスト本体が変更されてしまう</li><li>コピーを取得した上で、変更する必要があったが、面倒</li><li>代わりにStreamの力を借りて処理する方法を考える</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">people.sorted((person1,person2) -&gt; person1.ageDifference(person2)).collect(toList());</span><br><span class="line"><span class="comment">// ↓改善</span></span><br><span class="line">people.stream().sorted(Person::ageDifference).collect(toList());</span><br></pre></td></tr></table></figure><ul><li>逆順にしたい場合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">people.stream().sorted((person1, person2) -&gt; person2.ageDifference(person1)).collect(toList());</span><br><span class="line"><span class="comment">// パラメータの順番が引数受け渡しの規約に従っていないため、メソッド参照を使うようにリファクタリングすることはできません。</span></span><br></pre></td></tr></table></figure><ul><li>事前に<code>Comparator</code>を定義しておいて、使用することで簡潔に記載できる</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;Person&gt; people = Arrays.asList(</span><br><span class="line">      <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="number">20</span>),</span><br><span class="line">      <span class="keyword">new</span> Person(<span class="string">"Sara"</span>, <span class="number">21</span>),</span><br><span class="line">      <span class="keyword">new</span> Person(<span class="string">"Jane"</span>, <span class="number">21</span>),</span><br><span class="line">      <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">35</span>));</span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:AGE_ASCEND_OUTPUT"</span>);</span><br><span class="line">    List&lt;Person&gt; ascendingAge = </span><br><span class="line">      people.stream()</span><br><span class="line">            .sorted((person1, person2) -&gt; person1.ageDifference(person2))</span><br><span class="line">            .collect(toList());</span><br><span class="line">    printPeople(<span class="string">"Sorted in ascending order by age: "</span>, ascendingAge);</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"END:AGE_ASCEND_OUTPUT"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">  <span class="comment">// メソッド参照（Method Reference）</span></span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:AGE_ASCEND_MR_OUTPUT"</span>);</span><br><span class="line">    List&lt;Person&gt; ascendingAge = </span><br><span class="line">      people.stream()</span><br><span class="line">            .sorted(Person::ageDifference)</span><br><span class="line">            .collect(toList());</span><br><span class="line"></span><br><span class="line">    printPeople(<span class="string">"Sorted in ascending order by age: "</span>, ascendingAge);</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"END:AGE_ASCEND_MR_OUTPUT"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:AGE_DESCEND_OUTPUT"</span>);</span><br><span class="line">    printPeople(<span class="string">"Sorted in descending order by age: "</span>,</span><br><span class="line">      people.stream()</span><br><span class="line">            .sorted((person1, person2) -&gt; person2.ageDifference(person1))</span><br><span class="line">            .collect(toList()));</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"END:AGE_DESCEND_OUTPUT"</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:REVERSE_ORDER_OUTPUT"</span>);</span><br><span class="line">    Comparator&lt;Person&gt; compareAscending = </span><br><span class="line">      (person1, person2) -&gt; person1.ageDifference(person2);</span><br><span class="line">      <span class="comment">// reversed()を使うことで降順の関数を事前に用意できる</span></span><br><span class="line">    Comparator&lt;Person&gt; compareDescending = compareAscending.reversed();</span><br><span class="line"></span><br><span class="line">    printPeople(<span class="string">"Sorted in ascending order by age: "</span>,</span><br><span class="line">      people.stream()</span><br><span class="line">            .sorted(compareAscending)</span><br><span class="line">            .collect(toList())</span><br><span class="line">    );</span><br><span class="line">    printPeople(<span class="string">"Sorted in descending order by age: "</span>,</span><br><span class="line">      people.stream()</span><br><span class="line">            .sorted(compareDescending)</span><br><span class="line">            .collect(toList())</span><br><span class="line">    );</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"END:REVERSE_ORDER_OUTPUT"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 名前の昇順に並び替え</span></span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:NAME_ASCEND_OUTPUT"</span>);</span><br><span class="line">    printPeople(<span class="string">"Sorted in ascending order by name: "</span>,</span><br><span class="line">      people.stream()</span><br><span class="line">            .sorted((person1, person2) -&gt; </span><br><span class="line">               person1.getName().compareTo(person2.getName()))</span><br><span class="line">            .collect(toList()));</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"END:NAME_ASCEND_OUTPUT"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// min()メソッドはOptionalを返す！</span></span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:YOUNGEST_OUTPUT"</span>);</span><br><span class="line">    people.stream()</span><br><span class="line">          .min(Person::ageDifference)</span><br><span class="line">          .ifPresent(youngest -&gt; System.out.println(<span class="string">"Youngest: "</span> + youngest));</span><br><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"END:YOUNGEST_OUTPUT"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:ELDEST_OUTPUT"</span>);</span><br><span class="line">    people.stream()</span><br><span class="line">          .max(Person::ageDifference)</span><br><span class="line">          .ifPresent(eldest -&gt; System.out.println(<span class="string">"Eldest: "</span> + eldest));</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"END:ELDEST_OUTPUT"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-複数のプロパティによる流暢な比較"><a href="#3-3-複数のプロパティによる流暢な比較" class="headerlink" title="3.3 複数のプロパティによる流暢な比較"></a>3.3 複数のプロパティによる流暢な比較</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 名前のアルファベット順にするために以下の関数を用意した</span></span><br><span class="line">    <span class="comment">// 従来の内部クラス構文と比較すると非常に簡潔</span></span><br><span class="line">    people.stream()</span><br><span class="line">          .sorted((person1, person2) -&gt; </span><br><span class="line">             person1.getName().compareTo(person2.getName()));</span><br><span class="line"></span><br><span class="line">    printPeople(<span class="string">"Sorted in ascending order by name: "</span>,</span><br><span class="line">    people.stream()</span><br><span class="line">          .sorted(comparing((Person person) -&gt; person.getName()))</span><br><span class="line">          .collect(toList()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Comparatorインターフェースのコンビニエンス関数を使用することで、より自由にコードの目的を表現できる</span></span><br><span class="line">    <span class="comment">// Comparaotrインターフェースのcomparing()メソッドを静的にインポートしました。comparing()メソッドは与えられた</span></span><br><span class="line">    <span class="comment">// ラムダ式のロジックを使用してComparatorを生成する！</span></span><br><span class="line">    <span class="comment">// つまり、関数（Function）を引数に取り、関数（Comparator）を返す高階関数</span></span><br><span class="line">    <span class="keyword">final</span> Function&lt;Person, String&gt; byName = person -&gt; person.getName();</span><br><span class="line">    people.stream()</span><br><span class="line">          .sorted(comparing(byName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:SORT_NAME_AND_AGE_OUTPUT"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> Function&lt;Person, Integer&gt; byAge = person -&gt; person.getAge();</span><br><span class="line">    <span class="keyword">final</span> Function&lt;Person, String&gt; byTheirName = person -&gt; person.getName();</span><br><span class="line">    </span><br><span class="line">    printPeople(<span class="string">"Sorted in ascending order by age and name: "</span>,</span><br><span class="line">      people.stream()</span><br><span class="line">            .sorted(comparing(byAge).thenComparing(byTheirName))</span><br><span class="line">            .collect(toList()));</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"END:SORT_NAME_AND_AGE_OUTPUT"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>このように、Comparatorの実装をラムダ式やJDKの新たなユーティリティクラスを使用して簡単に合成できる<ul><li>MEMO: 少し納得してないので再度確認</li></ul></li></ul><h3 id="3-4-collectメソッドとCollectorsクラスの使用"><a href="#3-4-collectメソッドとCollectorsクラスの使用" class="headerlink" title="3.4 collectメソッドとCollectorsクラスの使用"></a>3.4 collectメソッドとCollectorsクラスの使用</h3><ul><li>これまでに、Streamの要素をArrayListに変換する例でcollect()メソッドを数回使用している<ul><li>このメソッドは、あるコレクションを可変コレクションなど他のデータ型へ変換する際に便利な集約処理を行います</li><li>collect()関数はCollectorsクラスのユーティリティメソッドと組み合わせるととても便利</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 20歳以上の人を抽出してリストを取得する</span></span><br><span class="line">&#123;  </span><br><span class="line">    <span class="comment">// 従来の書き方</span></span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:MUTABLE_OUTPUT"</span>);</span><br><span class="line">    List&lt;Person&gt; olderThan20 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      people.stream()</span><br><span class="line">            .filter(person -&gt; person.getAge() &gt; <span class="number">20</span>)</span><br><span class="line">            .forEach(person -&gt; olderThan20.add(person));</span><br><span class="line">    System.out.println(<span class="string">"People older than 20: "</span> + olderThan20);</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"END:MUTABLE_OUTPUT"</span>);</span><br><span class="line">    <span class="comment">// 問題点：</span></span><br><span class="line">    <span class="comment">// ターゲットとするコレクションに要素を１つずつ追加する保s理はとても低レベルなもので、宣言型ではなく命令形のコード</span></span><br><span class="line">    <span class="comment">// 並列に実行させる場合にはスレッドセーフ問題を適切に処理しなければならない</span></span><br><span class="line">    <span class="comment">// 可変性を持つコードを並列化するのは難しいものです。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// この問題はcollect()を使うことで緩和できる</span></span><br><span class="line"><span class="comment">// collect()メソッドの以下の３つについて知っておく</span></span><br><span class="line"><span class="comment">// サプライヤ　　：結果を収めるコンテナの精製方法（例えば、ArrayList::new）</span></span><br><span class="line"><span class="comment">// アキュムレータ：結果コンテナに単一の要素を追加する方法（例えばArrayList::add）</span></span><br><span class="line"><span class="comment">// コンバイナ　　：結果コンテナを他のコンテナと結合する方法（例えばArrayList::addAll）</span></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    <span class="comment">// 便利な書き方！</span></span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:COLLECT_OUTPUT"</span>);</span><br><span class="line">    List&lt;Person&gt; olderThan20 = </span><br><span class="line">      people.stream()</span><br><span class="line">            .filter(person -&gt; person.getAge() &gt; <span class="number">20</span>)</span><br><span class="line">            .collect(ArrayList::<span class="keyword">new</span>, ArrayList::add, ArrayList::addAll);</span><br><span class="line">    System.out.println(<span class="string">"People older than 20: "</span> + olderThan20);</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"END:COLLECT_OUTPUT"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// メリット：</span></span><br><span class="line"><span class="comment">// より明確で意図を持ったプログラミングを行っている→ArrayListに処理結果を集めることがこのコードの目的</span></span><br><span class="line"><span class="comment">// コード内で状態変更を行っていないため、イテレーションを簡単に並列化できる</span></span><br></pre></td></tr></table></figure><ul><li>次は基本の<code>collect()</code>メソッドよりも簡潔で便利な、オーバーロードされたcollect()メソッドを見ていく</li><li>このメソッドはCollectorを引数に取ります</li><li>Collectorはcollect()メソッドに設定された３つの異なるパラメータをカプセル化した、より簡単で再利用可能なインターフェース</li><li>様々なCollectorの実装を提供するCollectorsクラスにtoList()というコンビニエンスメソッドがある</li><li>このメソッドはArrayListに要素を蓄積するメソッドで、Collectorインターフェースの実装</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:COLLECT_TO_LIST_OUTPUT"</span>);</span><br><span class="line">    List&lt;Person&gt; olderThan20 = </span><br><span class="line">      people.stream()</span><br><span class="line">            .filter(person -&gt; person.getAge() &gt; <span class="number">20</span>)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">"People older than 20: "</span> + olderThan20);</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"END:COLLECT_TO_LIST_OUTPUT"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>他にも色々集計できるよっていう説明!<ul><li><a href="https://docs.oracle.com/javase/jp/8/docs/api/java/util/stream/Collectors.html">https://docs.oracle.com/javase/jp/8/docs/api/java/util/stream/Collectors.html</a></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:GROUP_BY_OUTPUT"</span>);</span><br><span class="line">    Map&lt;Integer, List&lt;Person&gt;&gt; peopleByAge = </span><br><span class="line">      people.stream()</span><br><span class="line">            .collect(Collectors.groupingBy(Person::getAge));</span><br><span class="line">    System.out.println(<span class="string">"Grouped by age: "</span> + peopleByAge);</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"END:GROUP_BY_OUTPUT"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:GROUP_BY_AGE_NAME_OUTPUT"</span>);</span><br><span class="line">    Map&lt;Integer, List&lt;String&gt;&gt; nameOfPeopleByAge = </span><br><span class="line">      people.stream()</span><br><span class="line">            .collect(</span><br><span class="line">              groupingBy(Person::getAge, mapping(Person::getName, toList())));</span><br><span class="line">    System.out.println(<span class="string">"People grouped by age: "</span> + nameOfPeopleByAge);</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"END:GROUP_BY_AGE_NAME_OUTPUT"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:OLDEST_IN_EACH_LETTER_OUTPUT"</span>);</span><br><span class="line">    Comparator&lt;Person&gt; byAge = Comparator.comparing(Person::getAge);</span><br><span class="line">    Map&lt;Character, Optional&lt;Person&gt;&gt; oldestPersonOfEachLetter = </span><br><span class="line">      people.stream()</span><br><span class="line">            .collect(groupingBy(person -&gt; person.getName().charAt(<span class="number">0</span>),</span><br><span class="line">               reducing(BinaryOperator.maxBy(byAge))));</span><br><span class="line">    System.out.println(<span class="string">"Oldest person of each letter:"</span>);</span><br><span class="line">    System.out.println(oldestPersonOfEachLetter);</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"END:OLDEST_IN_EACH_LETTER_OUTPUT"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MEMO: 集計関数を実際に色々使ってみる！！</li></ul><h3 id="3-5-ディレクトリの全ファイルをリスト"><a href="#3-5-ディレクトリの全ファイルをリスト" class="headerlink" title="3.5 ディレクトリの全ファイルをリスト"></a>3.5 ディレクトリの全ファイルをリスト</h3><ul><li><p><code>File</code>クラスの<code>list()</code>メソッドを使うと、ディレクトリにある全ファイル名を簡単にリスト化できる</p></li><li><p>ファイル名だけでなくすべてのファイルを取得する場合は<code>listFiles()</code>メソッドが使える</p></li><li><p>ファイルを取得したあとの処理が大変</p></li><li><p>ここでは、従来のくどい外部イテレータを使用するのではなく、エレガントな関数型スタイルの機能を使ってリストをイテレートしていく</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下の２つとも古いjavaより格段にシンプル</span></span><br><span class="line">Files.list(Paths.get(<span class="string">"."</span>))</span><br><span class="line">     .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">Files.list(Paths.get(<span class="string">"."</span>))</span><br><span class="line">     .filter(Files::isDirectory) <span class="comment">// filterはPredicateを期待する</span></span><br><span class="line">     .forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-ディレクトリの特定のファイルだけをリスト"><a href="#3-6-ディレクトリの特定のファイルだけをリスト" class="headerlink" title="3.6 ディレクトリの特定のファイルだけをリスト"></a>3.6 ディレクトリの特定のファイルだけをリスト</h3><ul><li>特定のファイル名取得のためにオーバーロードされたFileクラスのlist()メソッドを提供してきました</li><li>このlist()メソッドはFilenameFilterインターフェースを引数に取ります</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String[] files =</span><br><span class="line">  <span class="keyword">new</span> File(<span class="string">"fpij"</span>).list(<span class="keyword">new</span> java.io.FilenameFilter() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(<span class="keyword">final</span> File dir, <span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name.endsWith(<span class="string">".java"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>これをラムダ式に置き換える！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  Files.newDirectoryStream(</span><br><span class="line">       Paths.get(<span class="string">"fpij"</span>), path -&gt; path.toString().endsWith(<span class="string">".java"</span>))</span><br><span class="line">   .forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-flatMapで直下のサブディレクトリをリスト"><a href="#3-7-flatMapで直下のサブディレクトリをリスト" class="headerlink" title="3.7 flatMapで直下のサブディレクトリをリスト"></a>3.7 flatMapで直下のサブディレクトリをリスト</h3><ul><li>与えられたディレクトリ直下のサブディレクトリを探索する方法を解説する</li><li>最初に原始的な方法を説明し、次により便利なflatMap()メソッド（Streamクラス）を使用する</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listTheHardWay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;File&gt; files = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  File[] filesInCurrentDir = <span class="keyword">new</span> File(<span class="string">"."</span>).listFiles();</span><br><span class="line">  <span class="keyword">for</span>(File file : filesInCurrentDir) &#123;</span><br><span class="line">    File[] filesInSubDir = file.listFiles();</span><br><span class="line">    <span class="keyword">if</span>(filesInSubDir != <span class="keyword">null</span>) &#123;</span><br><span class="line">      files.addAll(Arrays.asList(filesInSubDir));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      files.add(file);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">"Count: "</span> + files.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">betterWay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;File&gt; files =</span><br><span class="line">    Stream.of(<span class="keyword">new</span> File(<span class="string">"."</span>).listFiles())</span><br><span class="line">          .flatMap(file -&gt; file.listFiles() == <span class="keyword">null</span> ? </span><br><span class="line">              Stream.of(file) : Stream.of(file.listFiles()))</span><br><span class="line">          .collect(toList());</span><br><span class="line">  System.out.println(<span class="string">"Count: "</span> + files.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MEMO: モナド合成という言葉が出てきたが、いまいち意味がわからない</li></ul><h3 id="3-8-ファイルの変更を監視"><a href="#3-8-ファイルの変更を監視" class="headerlink" title="3.8 ファイルの変更を監視"></a>3.8 ファイルの変更を監視</h3><ul><li>ファイルが生成・変更・削除される際のアラートも簡単に実現できる</li><li>Java7で追加されたWatchServiceの機能を紹介</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Thread(() -&gt; watchFileChange()).start();</span><br><span class="line">  <span class="keyword">final</span> File file = <span class="keyword">new</span> File(<span class="string">"sample.txt"</span>);</span><br><span class="line">  file.createNewFile();</span><br><span class="line">  Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">  file.setLastModified(System.currentTimeMillis());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">watchFileChange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Path path = Paths.get(<span class="string">"."</span>);</span><br><span class="line">    <span class="keyword">final</span> WatchService watchService = </span><br><span class="line">      path.getFileSystem()</span><br><span class="line">          .newWatchService();</span><br><span class="line">      </span><br><span class="line">    path.register(watchService, StandardWatchEventKinds.ENTRY_MODIFY);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"Report any file changed within next 1 minute..."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> WatchKey watchKey = watchService.poll(<span class="number">1</span>, TimeUnit.MINUTES);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(watchKey != <span class="keyword">null</span>) &#123;</span><br><span class="line">      watchKey.pollEvents()</span><br><span class="line">              .stream()</span><br><span class="line">              .forEach(event -&gt;</span><br><span class="line">                 System.out.println(event.context()));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(InterruptedException | IOException ex) &#123;</span><br><span class="line">    System.out.println(ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-9-まとめ"><a href="#3-9-まとめ" class="headerlink" title="3.9 まとめ"></a>3.9 まとめ</h3><ul><li>文字列操作やファイル処理、カスタムコンパレータの生成などの定型タスクはラムダ式とメソッド参照によって非常に楽に、簡潔になりました。</li></ul><h2 id="4章-ラムダ式で設計する"><a href="#4章-ラムダ式で設計する" class="headerlink" title="4章　ラムダ式で設計する"></a>4章　ラムダ式で設計する</h2><ul><li>本章では、ラムダ式が巧妙なデザインアイデアに生命を与える</li><li>これまではオブジェクトを使用していた箇所を軽量関数で代用できる</li></ul><h3 id="4-1-ラムダ式を使った関心の分離"><a href="#4-1-ラムダ式を使った関心の分離" class="headerlink" title="4.1 ラムダ式を使った関心の分離"></a>4.1 ラムダ式を使った関心の分離</h3><ul><li>コードの再利用のためにクラスを生成することは良い心がけですが、それが常に正しいとは限らない</li><li>クラスの代わりに高階関数を使うことで、クラス階層を必要とせずに同じことが達成できる</li></ul><h4 id="4-1-1-デザイン問題の探求"><a href="#4-1-1-デザイン問題の探求" class="headerlink" title="4.1.1 デザイン問題の探求"></a>4.1.1 デザイン問題の探求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Asset</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">enum</span> AssetType &#123; BOND, STOCK &#125;; </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AssetType type;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Asset</span><span class="params">(<span class="keyword">final</span> AssetType assetType, <span class="keyword">final</span> <span class="keyword">int</span> assetValue)</span> </span>&#123;</span><br><span class="line">    type = assetType;</span><br><span class="line">    value = assetValue;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> AssetType <span class="title">getType</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> type; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Utilクラス</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">totalAssetValues</span><span class="params">(<span class="keyword">final</span> List&lt;Asset&gt; assets)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> assets.stream()</span><br><span class="line">                 .mapToInt(Asset::getValue)</span><br><span class="line">                 .sum();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>ラムダ式を使って、totalAssetValues()メソッドを書き、流暢なイテレータと好むべき不変性を使いました</li><li>しかし今はメソッド自身の設計に目を向けましょう</li><li>このメソッドでは<ul><li>どのようにイテレーションを行うか</li><li>何を合計するか</li><li>どのように合計するか<ul><li>といった３つの問題が絡み合っている</li></ul></li></ul></li></ul><h4 id="4-1-2-問題でがんじがらめ"><a href="#4-1-2-問題でがんじがらめ" class="headerlink" title="4.1.2 問題でがんじがらめ"></a>4.1.2 問題でがんじがらめ</h4><ul><li>資産のうち、債券（bond）だけを合計したい場合を考える</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">totalBondValues</span><span class="params">(<span class="keyword">final</span> List&lt;Asset&gt; assets)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> assets.stream()</span><br><span class="line">               .mapToInt(asset -&gt; </span><br><span class="line">                  asset.getType() == AssetType.BOND ? asset.getValue() : <span class="number">0</span>)</span><br><span class="line">               .sum();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">totalStockValues</span><span class="params">(<span class="keyword">final</span> List&lt;Asset&gt; assets)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> assets.stream()</span><br><span class="line">               .mapToInt(asset -&gt; </span><br><span class="line">                  asset.getType() == AssetType.STOCK ? asset.getValue() : <span class="number">0</span>)</span><br><span class="line">               .sum();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>こんなふうにコピペで増やしていって良いでしょうか？</li><li>DRYの原則に従ってもう少しましな設計をしましょう</li></ul><h4 id="4-1-3-主要な関心の分離"><a href="#4-1-3-主要な関心の分離" class="headerlink" title="4.1.3 主要な関心の分離"></a>4.1.3 主要な関心の分離</h4><ul><li>イテレーションと合計を求める方法は同じですが、「何を」合計するかが異なります</li><li>この「何を合計するか」部分はメソッドから切り離す良い候補</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">totalAssetValues</span><span class="params">(<span class="keyword">final</span> List&lt;Asset&gt; assets,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">final</span> Predicate&lt;Asset&gt; assetSelector)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> assets.stream()</span><br><span class="line">               .filter(assetSelector)</span><br><span class="line">               .mapToInt(Asset::getValue)</span><br><span class="line">               .sum();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line">  List&lt;Asset&gt; assets = Arrays.asList(</span><br><span class="line">    <span class="keyword">new</span> Asset(Asset.AssetType.BOND, <span class="number">1000</span>),</span><br><span class="line">    <span class="keyword">new</span> Asset(Asset.AssetType.BOND, <span class="number">2000</span>),</span><br><span class="line">    <span class="keyword">new</span> Asset(Asset.AssetType.STOCK, <span class="number">3000</span>),</span><br><span class="line">    <span class="keyword">new</span> Asset(Asset.AssetType.STOCK, <span class="number">4000</span>)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">"Total of all assets: "</span> + </span><br><span class="line">    totalAssetValues(assets, asset -&gt; <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">"Total of bonds: "</span> + </span><br><span class="line">    totalAssetValues(assets, asset -&gt; asset.getType() == AssetType.BOND));</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">"Total of stocks: "</span> + </span><br><span class="line">    totalAssetValues(assets, asset -&gt; asset.getType() == AssetType.STOCK));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>個々まではメソッドレベルでの関心の分離を行いましたが、次はクラスレベルで応用します</li></ul><h3 id="4-2-ラムダ式を使った委譲"><a href="#4-2-ラムダ式を使った委譲" class="headerlink" title="4.2 ラムダ式を使った委譲"></a>4.2 ラムダ式を使った委譲</h3><h3 id="4-3-ラムダ式を使ったデコレーション"><a href="#4-3-ラムダ式を使ったデコレーション" class="headerlink" title="4.3 ラムダ式を使ったデコレーション"></a>4.3 ラムダ式を使ったデコレーション</h3><ul><li>Cameraクラスのフィルター設定</li></ul><h3 id="4-4-defaultメソッドを覗く"><a href="#4-4-defaultメソッドを覗く" class="headerlink" title="4.4 defaultメソッドを覗く"></a>4.4 defaultメソッドを覗く</h3><ul><li><p>interfaceがdefaultメソッドを持てる</p></li><li><p>実装の衝突を防ぐためにルールが存在する</p></li><li><p>実際にinterfaceにdefaultメソッドが記述できるメリットがあまり浮かばないような気がする</p></li></ul><h3 id="4-5-ラムダ式を使った流暢なインタフェース"><a href="#4-5-ラムダ式を使った流暢なインタフェース" class="headerlink" title="4.5 ラムダ式を使った流暢なインタフェース"></a>4.5 ラムダ式を使った流暢なインタフェース</h3><ul><li>MEMO: ここは参考になる実装だと感じた<ul><li>用途例：メーラの設定、データベース設定パラメータの設定、インスタンスの連続した状態を管理下におきつつ構築する必要のある場合</li><li>ローンパターンと言うらしい</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">FluentMailer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> FluentMailer <span class="title">from</span><span class="params">(<span class="keyword">final</span> String address)</span> </span>&#123; <span class="comment">/*... */</span>; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> FluentMailer <span class="title">to</span><span class="params">(<span class="keyword">final</span> String address)</span>   </span>&#123; <span class="comment">/*... */</span>; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> FluentMailer <span class="title">subject</span><span class="params">(<span class="keyword">final</span> String line)</span> </span>&#123; <span class="comment">/*... */</span>; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> FluentMailer <span class="title">body</span><span class="params">(<span class="keyword">final</span> String message)</span> </span>&#123; <span class="comment">/*... */</span>; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="keyword">final</span> Consumer&lt;FluentMailer&gt; block)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> FluentMailer mailer = <span class="keyword">new</span> FluentMailer();</span><br><span class="line">  block.accept(mailer);</span><br><span class="line">  System.out.println(<span class="string">"sending..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line">  FluentMailer.send(mailer -&gt;</span><br><span class="line">    mailer.from(<span class="string">"build@agiledeveloper.com"</span>)</span><br><span class="line">          .to(<span class="string">"venkats@agiledeveloper.com"</span>)</span><br><span class="line">          .subject(<span class="string">"build notification"</span>)</span><br><span class="line">          .body(<span class="string">"...much better..."</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-例外処理"><a href="#4-6-例外処理" class="headerlink" title="4.6 例外処理"></a>4.6 例外処理</h3><ul><li>ラムダ式の例外処理について<ul><li>MEMO: 再読する必要あり</li></ul></li></ul><h3 id="4-7-まとめ"><a href="#4-7-まとめ" class="headerlink" title="4.7 まとめ"></a>4.7 まとめ</h3><h2 id="5章-外部リソースを扱う"><a href="#5章-外部リソースを扱う" class="headerlink" title="5章　外部リソースを扱う"></a>5章　外部リソースを扱う</h2><ul><li><p>Java仮想マシン（JVM）は、自動的にガベージコレクション（GC）を行っているものだと信じているかもしれません。</p></li><li><p>内部リソースだけを扱っている場合はJVMにGCを任せられることは事実</p></li><li><p>しかし、</p><ul><li>データベース接続</li><li>ファイルやソケット</li><li>ネイティブリソースといった外部リソースを使用する場合は<ul><li>GCは開発者の責任範囲</li></ul></li></ul></li><li><p>本章では、ラムダ式を使って、<code>execute around method(EAM)</code>を実装します。</p></li><li><p>連続操作をより効率的に制御できます。そしてこのパターンを使ってロック管理と書き込み例外テストを行います</p></li></ul><h3 id="5-1-リソースの解放"><a href="#5-1-リソースの解放" class="headerlink" title="5.1 リソースの解放"></a>5.1 リソースの解放</h3><ul><li>finalize()なんて使ったらGCされずに貯まるでしょ？</li><li>close()メソッドで閉じる？→閉じ忘れたらどうするの？→エラー発生したらclose()呼ばれないままになるよね？</li><li>try-with-resources構文使う？Java7から追加された便利な構文だけど、開発者が下記忘れたら元も子もない、AutoClosableの実装もしておかないと行けないでしょ？<ul><li>→ラムダ式で解決しましょう！という説明</li></ul></li></ul><h3 id="5-2-ラムダ式でリソース解放"><a href="#5-2-ラムダ式でリソース解放" class="headerlink" title="5.2 ラムダ式でリソース解放"></a>5.2 ラムダ式でリソース解放</h3><ul><li>ラムダ式で設計して、開発者にこれを使うように共有すれば問題なし</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriterEAM</span>  </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> FileWriter writer;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">FileWriterEAM</span><span class="params">(<span class="keyword">final</span> String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    writer = <span class="keyword">new</span> FileWriter(fileName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"close called automatically..."</span>);</span><br><span class="line">    writer.close();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeStuff</span><span class="params">(<span class="keyword">final</span> String message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    writer.write(message);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">(<span class="keyword">final</span> String fileName,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> UseInstance&lt;FileWriterEAM, IOException&gt; block)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> FileWriterEAM writerEAM = <span class="keyword">new</span> FileWriterEAM(fileName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      block.accept(writerEAM);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      writerEAM.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  </span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:EAM_USE_OUTPUT"</span>);</span><br><span class="line">    FileWriterEAM.use(<span class="string">"eam.txt"</span>, writerEAM -&gt; writerEAM.writeStuff(<span class="string">"sweet"</span>));</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"END:EAM_USE_OUTPUT"</span>);</span><br><span class="line"></span><br><span class="line">    FileWriterEAM.use(<span class="string">"eam2.txt"</span>, writerEAM -&gt; &#123;</span><br><span class="line">        writerEAM.writeStuff(<span class="string">"how"</span>);</span><br><span class="line">        writerEAM.writeStuff(<span class="string">"sweet"</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// interface</span></span><br><span class="line"><span class="comment">// @FunctionalInterfaceは関数型インターフェースであることの宣言</span></span><br><span class="line"><span class="comment">// 例外を考慮する必要がなければ、Consumerインターフェースを使えばよかったが、ラムダ式は、合成されるabstratメソッドのシグネチャの一部として定義されたチェック例外を投げることができるため実装</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UseInstance</span>&lt;<span class="title">T</span>, <span class="title">X</span> <span class="keyword">extends</span> <span class="title">Throwable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T instance)</span> <span class="keyword">throws</span> X</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MEMO: <code>execute around method</code>パターンの構造らしい<ul><li>この仕組はファイル読み込みを行う際に見習うべき</li><li>そもそも標準のjavaでファイル読み込み時に自動的に開放するような書き方ができないか確認すべき</li><li>実際には読み込みファイルと書き込みファイル両方を開いて処理を行う場合が多いのでは？<ul><li>そのような場合どうやって書いていく？</li></ul></li><li>Transactionという形でUTIL作成して、複数ファイルをオープンして操作していけば行ける？</li></ul></li></ul><h3 id="5-3-ロックの管理"><a href="#5-3-ロックの管理" class="headerlink" title="5.3 ロックの管理"></a>5.3 ロックの管理</h3><ul><li>コンカレントなJavaアプリケーションにおいてロックは重要な役割を果たす</li><li>ここでは、ラムダ式を使って細かなロックの制御を行い、重要なセクションの適切なロックの単体テストの可能性を開く</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Locker</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runLocked</span><span class="params">(Lock lock, Runnable block)</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      block.run();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MEMO: Lockの使い方確認 このロジックレベルでロックする使い所がいまいちピンとこない<ul><li>使い所があれば、synchronizedを使用するより、こちらの方が単体テストもしやすいメリットがあるみたい</li></ul></li></ul><h3 id="5-4-簡潔な例外テストの生成"><a href="#5-4-簡潔な例外テストの生成" class="headerlink" title="5.4 簡潔な例外テストの生成"></a>5.4 簡潔な例外テストの生成</h3><ul><li>Junitフレームワークなどでアノテーションを使用した、例外テストを実施する場合は、</li><li>ラムダ式で書き換えた方が良いという例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RodCutter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> mustFail;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RodCutter</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> fail)</span> </span>&#123; mustFail = fail; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrices</span><span class="params">(<span class="keyword">final</span> List&lt;Integer&gt; prices)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">if</span>(mustFail) </span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RodCutterException();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RodCutterException();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RodCutterTest</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> RodCutter rodCutter;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Integer&gt; prices;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> RodCutter <span class="title">createCutter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RodCutter(<span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Before</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rodCutter = createCutter();</span><br><span class="line">    prices = Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VerboseExceptionTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rodCutter.setPrices(prices);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      rodCutter.maxProfit(<span class="number">0</span>);</span><br><span class="line">      fail(<span class="string">"Expected exception for zero length"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(RodCutterException ex) &#123;</span><br><span class="line">      assertTrue(<span class="string">"expected"</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span>(expected = RodCutterException.class) </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TerseExceptionTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rodCutter.setPrices(prices);</span><br><span class="line">    rodCutter.maxProfit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Lamda式を利用したテスト方法</span></span><br><span class="line">  <span class="meta">@Test</span> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConciseExceptionTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rodCutter.setPrices(prices);</span><br><span class="line">    assertThrows(RodCutterException.class, () -&gt; rodCutter.maxProfit(<span class="number">0</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    junit.textui.TestRunner.run(<span class="keyword">new</span> JUnit4TestAdapter(RodCutterTest.class));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// HELPERの実装</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHelper</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;X extends Throwable&gt; <span class="function">Throwable <span class="title">assertThrows</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> Class&lt;X&gt; exceptionClass, <span class="keyword">final</span> Runnable block)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      block.run();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">if</span>(exceptionClass.isInstance(ex))</span><br><span class="line">        <span class="keyword">return</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    fail(<span class="string">"Failed to throw expected exception "</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MEMO: 現在のフレームワークでラムダ式を利用したメソッドが提供されていないかどうか確認する</li></ul><h3 id="5-5-まとめ"><a href="#5-5-まとめ" class="headerlink" title="5.5 まとめ"></a>5.5 まとめ</h3><ul><li>アプリケーションが外部リソースを使用する場合、全面的に自動ガベージコレクションに頼ることはできません。</li><li><code>execute around method</code>パターンは実行フローのきめ細かい制御や外部リソースの開放に役立つ<ul><li>オブジェクト生存期間の制御</li><li>ロック管理</li><li>簡潔な例外テストの記述</li></ul></li></ul><h2 id="6章-「遅延させる」ということ"><a href="#6章-「遅延させる」ということ" class="headerlink" title="6章　「遅延させる」ということ"></a>6章　「遅延させる」ということ</h2><h3 id="6-1-初期化の遅延"><a href="#6-1-初期化の遅延" class="headerlink" title="6.1 初期化の遅延"></a>6.1 初期化の遅延</h3><ul><li>オブジェクト内部に重いリソースが存在する場合、その生成を後回しにできれば有益</li><li>オブジェクトの一部の生成をアトマwしにするという設計上の決断は、オブジェクトを使う開発者にとって重荷になるべきではなく、シームレスであるべき</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Supplier&lt;Heavy&gt; heavy = () -&gt; createAndCacheHeavy();</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Holder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Holder created"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Heavy <span class="title">getHeavy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> heavy.get();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> Heavy <span class="title">createAndCacheHeavy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">HeavyFactory</span> <span class="keyword">implements</span> <span class="title">Supplier</span>&lt;<span class="title">Heavy</span>&gt; </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> Heavy heavyInstance = <span class="keyword">new</span> Heavy();</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Heavy <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> heavyInstance; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!HeavyFactory.class.isInstance(heavy)) &#123;</span><br><span class="line">      heavy = <span class="keyword">new</span> HeavyFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> heavy.get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Holder holder = <span class="keyword">new</span> Holder();</span><br><span class="line">    System.out.println(<span class="string">"deferring heavy creation..."</span>);</span><br><span class="line">    System.out.println(holder.getHeavy());</span><br><span class="line">    System.out.println(holder.getHeavy());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>virtual poroxyパターン</li><li>オブジェクトの生成に１レベル挟む<br>次はラムダ式で実現する</li></ul><h3 id="6-2-遅延評価"><a href="#6-2-遅延評価" class="headerlink" title="6.2 遅延評価"></a>6.2 遅延評価</h3><ul><li><p>短絡評価： <code>fn1() || fn2()</code></p></li><li><p>メソッドの引数の場合は渡されたものすべてが評価される</p><ul><li>すべての引数を使用しない場合はその評価に費やした時間とリソースが無駄になる</li><li>ここでもラムダ式を使って任意の引数の評価を遅らせることができる</li></ul></li><li><p>メソッド実行時にある引数が使用されない可能性があることがわかっていれば、いくつかの引数、またはすべての引数を遅延実行するようにメソッドのインターフェースを変更できる</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Evaluation</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">evaluate</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"evaluating ..."</span> + value);</span><br><span class="line">    simulateTimeConsumingOp(<span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">simulateTimeConsumingOp</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> millseconds)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; </span><br><span class="line">      Thread.sleep(<span class="number">2000</span>); </span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex); &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eagerEvaluator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> <span class="keyword">boolean</span> input1, <span class="keyword">final</span> <span class="keyword">boolean</span> input2)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"eagerEvaluator called..."</span>);</span><br><span class="line">    System.out.println(<span class="string">"accept?: "</span> + (input1 &amp;&amp; input2));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 遅延評価のためのメソッド</span></span><br><span class="line"><span class="comment">  * ラムダ式を引数に取り、実行自体はこのメソッドの中で行う</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lazyEvaluator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">final</span> Supplier&lt;Boolean&gt; input1, <span class="keyword">final</span> Supplier&lt;Boolean&gt; input2)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"lazyEvaluator called..."</span>);</span><br><span class="line">    System.out.println(<span class="string">"accept?: "</span> + (input1.get() &amp;&amp; input2.get()));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:EAGER_OUTPUT"</span>);</span><br><span class="line">    eagerEvaluator(evaluate(<span class="number">1</span>), evaluate(<span class="number">2</span>));</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"END:EAGER_OUTPUT"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ４秒かかっていた処理が２秒でfalseを返却するようになる</span></span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"START:LAZY_OUTPUT"</span>);</span><br><span class="line">    lazyEvaluator(() -&gt; evaluate(<span class="number">1</span>), () -&gt; evaluate(<span class="number">2</span>));</span><br><span class="line">    System.out.println(<span class="string">"//"</span> + <span class="string">"END:LAZY_OUTPUT"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>デメリット</p><ul><li>ラムダ式をわざわざ書かないと行けないので面倒（場合によってはメソッド参照を利用できる）</li><li>コード量は多くなる</li></ul></li><li><p>MEMO: フレームワークで遅延処理を行うためにはどのようにするべきか</p></li></ul><h3 id="6-3-Streamの遅延処理を活用"><a href="#6-3-Streamの遅延処理を活用" class="headerlink" title="6.3 Streamの遅延処理を活用"></a>6.3 Streamの遅延処理を活用</h3><ul><li>Streamの遅延評価について説明</li></ul><h4 id="6-3-1-中間処理と終端処理"><a href="#6-3-1-中間処理と終端処理" class="headerlink" title="6.3.1 中間処理と終端処理"></a>6.3.1 中間処理と終端処理</h4><ul><li><p>Streamには２種類のメソッドがある</p><ul><li>中間処理</li><li>終端処理</li></ul></li><li><p>Streamの遅さは複数の中間処理をチェーンし、最後に終端処理を行うことで実現している</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">"Brad"</span>, <span class="string">"Kate"</span>, <span class="string">"Kim"</span>, <span class="string">"Jack"</span>, <span class="string">"Joe"</span>,</span><br><span class="line">  <span class="string">"Mike"</span>, <span class="string">"Susan"</span>, <span class="string">"George"</span>, <span class="string">"Robert"</span>, <span class="string">"Julia"</span>, <span class="string">"Parker"</span>, <span class="string">"Benson"</span>);</span><br><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"START:CHAIN_OUTPUT"</span>);</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ここの処理はコレクションの変換に多くの作業を費やしている働き者に見えますが、実は見かけによらず怠け者です。</span></span><br><span class="line"><span class="keyword">final</span> String firstNameWith3Letters = </span><br><span class="line">  names.stream()</span><br><span class="line">        .filter(name -&gt; length(name) == <span class="number">3</span>)</span><br><span class="line">        .map(name -&gt; toUpper(name))</span><br><span class="line">        .findFirst()</span><br><span class="line">        .get();</span><br><span class="line"></span><br><span class="line">System.out.println(firstNameWith3Letters);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"//"</span> + <span class="string">"END:CHAIN_OUTPUT"</span>);</span><br></pre></td></tr></table></figure><ul><li><p>本当に必要な処理以外は実施していないらしい</p></li><li><p>その詳細を次で！述べる</p></li><li><p>中間処理、終端処理まで考慮された上で、初めて処理が実行される</p><ul><li>filter 12処理<ul><li>map 2処理<ul><li>findFirst 1処理</li></ul></li></ul></li><li>ではなく！</li><li>filter 3 処理！！<ul><li>map 1処理<ul><li>findFirst 1処理</li></ul></li></ul></li><li>という形で評価される</li></ul></li><li><p>JDKが裏で結合（fusing）処理を行うことで実現している</p></li><li><p>データの通り道は１本ということ</p></li><li><p>要素の抽出、マッピング、選択が１度に行われる</p></li></ul><h3 id="6-4-無限の「遅い」コレクションを生成"><a href="#6-4-無限の「遅い」コレクションを生成" class="headerlink" title="6.4 無限の「遅い」コレクションを生成"></a>6.4 無限の「遅い」コレクションを生成</h3><ul><li>MEMO: スキップ</li></ul><h3 id="6-5-まとめ"><a href="#6-5-まとめ" class="headerlink" title="6.5 まとめ"></a>6.5 まとめ</h3><h2 id="7章-再帰の最適化"><a href="#7章-再帰の最適化" class="headerlink" title="7章　再帰の最適化"></a>7章　再帰の最適化</h2><ul><li><p>再帰は魅力的で強力な問題解決方法</p></li><li><p>再帰はとても表現力に富んでいます</p></li><li><p>大きな問題の再帰処理を可能とする末尾呼び出し最適化（tail-call optimization TCO）を説明</p></li></ul><h3 id="7-1-末尾呼び出し最適化を使う"><a href="#7-1-末尾呼び出し最適化を使う" class="headerlink" title="7.1 末尾呼び出し最適化を使う"></a>7.1 末尾呼び出し最適化を使う</h3><ul><li><p>再帰を使う上で最も高いハードルは、巨大な入力値によるスタックオーバーフローのリスク</p></li><li><p>しかし、末尾呼び出し最適化（TCO）という優れたテクニックがこの心配のタネを取り除く</p></li><li><p>末尾呼び出しとは</p><ul><li>最後の処理が自身の呼び出しとなるような再帰呼び出しのことを言います</li></ul></li><li><p>JavaはTCOをコンパイラレベルで直接サポートしていませんが、ラムダ式を使って数行で実装できる</p></li><li><p>このソリューションはトランポリンとも呼ばれrます。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通常の実装</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factorialRec</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(number == <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> number;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> number * factorialRec(number - <span class="number">1</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 大きい数を渡すとStackOverflowErrorが発生</span></span><br></pre></td></tr></table></figure><ul><li>この再帰関数は大きな入力値を扱えず、落ちてしまう</li><li>再帰が強力で表現力豊かであっても使えません。</li><li>この問題は再帰そのものにあるわけではない</li><li>再帰の完了を待つ間、部分的な計算結果をすべて保存しているためです。</li><li>スタックに積み上げずに再帰を行う方法が必要</li></ul><h4 id="7-1-2-末尾再帰に変換する"><a href="#7-1-2-末尾再帰に変換する" class="headerlink" title="7.1.2 末尾再帰に変換する"></a>7.1.2 末尾再帰に変換する</h4><ul><li>遅延評価させるために<ul><li>TailCall関数型インターフェース</li><li>TailCallsクラスを設計する</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TailCall&lt;Integer&gt; <span class="title">factorialTailRec</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">final</span> <span class="keyword">int</span> factorial, <span class="keyword">final</span> <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (number == <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> done(factorial);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> call(() -&gt; factorialTailRec(factorial * number, number - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MEMO: TCOについて理解できていない… 再帰処理設計が必要になったら読み返す</li></ul><h3 id="7-2-メモ化でスピードアップ"><a href="#7-2-メモ化でスピードアップ" class="headerlink" title="7.2 メモ化でスピードアップ"></a>7.2 メモ化でスピードアップ</h3><h3 id="7-3-まとめ"><a href="#7-3-まとめ" class="headerlink" title="7.3 まとめ"></a>7.3 まとめ</h3><h2 id="8章-ラムダ式で合成"><a href="#8章-ラムダ式で合成" class="headerlink" title="8章　ラムダ式で合成"></a>8章　ラムダ式で合成</h2><ul><li><p>Java8には、オブジェクト志向アプローチと関数型スタイルという２つの強力なツールがある</p></li><li><p>組み合わせて使っていこう！</p></li><li><p>本章では、</p><ul><li>関数合成を詳しく説明し、実践的なMapReduceパターンを例として実装</li><li>MapReduceパターンでは、独立した計算処理を分散し、それらの処理結果を集約して最終的な結果を計算します</li><li>最後はJDKの力を借りて、この計算処理を簡単に並列化します。</li></ul></li></ul><h3 id="8-1-関数合成の利用"><a href="#8-1-関数合成の利用" class="headerlink" title="8.1 関数合成の利用"></a>8.1 関数合成の利用</h3><ul><li><p>オブジェクト指向＋関数型スタイル複合アプローチでは、状態が変化するのではなく、軽量なオブジェクトが別のオブジェクトに変換される</p></li><li><p>可変性がないことで、エラー発生の可能性を減らし、並列実行家より簡単</p></li><li><p>リストからStreamを作成し、オリジナルのリストは変更されず、新しくオブジェクトを生成するということが言いたいだけ</p></li></ul><h3 id="8-2-MapReduceの使用"><a href="#8-2-MapReduceの使用" class="headerlink" title="8.2 MapReduceの使用"></a>8.2 MapReduceの使用</h3><ul><li><p>MapReduceパターンは２つの操作がある</p><ul><li>コレクションの各要素で実行する操作</li><li>これらの実行結果を組み合わせて最終結果を導き出す</li></ul></li><li><p>このパターンでマルチコアプロセッサを有効活用可能であることから注目をされつつある</p></li><li><p><code>Tickers.symbols.parallelStream()</code>は裏側に隠れているスレッドプールで管理された複数のスレッドで、</p></li><li><p>map()やfilter()のようなメソッドを並列処理します。</p></li><li><p>stream()とparallelStream()のどちらを使用するかを決める際には、いくつかの問題を考えなければいけません</p><ul><li>本当にラムダ式を同時に実行したいのか？</li><li>対象コードは副作用や競合状態が発生しない、独立した動作を行える？</li><li>実行順序に影響を与えることはないか？</li></ul></li><li><p>map()やfilter()のように、計算を行って、その結果を次の処理に回すようなメソッドは並列化に向いている</p></li><li><p>MEMO: 闇雲に並列化はしないほうがよい！！</p></li><li><p>並列ストリームを選択すべきか？</p><ul><li>ライブラリは簡単に並列化を行ってくれるが、並列化が常に正しい選択であるとは限らない</li><li>データと、実行する計算内容によっては、並列計算はシーケンシャルな計算より遅くなることもあり得る</li><li>並列化実行処理のためのコストもかかる</li><li>コレクションが小さいのであれば、シーケンシャル実行のほうが早くなるかも</li><li>速度を計測して実装していくべき</li></ul></li></ul><h3 id="8-3-並列化への飛躍"><a href="#8-3-並列化への飛躍" class="headerlink" title="8.3 並列化への飛躍"></a>8.3 並列化への飛躍</h3><h3 id="8-4-まとめ"><a href="#8-4-まとめ" class="headerlink" title="8.4 まとめ"></a>8.4 まとめ</h3><h2 id="9章-すべてをまとめて"><a href="#9章-すべてをまとめて" class="headerlink" title="9章　すべてをまとめて"></a>9章　すべてをまとめて</h2><ul><li>本書を通してJava8のラムダ式を紹介しました</li><li>コレクションのイテレーションを行い</li><li>軽量でよりよい設計を実現し、コードを簡単に合成、そして並列化しました。</li><li>この最終章ではまとめとして、関数型スタイルのプログラミングを使って、最大の効果を上げるために</li><li>磨いておくべきことを説明し、関数型スタイルを採用して成功するための推奨事項を最後に取り上げる</li></ul><h3 id="9-1-関数型スタイルで成功するために実践すべきこと"><a href="#9-1-関数型スタイルで成功するために実践すべきこと" class="headerlink" title="9.1 関数型スタイルで成功するために実践すべきこと"></a>9.1 関数型スタイルで成功するために実践すべきこと</h3><p>新機能のメリットを十分に活かし、簡潔で軽量なアプリケーションを生成するには、設計、コーディング、そして考え方まで変えなければいけません。</p><p>これまでのJavaを使ってきた命令形や、オブジェクト指向のパラダイムとは違うもの</p><p>ここでは根本的に変えるべきアプリケーション開発手法や、その変更によって得られる利点について説明</p><h4 id="9-1-1-宣言的により近く、命令型からより遠く"><a href="#9-1-1-宣言的により近く、命令型からより遠く" class="headerlink" title="9.1.1 宣言的により近く、命令型からより遠く"></a>9.1.1 宣言的により近く、命令型からより遠く</h4><ul><li>価格リストを与えられていて、その中から最大値を選ぶようにと依頼されたとしたときに、</li><li>命令型のfor文で最大値を探すのではなく、ラムダ式を使ってstream経由で取得する</li></ul><h4 id="9-1-2-普遍性の尊重"><a href="#9-1-2-普遍性の尊重" class="headerlink" title="9.1.2 普遍性の尊重"></a>9.1.2 普遍性の尊重</h4><ul><li>状態変更が可能な(mutable)変数はあまり上品とは言えません。</li><li>そしてそのような変数の共有は単なる害悪</li><li>開発者は変数の状態変更によって混乱させられてしまい、時には変更を見逃してしまいます。</li><li>したがって、変更可能な変数が多いほど、より多くのエラーが発生する可能性があるということ</li><li>正確な並列化が非常に難しくなるということもデメリット</li><li>関数型スタイルの導入がそれを簡単にしてくれる</li><li>純粋な関数型言語は値しか持っていません。つまり１回しか書き込みができない、初期化後は全く変更を受け付けない変数です。</li><li>しかしJavaはそのような言語とはことなり、不変性(immutability)を強制しないため、不変性を尊重する責任は開発者にある</li></ul><h4 id="9-1-3-副作用の削減"><a href="#9-1-3-副作用の削減" class="headerlink" title="9.1.3 副作用の削減"></a>9.1.3 副作用の削減</h4><ul><li>副作用を減らそう</li><li>所感：時間や状態などの外部要員によって関数の処理結果が異なることが無いように作成すること</li></ul><h4 id="9-1-4-文より式を優先"><a href="#9-1-4-文より式を優先" class="headerlink" title="9.1.4 文より式を優先"></a>9.1.4 文より式を優先</h4><ul><li><p>文：アクションを実行するが何も返さない</p></li><li><p>式：アクションを実行して結果を返す</p></li><li><p>文は何も返さないため、目的を遂行するためには副作用を起こしメモリを書き換える必要がある</p></li><li><p>一方式は、参照透明性を保つように設計できるため、これまでに述べたメリットを得られる</p></li><li><p>式を使うメリット</p><ul><li>関数合成ができるということが挙げられる</li><li>チェーンでコードを記述することで、文章を読むように簡単にコードを読めるようになる</li></ul></li></ul><h4 id="9-1-5-高階関数を利用して設計"><a href="#9-1-5-高階関数を利用して設計" class="headerlink" title="9.1.5 高階関数を利用して設計"></a>9.1.5 高階関数を利用して設計</h4><ul><li><p>これまでは匿名内部クラスを単一メソッドのインターフェースに渡していたような場所で、</p></li><li><p>ラムダ式やメソッド参照を渡すことができる様になり、コードがより簡潔になります。</p></li><li><p>メーラーを関数で設計することでローンパターンを適用する例</p></li><li><p>Colorフィルターを関数で表現する例</p></li><li><p>関数を引数に渡してDRYな設計をしよう</p></li></ul><h3 id="9-2-パフォーマンスの問題"><a href="#9-2-パフォーマンスの問題" class="headerlink" title="9.2 パフォーマンスの問題"></a>9.2 パフォーマンスの問題</h3><ul><li><p>命令型のコードと比較してもパフォーマンスは劣らない</p><ul><li>メリット<ul><li>直感的に見やすい</li><li>並列化も容易</li></ul></li></ul></li><li><p>関数型を採用しましょう</p></li><li><p>MEMO: 処理時間の違いはむやみに信頼できるものではないのでやめましょうと書かれている…</p></li></ul><h3 id="9-3-関数型スタイルを採用"><a href="#9-3-関数型スタイルを採用" class="headerlink" title="9.3 関数型スタイルを採用"></a>9.3 関数型スタイルを採用</h3><ul><li>実際に使ってみて、試して、より良い設計を考えていこう！</li></ul><h2 id="付録A-基本的な関数型インタフェース"><a href="#付録A-基本的な関数型インタフェース" class="headerlink" title="付録A 基本的な関数型インタフェース"></a>付録A 基本的な関数型インタフェース</h2><ul><li>JDK8には様々な関数型インターフェースを持っている</li><li>ここでは頻繁に出現する基本的なインターフェースをいくつか紹介</li></ul><h3 id="A-1-Consumer"><a href="#A-1-Consumer" class="headerlink" title="A.1 Consumer"></a>A.1 Consumer<T></h3><ul><li><p>入力を受け入れ、戻り値を返さない操作を表すインターフェース</p></li><li><p>有効活用するためには副作用を伴う必要がある</p></li><li><p>抽象メソッド</p><ul><li>accept()</li></ul></li><li><p>defaultメソッド</p><ul><li>andThen()</li></ul></li><li><p>主な利用方法</p><ul><li>forEach()メソッドの引数</li></ul></li><li><p>特注なプリミティブ</p><ul><li>IntConsumer, LongConsumer, DoubleConsumerなど</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java8sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Sample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; hoge = string -&gt; System.out.println(<span class="string">"hoge : "</span> + string);</span><br><span class="line">        Consumer&lt;String&gt; fuga = string -&gt; System.out.println(<span class="string">"fuga : "</span> + string);</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; piyo = hoge.andThen(fuga);</span><br><span class="line"></span><br><span class="line">        piyo.accept(<span class="string">"piyo"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A-2-Supplier"><a href="#A-2-Supplier" class="headerlink" title="A.2 Supplier"></a>A.2 Supplier<T></h3><ul><li><p>新しいインスタンス、またはあらかじめ生成しておいたインスタンスを返すファクトリ。</p></li><li><p>抽象メソッド</p><ul><li>get()</li></ul></li><li><p>defaultメソッド</p><ul><li>なし</li></ul></li><li><p>主な利用方法</p><ul><li>遅延実行を行う無限Streamの生成</li><li>OptionalクラスのorElseGet()メソッドの引数</li></ul></li><li><p>特殊なプリミティブ</p><ul><li>IntSupplier, LongSupplier, DoubleSupplierなど</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java8sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Sample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Supplier&lt;String&gt; supplier = () -&gt; <span class="string">"hoge"</span>;</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>遅延初期化で少し出てきた程度</li></ul><h3 id="A-3-Predicate"><a href="#A-3-Predicate" class="headerlink" title="A.3 Predicate"></a>A.3 Predicate<T></h3><ul><li><p>入力値が何らかの条件に該当するかを確認するために有効。</p></li><li><p>抽象メソッド</p><ul><li>test()</li></ul></li><li><p>defaultメソッド</p><ul><li>and(), nagate(), or()</li></ul></li><li><p>主な利用方法</p><ul><li>Streamのfilter()やanyMatch()メソッドなどの引数</li></ul></li><li><p>特殊なプリミティブ</p><ul><li>IntPredicate, LongPredicate, DoublePredicateなど</li></ul></li><li><p>anyMatchはリストのStreamのうちどれか１つでも一致する条件であればtrueを返却する動きになるみたい</p><ul><li>→終端操作</li></ul></li><li><p>filterは中間操作</p></li></ul><h3 id="A-4-Function-lt-T-R-gt"><a href="#A-4-Function-lt-T-R-gt" class="headerlink" title="A.4 Function&lt;T, R&gt;"></a>A.4 Function&lt;T, R&gt;</h3><ul><li><p>引数をとって適切な結果値を返す操作を表す変換インターフェース</p></li><li><p>抽象メソッド</p><ul><li>apply()</li></ul></li><li><p>defaultメソッド</p><ul><li>andThen(), compose()</li></ul></li><li><p>主な利用方法</p><ul><li>Streamのmap()メソッドの引数</li></ul></li><li><p>特殊なプリミティブ</p><ul><li>IntFunction、LongFunction, DoubleFunction, IntToDoubleFunction, DoubleToIntFunction</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java8sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Sample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Function&lt;String, String&gt; wrapDoubleQuotation = str -&gt; <span class="string">"\""</span> + str + <span class="string">"\""</span>;</span><br><span class="line">        Function&lt;String, String&gt; wrapSingleQuotation = str -&gt; <span class="string">"'"</span> + str + <span class="string">"'"</span>;</span><br><span class="line"></span><br><span class="line">        Function&lt;String, String&gt; wrapDoubleAndSingleQuotation = wrapDoubleQuotation.compose(wrapSingleQuotation);</span><br><span class="line">        String result = wrapDoubleAndSingleQuotation.apply(<span class="string">"hoge"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="付録B-構文の基礎"><a href="#付録B-構文の基礎" class="headerlink" title="付録B 構文の基礎"></a>付録B 構文の基礎</h2><ul><li>関数型インターフェスのクイック・リファレンス</li></ul><h3 id="B-1-関数型インタフェースの定義"><a href="#B-1-関数型インタフェースの定義" class="headerlink" title="B.1 関数型インタフェースの定義"></a>B.1 関数型インタフェースの定義</h3><ul><li>関数型インターフェース<ul><li>interface実装して、<code>@FunctionalInterface</code>を付与する</li><li>実装されていないabstractメソッドを必ず１つ持つ</li><li>必要に応じて実装されたdefaultメソッドを持つ</li><li>staticメソッドも持つことができる</li></ul></li></ul><h3 id="B-2-パラメータを持たないラムダ式の生成"><a href="#B-2-パラメータを持たないラムダ式の生成" class="headerlink" title="B.2 パラメータを持たないラムダ式の生成"></a>B.2 パラメータを持たないラムダ式の生成</h3><h3 id="B-3-パラメータ-1つのラムダ式の生成"><a href="#B-3-パラメータ-1つのラムダ式の生成" class="headerlink" title="B.3 パラメータ 1つのラムダ式の生成"></a>B.3 パラメータ 1つのラムダ式の生成</h3><p>型推論は効くが、明示した場合は <code>(final String str) -&gt; System.out.println(str);</code>などとする</p><h3 id="B-4-ラムダ式のパラメータ型を推論する"><a href="#B-4-ラムダ式のパラメータ型を推論する" class="headerlink" title="B.4 ラムダ式のパラメータ型を推論する"></a>B.4 ラムダ式のパラメータ型を推論する</h3><ul><li>通常、型推論されるが、１つでも型を明示的に記載する必要がある場合、</li><li>すべて引数の型を記載する必要がある</li></ul><h3 id="B-5-パラメータ-1つのラムダ式では括弧を省略可能"><a href="#B-5-パラメータ-1つのラムダ式では括弧を省略可能" class="headerlink" title="B.5 パラメータ 1つのラムダ式では括弧を省略可能"></a>B.5 パラメータ 1つのラムダ式では括弧を省略可能</h3><ul><li><code>(name) -&gt; ;</code>とかいても <code>name -&gt; ;</code>とかいてもよい</li></ul><h3 id="B-6-複数パラメータを持つラムダ式の生成"><a href="#B-6-複数パラメータを持つラムダ式の生成" class="headerlink" title="B.6 複数パラメータを持つラムダ式の生成"></a>B.6 複数パラメータを持つラムダ式の生成</h3><ul><li>複数のパラメータを持つ場合はカッコが必須 <code>frinends.stream().reduce((name1,name2) -&gt; name1.length() &gt;= name2.length() ? name1 : name2);</code></li></ul><h3 id="B-7-複数の型のパラメータを持つメソッドを呼び出す"><a href="#B-7-複数の型のパラメータを持つメソッドを呼び出す" class="headerlink" title="B.7 複数の型のパラメータを持つメソッドを呼び出す"></a>B.7 複数の型のパラメータを持つメソッドを呼び出す</h3><ul><li>ラムダ式やメソッド参照を引数に渡せる</li></ul><h3 id="B-8-ラムダ式を変数に格納"><a href="#B-8-ラムダ式を変数に格納" class="headerlink" title="B.8 ラムダ式を変数に格納"></a>B.8 ラムダ式を変数に格納</h3><ul><li>再利用するためにラムダ式を変数に格納できる</li></ul><h3 id="B-9-複数行のラムダ式を生成"><a href="#B-9-複数行のラムダ式を生成" class="headerlink" title="B.9 複数行のラムダ式を生成"></a>B.9 複数行のラムダ式を生成</h3><ul><li>ラムダ式は複数行に渡って記載できる</li><li>必要に応じて、return文を記載しないといけない</li></ul><h3 id="B-10-ラムダ式を返す"><a href="#B-10-ラムダ式を返す" class="headerlink" title="B.10 ラムダ式を返す"></a>B.10 ラムダ式を返す</h3><ul><li>メソッドの戻り値型として関数型インタフェースを指定できる</li></ul><h3 id="B-11-ラムダ式からラムダ式を返す"><a href="#B-11-ラムダ式からラムダ式を返す" class="headerlink" title="B.11 ラムダ式からラムダ式を返す"></a>B.11 ラムダ式からラムダ式を返す</h3><ul><li>ラムダ式を返すラムダ式をかける</li></ul><h3 id="B-12-クロージャにおける静的スコープ"><a href="#B-12-クロージャにおける静的スコープ" class="headerlink" title="B.12 クロージャにおける静的スコープ"></a>B.12 クロージャにおける静的スコープ</h3><h3 id="B-13-インスタンスメソッドのメソッド参照を渡す"><a href="#B-13-インスタンスメソッドのメソッド参照を渡す" class="headerlink" title="B.13 インスタンスメソッドのメソッド参照を渡す"></a>B.13 インスタンスメソッドのメソッド参照を渡す</h3><h3 id="B-14-メソッド参照をstaticメソッドに渡す"><a href="#B-14-メソッド参照をstaticメソッドに渡す" class="headerlink" title="B.14 メソッド参照をstaticメソッドに渡す"></a>B.14 メソッド参照をstaticメソッドに渡す</h3><h3 id="B-15-メソッド参照を他のインスタンスのメソッドに渡す"><a href="#B-15-メソッド参照を他のインスタンスのメソッドに渡す" class="headerlink" title="B.15 メソッド参照を他のインスタンスのメソッドに渡す"></a>B.15 メソッド参照を他のインスタンスのメソッドに渡す</h3><h3 id="B-16-複数の引数を取るメソッドの参照を渡す"><a href="#B-16-複数の引数を取るメソッドの参照を渡す" class="headerlink" title="B.16 複数の引数を取るメソッドの参照を渡す"></a>B.16 複数の引数を取るメソッドの参照を渡す</h3><h3 id="B-17-コンストラクタ参照を使う"><a href="#B-17-コンストラクタ参照を使う" class="headerlink" title="B.17 コンストラクタ参照を使う"></a>B.17 コンストラクタ参照を使う</h3><h3 id="B-18-関数合成"><a href="#B-18-関数合成" class="headerlink" title="B.18 関数合成"></a>B.18 関数合成</h3><h2 id="付録C-Web上のリソース"><a href="#付録C-Web上のリソース" class="headerlink" title="付録C Web上のリソース"></a>付録C Web上のリソース</h2><ul><li><p>Cutting Stock問題</p><ul><li><a href="https://en.wikipedia.org/wiki/Cutting_stock_problem">https://en.wikipedia.org/wiki/Cutting_stock_problem</a></li><li>メモ化テクニックを使って解決できる最適化問題</li></ul></li><li><p>依存関係逆転の原則</p><ul><li>クラスの実装で拡張するのではなく、抽象（インタフェース）とカップリングすることによる拡張方法を説明している</li></ul></li><li><p>DRY原則</p><ul><li><a href="https://ja.wikipedia.org/wiki/Don%27t_repeat_yourself">https://ja.wikipedia.org/wiki/Don%27t_repeat_yourself</a></li></ul></li><li><p>本質と儀式について（Essence vs. Ceremony）</p><ul><li>→古いからやめようと思う</li></ul></li><li><p>Execute Around Methodパターン</p></li><li><p>ローンパターン(Loan Pattern)</p><ul><li>Scalaにおけるローンパターンの紹介</li><li>記事がなかった<ul><li><a href="https://docs.scala-lang.org/">https://docs.scala-lang.org/</a></li></ul></li></ul></li><li><p>伝えろ。聞くな。</p><ul><li><a href="https://pragprog.com/articles/tell-dont-asks">https://pragprog.com/articles/tell-dont-asks</a></li><li>伝えろ、聞くなという原則を説明するコラム</li></ul></li><li><p>書籍サイト</p><ul><li><a href="https://pragprog.com/">https://pragprog.com/</a></li></ul></li></ul><h2 id="付録D-参考文献"><a href="#付録D-参考文献" class="headerlink" title="付録D 参考文献"></a>付録D 参考文献</h2><h2 id="訳者あとがき"><a href="#訳者あとがき" class="headerlink" title="訳者あとがき"></a>訳者あとがき</h2><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Javaによる関数型プログラミングJava8ラムダ式とStream&quot;&gt;&lt;a href=&quot;#Javaによる関数型プログラミングJava8ラムダ式とStream&quot; class=&quot;headerlink&quot; title=&quot;Javaによる関数型プログラミングJava8ラムダ式</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AWS_SolutionArchitectSpecialist_受験対策まとめ</title>
    <link href="http://yoursite.com/AWS/Cloud/%E8%B3%87%E6%A0%BC/2023-06_AWS_SolutionArchitectSpecialist_%E5%8F%97%E9%A8%93%E5%AF%BE%E7%AD%96%E3%83%A1%E3%83%A2/"/>
    <id>http://yoursite.com/AWS/Cloud/%E8%B3%87%E6%A0%BC/2023-06_AWS_SolutionArchitectSpecialist_%E5%8F%97%E9%A8%93%E5%AF%BE%E7%AD%96%E3%83%A1%E3%83%A2/</id>
    <published>2023-06-23T15:00:00.000Z</published>
    <updated>2023-06-24T11:42:16.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AWS-SysOps-Administrator-Associate-Exam-preparation"><a href="#AWS-SysOps-Administrator-Associate-Exam-preparation" class="headerlink" title="AWS SysOps Administrator Associate Exam preparation"></a>AWS SysOps Administrator Associate Exam preparation</h1><h2 id="基本情報"><a href="#基本情報" class="headerlink" title="基本情報"></a>基本情報</h2><ul><li>試験時間：試験完了までに 180 分</li><li>スコア：100-1000点</li><li>最低合格スコア：720点</li><li>受験料：300 USD</li><li>フォーマット: 75 問</li></ul><h2 id="WEB情報"><a href="#WEB情報" class="headerlink" title="WEB情報"></a>WEB情報</h2><p><a href="https://aws.amazon.com/jp/certification/certified-solutions-architect-professional/?ch=sec&amp;sec=rmg&amp;d=1">https://aws.amazon.com/jp/certification/certified-solutions-architect-professional/?ch=sec&amp;sec=rmg&amp;d=1</a></p><h3 id="認定によって検証される能力"><a href="#認定によって検証される能力" class="headerlink" title="認定によって検証される能力"></a>認定によって検証される能力</h3><ul><li>複雑な組織に対応する設計</li><li>新しいソリューションのための設計</li><li>既存ソリューションの継続的な改善</li><li>ワークロードの移行とモダナイゼーションの加速</li></ul><h3 id="内容の概要"><a href="#内容の概要" class="headerlink" title="内容の概要"></a>内容の概要</h3><table><thead><tr><th>分野</th><th>出題の比率</th></tr></thead><tbody><tr><td>第 1 分野 複雑な組織に対応するソリューションの設計</td><td>26%</td></tr><tr><td>第 2 分野 新しいソリューションのための設計</td><td>29%</td></tr><tr><td>第 3 分野 既存のソリューションの継続的な改善</td><td>25%</td></tr><tr><td>第 4 分野 ワークロードの移行とモダナイゼーションの加速</td><td>20%</td></tr><tr><td>合計</td><td>100%</td></tr></tbody></table><h2 id="タスク"><a href="#タスク" class="headerlink" title="タスク"></a>タスク</h2><h3 id="第１分野-複雑な組織に対応するソリューションの設計"><a href="#第１分野-複雑な組織に対応するソリューションの設計" class="headerlink" title="第１分野: 複雑な組織に対応するソリューションの設計"></a>第１分野: 複雑な組織に対応するソリューションの設計</h3><p>タスクステートメント 1: ネットワーク接続戦略を設計する。</p><p>対象知識:</p><ul><li>AWS のグローバルインフラストラクチャ</li><li>AWS ネットワークの概念 (Amazon VPC、AWS Direct Connect、AWS VPN、推移的ルーティング、AWS コンテナサービスなど)</li><li>ハイブリッド DNS の概念 (Amazon Route 53 Resolver、オンプレミス DNS 統合など)</li><li>ネットワークセグメンテーション (サブネット、IP アドレス指定、VPC 間の接続など)</li><li>ネットワークトラフィックモニタリング</li></ul><p>対象スキル:</p><ul><li>複数の VPC の接続オプションを評価する</li><li>オンプレミス、コロケーション、クラウド統合の接続オプションを評価する</li><li>ネットワークとレイテンシーの要件に基づいて AWS リージョンとアベイラビリティーゾーンを選択する</li><li>AWS ツールを使用してトラフィックフローの問題を解決する</li><li>サービス統合のサービスエンドポイントを活用する</li></ul><p>タスクステートメント 2: セキュリティコントロールを規定する。</p><p>対象知識:</p><ul><li>AWS Identity and Access Management (IAM) と AWS Single Sign-On</li><li>ルートテーブル、セキュリティグループ、ネットワーク ACL</li><li>暗号化キーと証明書管理 (AWS Key Management Service [AWS KMS]、AWS CertificateManager [ACM] など)</li><li>AWS のセキュリティ、アイデンティティ、コンプライアンスのツール (AWS CloudTrail、AWS Identity and Access Management Access Analyzer、AWS Security Hub、Amazon Inspector など)</li></ul><p>対象スキル:</p><ul><li>クロスアカウントアクセス管理を評価する</li><li>サードパーティー ID プロバイダーと統合する</li><li>保存中のデータと転送中のデータに対する暗号化戦略を導入する</li><li>セキュリティイベントの通知と監査を一元化するための戦略を策定する</li></ul><p>タスクステートメント 3: 信頼性と耐障害性に優れたアーキテクチャを設計する。</p><p>対象知識:</p><ul><li>目標復旧時間 (RTO) と目標復旧時点 (RPO)</li><li>災害対策戦略 (AWS Elastic Disaster Recovery [CloudEndure Disaster Recovery]、パイロットライト、ウォームスタンバイ、マルチサイトの使用など)</li><li>データのバックアップと復元</li></ul><p>対象スキル:</p><ul><li>RTO および RPO 要件に基づいて災害対策ソリューションを設計する</li><li>障害から自動的に復旧するアーキテクチャを実装する</li><li>スケールアップとスケールアウトのオプションを考慮し、最適なアーキテクチャを策定する</li><li>効果的なバックアップ&#x2F;復元の戦略を設計する</li></ul><p>タスクステートメント 4: マルチアカウント AWS 環境を設計する。</p><p>対象知識:</p><ul><li>AWS Organizations と AWS Control Tower</li><li>マルチアカウントイベント通知</li><li>環境間の AWS リソース共有</li></ul><p>対象スキル:</p><ul><li>組織の要件に最も適したアカウント構造を評価する</li><li>一元的なログ記録とイベント通知の戦略を推奨する</li><li>マルチアカウントガバナンスモデルを開発する</li></ul><p>タスクステートメント 5: コスト最適化と可視化の戦略を決定する。</p><p>対象知識:</p><ul><li>AWS のコストおよび使用状況のモニタリングツール (AWS Trusted Advisor、AWS Pricing Calculator、AWS Cost Explorer、AWS Budgets など)</li><li>AWS 購入オプション (リザーブドインスタンス、Savings Plans、スポットインスタンスなど)</li><li>サイズ適正化のための AWS 可視化ツール (AWS Compute Optimizer、Amazon S3 StorageLens など)</li></ul><p>対象スキル:</p><ul><li>AWS ツールでコストと使用量をモニタリングする</li><li>コストを事業単位にマッピングする効果的なタグ付け戦略を策定する</li><li>購入オプションがコストとパフォーマンスに与える影響を理解する</li></ul><p>第 2 分野: 新しいソリューションのための設計</p><p>タスクステートメント 1: ビジネス要件を満たす導入戦略を設計する。</p><p>対象知識:</p><ul><li>Infrastructure as Code (IaC) (AWS CloudFormation など)</li><li>継続的インテグレーション&#x2F;継続的デリバリー (CI&#x2F;CD)</li><li>変更管理プロセス</li><li>構成管理ツール (AWS Systems Manager など)</li></ul><p>対象スキル:</p><ul><li>新しいサービスや機能のためのアプリケーションまたはアップグレードパスを決定する</li><li>デプロイ戦略を策定し、適切なロールバックメカニズムを実装するためのサービスを選定する</li><li>必要に応じてマネージドサービスを採用し、インフラストラクチャのプロビジョニングやパッチ適用のオーバーヘッドを削減する</li><li>複雑な開発タスクとデプロイタスクを AWS にまかせ、高度なテクノロジーを利用できるようにする</li></ul><p>タスクステートメント 2: 事業継続性を確保するソリューションを設計する。</p><p>対象知識:</p><ul><li>AWS のグローバルインフラストラクチャ</li><li>AWS ネットワークの概念 (Route 53、ルーティングメソッドなど)</li><li>RTO と RPO</li><li>災害対策シナリオ (バックアップと復元、パイロットライト、ウォームスタンバイ、マルチサイトなど)</li><li>AWS の災害対策ソリューション</li></ul><p>対象スキル:</p><ul><li>災害対策ソリューションを構成する</li><li>データとデータベースのレプリケーションを構成する</li><li>災害対策テストを実行する</li><li>自動化され、費用対効果が高く、複数のアベイラビリティーゾーンおよび&#x2F;またはAWS リージョンをまたいで事業継続性をサポートするバックアップソリューションのアーキテクチャを設計する</li><li>障害時もアプリケーションとインフラストラクチャの可用性を維持するアーキテクチャを設計する</li><li>プロセスとコンポーネントを活用して一元的なモニタリングを行い、システム障害からプロアクティブに復旧する</li></ul><p>タスクステートメント 3: 要件に基づいてセキュリティコントロールを決定する。</p><p>対象知識:</p><ul><li>IAM</li><li>ルートテーブル、セキュリティグループ、ネットワーク ACL</li><li>保管中のデータと転送中のデータの暗号化オプション</li><li>AWS サービスエンドポイント</li><li>認証情報管理サービス</li><li>AWS マネージドセキュリティサービス (AWS Shield、AWS WAF、Amazon GuardDuty、AWS Security Hub など)</li></ul><p>対象スキル:</p><ul><li>最小権限アクセスの原則に従った IAM ユーザーと IAM ロールを指定する</li><li>セキュリティグループルールとネットワーク ACL ルールを使用したインバウンドおよびアウトバウンドのネットワークフローを指定する</li><li>大規模なウェブアプリケーションの攻撃対策戦略を策定する</li><li>保管中のデータと転送中のデータの暗号化戦略を策定する</li><li>サービス統合のサービスエンドポイントを指定する</li><li>組織の規格への準拠を維持するためのパッチ管理戦略を策定する</li></ul><p>タスクステートメント 4: 信頼性の要件を満たす戦略を策定する。</p><p>対象知識:</p><ul><li>AWS のグローバルインフラストラクチャ</li><li>AWS ストレージサービスとレプリケーション戦略 (Amazon S3、Amazon RDS、AmazonElastiCache など)</li><li>マルチ AZ およびマルチリージョンアーキテクチャ</li><li>オートスケーリングのポリシーとイベント</li><li>アプリケーション統合 (Amazon Simple Notification Service [Amazon SNS]、AmazonSimple Queue Service [Amazon SQS]、AWS Step Functions など)</li><li>サービスクォータと上限</li></ul><p>対象スキル:</p><ul><li>ビジネス要件に基づいて可用性の高いアプリケーション環境を設計する</li><li>高度な技術を活用して障害に備えて設計し、シームレスなシステム回復性を確保する</li><li>疎結合依存関係を実装する</li><li>高可用性アーキテクチャを運用、保守する (アプリケーションのフェイルオーバー、データベースのフェイルオーバーなど)</li><li>AWS マネージドサービスを活用して高可用性を実現する</li><li>DNS ルーティングポリシーを実装する (Route 53 のレイテンシールーティングポリシー、位置情報ルーティング、シンプルルーティングなど)</li></ul><p>タスクステートメント 5: パフォーマンス目標を満たすソリューションを設計する。</p><p>対象知識:</p><ul><li>パフォーマンスモニタリングテクノロジー</li><li>AWS のストレージオプション</li><li>インスタンスファミリーとユースケース</li><li>目的別データベース</li></ul><p>対象スキル:</p><ul><li>さまざまなアクセスパターンに対応した大規模アプリケーションアーキテクチャを設計する</li><li>ビジネス目標に合わせて伸縮自在なアーキテクチャを設計する</li><li>キャッシュ、バッファリング、レプリカでパフォーマンス目標を達成するための設計パターンを適用する</li><li>必要なタスクに特化したサービスを選択するためのプロセス方法論を策定する</li><li>サイズ適正化戦略を設計する</li></ul><p>タスクステートメント 6: ソリューションの目標と目的を達成するためのコスト最適化戦略を決定する。</p><p>対象知識:</p><ul><li>AWS のコストおよび使用状況のモニタリングツール (Cost Explorer、Trusted Advisor、AWS Pricing Calculator など)</li><li>料金モデル (リザーブドインスタンス、Savings Plans など)</li><li>ストレージ階層化</li><li>データ転送コスト</li><li>AWS が提供するマネージドサービス</li></ul><p>対象スキル:</p><ul><li>インフラストラクチャを選択し、適切なサイズにする機会を特定し、リソースの費用対効果を上げる</li><li>適切な価格モデルを特定する</li><li>データ転送のモデル化とサービスの選択を行い、データ転送コストを削減する</li><li>経費支出と使用状況を認識するための戦略を策定し、制御を実装する</li></ul><p>第 3 分野: 既存のソリューションの継続的な改善</p><p>タスクステートメント 1: 全体的な運用上の優秀性を高めるための戦略を作成する。</p><p>対象知識:</p><ul><li>アラートと自動修復の戦略</li><li>災害対策計画</li><li>モニタリングとログ記録のソリューション (Amazon CloudWatch など)</li><li>CI&#x2F;CD パイプラインとデプロイ戦略 (ブルー&#x2F;グリーン、オールアットワンス、ローリングなど)</li><li>構成管理ツール (Systems Manager など)</li></ul><p>対象スキル:</p><ul><li>最も適したログ記録とモニタリング戦略を決定する</li><li>改善の機会を特定する目的で現在のデプロイプロセスを評価する</li><li>ソリューションスタック内の自動化の機会に優先順位を付ける</li><li>構成管理を自動化を可能にするために適切な AWS ソリューションを提案する</li><li>復旧アクションの理解をサポートし、演習するための障害シナリオアクティビティを設計する</li></ul><p>タスクステートメント 2: セキュリティを向上させるための戦略を決定する。</p><p>対象知識:</p><ul><li>データ保持、データ機密性、データ規制要件</li><li>モニタリングと修正の自動化戦略 (AWS Config ルールなど)</li><li>シークレット管理 (Systems Manager、AWS Secrets Manager など)</li><li>最小権限アクセスの原則</li><li>セキュリティ固有の AWS ソリューション</li><li>パッチ適用のプラクティス</li><li>バックアップのプラクティスと方法</li></ul><p>対象スキル:</p><ul><li>シークレットと認証情報を安全に管理するための戦略を評価する</li><li>最小権限アクセスについて環境を監査する</li><li>実装されたソリューションを見直し、すべてのレイヤーでセキュリティを確保する</li><li>ユーザーとサービスの包括的なトレーサビリティを見直す</li><li>脆弱性の検出に対する自動対応に優先順位を付ける</li><li>パッチと更新のプロセスを設計し、実装する</li><li>バックアッププロセスを設計し、実装する</li><li>修復手法を採用する</li></ul><p>タスクステートメント 3: パフォーマンスを改善するための戦略を決定する。</p><p>対象知識:</p><ul><li>高パフォーマンスのシステムアーキテクチャ (オートスケーリング、インスタンスフリート、プレイスメントグループなど)</li><li>グローバルサービス (AWS Global Accelerator、Amazon CloudFront、エッジコンピューティングサービスなど)</li><li>モニタリングツールのセットとサービス (CloudWatch など)</li><li>サービスレベルアグリーメント (SLA) と重要業績評価指標 (KPI)</li></ul><p>対象スキル:</p><ul><li>ビジネス要件を測定可能な指標に変換する</li><li>修復ソリューション候補をテストし、提案を行う</li><li>新しいテクノロジーとマネージドサービスを導入する機会を提案する</li><li>ソリューションを評価し、要件に基づいてサイズの適正化を行う</li><li>パフォーマンスのボトルネックを特定し、調査する</li></ul><p>タスクステートメント 4: 信頼性を向上させるための戦略を決定する。</p><p>対象知識:</p><ul><li>AWS のグローバルインフラストラクチャ</li><li>データレプリケーション方法</li><li>スケーリング方法論 (ロードバランシング、オートスケーリングなど)</li><li>高可用性と回復力</li><li>災害対策の方法とツール</li><li>サービスクォータと上限</li></ul><p>対象スキル:</p><ul><li>アプリケーションの利用増加と使用傾向を把握する</li><li>既存のアーキテクチャを評価し、信頼性が不十分な領域を特定する</li><li>単一障害点を修正する</li><li>データレプリケーション、自己修復、伸縮自在な機能とサービスを実現する</li></ul><p>タスクステートメント 5: コスト最適化の機会を特定する。</p><p>対象知識:</p><ul><li>コスト意識の高いアーキテクチャを選択する (スポットインスタンスの利用、スケーリングポリシー、リソースのサイズ適正化など)</li><li>価格モデルの採用 (リザーブドインスタンス、Savings Plans など)</li><li>ネットワークとデータ転送のコスト</li><li>コスト管理、アラート、レポート作成</li></ul><p>対象スキル:</p><ul><li>使用状況レポートを分析し、使用率の低いリソースと使用率の高いリソースを特定する</li><li>AWS ソリューションを活用して使用されていないリソースを特定する</li><li>予想される使用パターンに基づいて課金アラームを設計する</li><li>AWS Cost and Usage Report をきめ細かく調査する</li><li>コスト配分とレポート作成にタグ付けを活用する</li></ul><p>第 4 分野: ワークロードの移行とモダナイゼーションの加速</p><p>タスクステートメント 1: 移行が可能な既存のワークロードとプロセスを選択する。</p><p>対象知識:</p><ul><li>移行アセスメントおよび追跡ツール (AWS Migration Hub など)</li><li>ポートフォリオアセスメント</li><li>アセットプランニング</li><li>ワークロードの優先順位付けと移行 (ウェーブプランニングなど)</li></ul><p>対象スキル:</p><ul><li>アプリケーション移行アセスメントを実施する</li><li>7 つの一般的な移行戦略 (7R) に従ってアプリケーションを評価する</li><li>総保有コスト (TCO) を評価するタスクステートメント 2: 既存ワークロードの最適な移行アプローチを決定する。</li></ul><p>対象知識:</p><ul><li>データ移行のオプションとツール (AWS DataSync、AWS Transfer Family、AWS SnowFamily、S3 Transfer Acceleration など)</li><li>アプリケーション移行ツール (AWS Application Discovery Service、AWS ApplicationMigration Service [CloudEndure Migration]、AWS Server Migration Service[AWS SMS] など)</li><li>AWS ネットワークサービスと DNS (Direct Connect、AWS Site-to-Site VPN、Route 53 など)</li><li>アイデンティティサービス (AWS SSO、AWS Directory Service など)</li><li>データベース移行ツール (AWS Database Migration Service [AWS DMS]、AWS SchemaConversion Tool [AWS SCT] など)</li><li>ガバナンスツール (AWS Control Tower、Organizations など)</li></ul><p>対象スキル:</p><ul><li>適切なデータベース転送メカニズムを選択する</li><li>適切なアプリケーション転送メカニズムを選択する</li><li>適切なデータ転送サービスと移行戦略を選択する</li><li>移行ツールに適したセキュリティ方法を適用する</li><li>適切なガバナンスモデルを選択する</li></ul><p>タスクステートメント 3: 既存ワークロードの新しいアーキテクチャを決定する。</p><p>対象知識:</p><ul><li>コンピューティングサービス (Amazon EC2、AWS Elastic Beanstalk など)</li><li>コンテナ (Amazon Elastic Container Service [Amazon ECS]、Amazon Elastic KubernetesService [Amazon EKS]、AWS Fargate, Amazon Elastic Container Registry[Amazon ECR] など)</li><li>AWS ストレージサービス (Amazon Elastic Block Store [Amazon EBS]、Amazon Elastic FileSystem [Amazon EFS]、Amazon FSx、Amazon S3、Volume Gateway など)</li><li>データベース (Amazon DynamoDB、Amazon OpenSearch Service [Amazon ElasticsearchService]、Amazon RDS、Amazon EC2 のセルフマネージド型データベースなど)</li></ul><p>対象スキル:</p><ul><li>適切なコンピューティングプラットフォームを選択する</li><li>適切なコンテナホスティングプラットフォームを選択する</li><li>適切なストレージサービスを選択する</li><li>適切なデータベースプラットフォームを選択する</li></ul><p>タスクステートメント 4: モダナイゼーションと機能強化の機会を決定する。<br>対象知識:</p><ul><li>サーバーレスコンピューティングサービス (AWS Lambda など)</li><li>コンテナ (Amazon ECS、Amazon EKS、AWS Fargate など)</li><li>AWS ストレージサービス (Amazon S3、Amazon EFS など)</li><li>目的別データベース (DynamoDB, Amazon Aurora Serverless、ElastiCache など)</li><li>統合サービス (Amazon SQS、Amazon SNS、Amazon EventBridge [Amazon CloudWatchEvents]、Step Functions など)</li></ul><p>対象スキル:</p><ul><li>アプリケーションコンポーネントを切り離す機会を特定する</li><li>サーバーレスソリューションの機会を特定する</li><li>コンテナに適したサービスを選択する</li><li>目的別データベースの機会を特定する</li><li>適切なアプリケーション統合サービスを選択する</li></ul><h2 id="試験の対象となる主要なツール、テクノロジー、概念"><a href="#試験の対象となる主要なツール、テクノロジー、概念" class="headerlink" title="試験の対象となる主要なツール、テクノロジー、概念"></a>試験の対象となる主要なツール、テクノロジー、概念</h2><ul><li>コンピューティング</li><li>コスト管理</li><li>データベース</li><li>災害対策</li><li>高可用性</li><li>マネジメントとガバナンス</li><li>マイクロサービスとコンポーネントのデカップリング</li><li>移行とデータの転送</li><li>ネットワーク、接続、コンテンツ配信</li><li>セキュリティ</li><li>サーバーレスの設計原則</li><li>ストレージ</li></ul><p>範囲内の AWS のサービスと機能<br>分析:</p><ul><li><p>Amazon Athena</p></li><li><p>AWS Data Exchange</p></li><li><p>AWS Data Pipeline</p></li><li><p>Amazon EMR</p></li><li><p>AWS Glue</p></li><li><p>Amazon Kinesis Data Analytics</p></li><li><p>Amazon Kinesis Data Firehose</p></li><li><p>Amazon Kinesis Data Streams</p></li><li><p>AWS Lake Formation</p></li><li><p>Amazon Managed Streaming for Apache Kafka (Amazon MSK)</p></li><li><p>Amazon OpenSearch Service</p></li><li><p>Amazon QuickSight<br>アプリケーション統合:</p></li><li><p>Amazon AppFlow</p></li><li><p>AWS AppSync</p></li><li><p>Amazon EventBridge (Amazon CloudWatch Events)</p></li><li><p>Amazon MQ</p></li><li><p>Amazon Simple Notification Service (Amazon SNS)</p></li><li><p>Amazon Simple Queue Service (Amazon SQS)</p></li><li><p>AWS Step Functions<br>ビジネスアプリケーション:</p></li><li><p>Alexa for Business</p></li><li><p>Amazon Simple Email Service (Amazon SES)<br>ブロックチェーン:</p></li><li><p>Amazon Managed Blockchain<br>クラウド財務管理:</p></li><li><p>AWS Budgets</p></li><li><p>AWS Cost and Usage Report</p></li><li><p>AWS Cost Explorer</p></li><li><p>Savings Plans<br>コンピューティング:</p></li><li><p>AWS App Runner</p></li><li><p>AWS Auto Scaling</p></li><li><p>AWS Batch</p></li><li><p>Amazon EC2</p></li><li><p>Amazon EC2 Auto Scaling</p></li><li><p>AWS Elastic Beanstalk</p></li><li><p>Amazon Elastic Kubernetes Service (Amazon EKS)</p></li><li><p>Elastic Load Balancing</p></li><li><p>AWS Fargate</p></li><li><p>AWS Lambda</p></li><li><p>Amazon Lightsail</p></li><li><p>AWS Outposts</p></li><li><p>AWS Wavelength<br>コンテナ:</p></li><li><p>Amazon Elastic Container Registry (Amazon ECR)</p></li><li><p>Amazon Elastic Container Service (Amazon ECS)</p></li><li><p>Amazon ECS Anywhere</p></li><li><p>Amazon Elastic Kubernetes Service (Amazon EKS)</p></li><li><p>Amazon EKS Anywhere</p></li><li><p>Amazon EKS Distro<br>データベース:</p></li><li><p>Amazon Aurora</p></li><li><p>Amazon Aurora Serverless</p></li><li><p>Amazon DocumentDB (MongoDB 互換)</p></li><li><p>Amazon DynamoDB</p></li><li><p>Amazon ElastiCache</p></li><li><p>Amazon Keyspaces (for Apache Cassandra)</p></li><li><p>Amazon Neptune</p></li><li><p>Amazon RDS</p></li><li><p>Amazon Redshift</p></li><li><p>Amazon Timestream<br>デベロッパーツール:</p></li><li><p>AWS Cloud9</p></li><li><p>AWS CodeArtifact</p></li><li><p>AWS CodeBuild</p></li><li><p>AWS CodeCommit</p></li><li><p>AWS CodeDeploy</p></li><li><p>Amazon CodeGuru</p></li><li><p>AWS CodePipeline</p></li><li><p>AWS CodeStar</p></li><li><p>AWS X-Ray<br>エンドユーザーコンピューティング:</p></li><li><p>Amazon AppStream 2.0</p></li><li><p>Amazon WorkSpaces<br>フロントエンドのウェブとモバイル:</p></li><li><p>AWS Amplify</p></li><li><p>Amazon API Gateway</p></li><li><p>AWS Device Farm</p></li><li><p>Amazon Pinpoint<br>IoT:</p></li><li><p>AWS IoT Analytics</p></li><li><p>AWS IoT Core</p></li><li><p>AWS IoT Device Defender</p></li><li><p>AWS IoT Device Management</p></li><li><p>AWS IoT Events</p></li><li><p>AWS IoT Greengrass</p></li><li><p>AWS IoT SiteWise</p></li><li><p>AWS IoT Things Graph</p></li><li><p>AWS IoT 1-Click</p></li></ul><p>機械学習:</p><ul><li>Amazon Comprehend</li><li>Amazon Forecast</li><li>Amazon Fraud Detector</li><li>Amazon Kendra</li><li>Amazon Lex</li><li>Amazon Personalize</li><li>Amazon Polly</li><li>Amazon Rekognition</li><li>Amazon SageMaker</li><li>Amazon Textract</li><li>Amazon Transcribe</li><li>Amazon Translate<br>マネジメントとガバナンス:</li><li>AWS CloudFormation</li><li>AWS CloudTrail</li><li>Amazon CloudWatch</li><li>Amazon CloudWatch Logs</li><li>AWS Command Line Interface (AWS CLI)</li><li>AWS Compute Optimizer</li><li>AWS Config</li><li>AWS Control Tower</li><li>AWS License Manager</li><li>Amazon Managed Grafana</li><li>Amazon Managed Service for Prometheus</li><li>AWS Management Console</li><li>AWS Organizations</li><li>AWS Personal Health Dashboard</li><li>AWS Proton</li><li>AWS Service Catalog</li><li>Service Quotas</li><li>AWS Systems Manager</li><li>AWS Trusted Advisor</li><li>AWS Well-Architected Tool<br>メディアサービス:</li><li>Amazon Elastic Transcoder</li><li>Amazon Kinesis Video Streams<br>移行と転送:</li><li>AWS Application Discovery Service</li><li>AWS Application Migration Service (CloudEndure Migration)</li><li>AWS Database Migration Service (AWS DMS)</li><li>AWS DataSync</li><li>AWS Migration Hub</li><li>AWS Schema Conversion Tool (AWS SCT)</li></ul><p> AWS Snow ファミリー</p><ul><li>AWS Transfer Family<br>ネットワークとコンテンツ配信:</li><li>Amazon CloudFront</li><li>AWS Direct Connect</li><li>Elastic Load Balancing (ELB)</li><li>AWS Global Accelerator</li><li>AWS PrivateLink</li><li>Amazon Route 53</li><li>AWS Transit Gateway</li><li>Amazon VPC</li><li>AWS VPN<br>セキュリティ、アイデンティティ、コンプライアンス:</li><li>AWS Artifact</li><li>AWS Audit Manager</li><li>AWS Certificate Manager (ACM)</li><li>AWS CloudHSM</li><li>Amazon Cognito</li><li>Amazon Detective</li><li>AWS Directory Service</li><li>AWS Firewall Manager</li><li>Amazon GuardDuty</li><li>AWS Identity and Access Management (IAM)</li><li>Amazon Inspector</li><li>AWS Key Management Service (AWS KMS)</li><li>Amazon Macie</li><li>AWS Network Firewall</li><li>AWS Resource Access Manager (AWS RAM)</li><li>AWS Secrets Manager</li><li>AWS Security Hub</li><li>AWS Security Token Service (AWS STS)</li><li>AWS Shield</li><li>AWS Single Sign-On</li><li>AWS WAF<br>ストレージ:</li><li>AWS Backup</li><li>Amazon Elastic Block Store (Amazon EBS)</li><li>AWS Elastic Disaster Recovery (CloudEndure Disaster Recovery)</li><li>Amazon Elastic File System (Amazon EFS)</li><li>Amazon FSx (すべてのタイプに対応)</li><li>Amazon S3</li><li>Amazon S3 Glacier</li><li>AWS Storage Gateway</li></ul><h2 id="Web参考記事"><a href="#Web参考記事" class="headerlink" title="Web参考記事"></a>Web参考記事</h2><ul><li><p>AWS セキュリティベストプラクティス</p><ul><li><a href="https://d1.awsstatic.com/whitepapers/ja_JP/Security/AWS_Security_Best_Practices.pdf">https://d1.awsstatic.com/whitepapers/ja_JP/Security/AWS_Security_Best_Practices.pdf</a></li></ul></li><li><p>Trusted Advisor ベストプラクティス</p><ul><li><a href="https://aws.amazon.com/jp/premiumsupport/trustedadvisor/best-practices/">https://aws.amazon.com/jp/premiumsupport/trustedadvisor/best-practices/</a></li></ul></li><li><p>ホワイトペーパー</p><ul><li><a href="https://aws.amazon.com/jp/whitepapers">https://aws.amazon.com/jp/whitepapers</a></li></ul></li><li><p>受験録系</p><ul><li><a href="https://www.sky365.co.jp/blog/certification/aws-certified-solutions-architect---professional.html">https://www.sky365.co.jp/blog/certification/aws-certified-solutions-architect---professional.html</a></li><li><a href="https://engineerblog.mynavi.jp/technology/sap-gokaku-repo/">https://engineerblog.mynavi.jp/technology/sap-gokaku-repo/</a></li></ul></li></ul><h2 id="書籍"><a href="#書籍" class="headerlink" title="書籍"></a>書籍</h2><ul><li><p>AWS認定ソリューションアーキテクト-プロフェッショナル ~試験特性から導き出した演習問題と詳細解説 </p><ul><li><a href="https://www.amazon.co.jp/AWS%E8%AA%8D%E5%AE%9A%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%88-%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB-%E8%A9%A6%E9%A8%93%E7%89%B9%E6%80%A7%E3%81%8B%E3%82%89%E5%B0%8E%E3%81%8D%E5%87%BA%E3%81%97%E3%81%9F%E6%BC%94%E7%BF%92%E5%95%8F%E9%A1%8C%E3%81%A8%E8%A9%B3%E7%B4%B0%E8%A7%A3%E8%AA%AC-%E5%B9%B3%E5%B1%B1-%E6%AF%85/dp/4865942483">https://www.amazon.co.jp/AWS%E8%AA%8D%E5%AE%9A%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%88-%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB-%E8%A9%A6%E9%A8%93%E7%89%B9%E6%80%A7%E3%81%8B%E3%82%89%E5%B0%8E%E3%81%8D%E5%87%BA%E3%81%97%E3%81%9F%E6%BC%94%E7%BF%92%E5%95%8F%E9%A1%8C%E3%81%A8%E8%A9%B3%E7%B4%B0%E8%A7%A3%E8%AA%AC-%E5%B9%B3%E5%B1%B1-%E6%AF%85/dp/4865942483</a></li></ul></li><li><p>AWS認定資格試験テキスト＆問題集　AWS認定ソリューションアーキテクト - プロフェッショナル　改訂第2版 (ＡＷＳ認定資格試験テキスト)</p><ul><li><a href="https://www.amazon.co.jp/AWS%E8%AA%8D%E5%AE%9A%E8%B3%87%E6%A0%BC%E8%A9%A6%E9%A8%93%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%EF%BC%86%E5%95%8F%E9%A1%8C%E9%9B%86-AWS%E8%AA%8D%E5%AE%9A%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%88-%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB-%E6%94%B9%E8%A8%82%E7%AC%AC2%E7%89%88-%EF%BC%A1%EF%BC%B7%EF%BC%B3%E8%AA%8D%E5%AE%9A%E8%B3%87%E6%A0%BC%E8%A9%A6%E9%A8%93%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88-%E5%B1%B1%E4%B8%8B%E5%85%89%E6%B4%8B/dp/4815617929/ref=d_pd_sbs_sccl_2_2/357-9098591-2099520?pd_rd_w=oeQXV&amp;content-id=amzn1.sym.0658137e-f5cd-4a01-8903-013eee01b385&amp;pf_rd_p=0658137e-f5cd-4a01-8903-013eee01b385&amp;pf_rd_r=49DM6XEHKNBQ4H26W830&amp;pd_rd_wg=IDn7j&amp;pd_rd_r=33121b2a-c7fb-49da-89aa-32c23c0a7b8e&amp;pd_rd_i=4815617929&amp;psc=1">https://www.amazon.co.jp/AWS%E8%AA%8D%E5%AE%9A%E8%B3%87%E6%A0%BC%E8%A9%A6%E9%A8%93%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%EF%BC%86%E5%95%8F%E9%A1%8C%E9%9B%86-AWS%E8%AA%8D%E5%AE%9A%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%88-%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB-%E6%94%B9%E8%A8%82%E7%AC%AC2%E7%89%88-%EF%BC%A1%EF%BC%B7%EF%BC%B3%E8%AA%8D%E5%AE%9A%E8%B3%87%E6%A0%BC%E8%A9%A6%E9%A8%93%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88-%E5%B1%B1%E4%B8%8B%E5%85%89%E6%B4%8B/dp/4815617929/ref=d_pd_sbs_sccl_2_2/357-9098591-2099520?pd_rd_w=oeQXV&amp;content-id=amzn1.sym.0658137e-f5cd-4a01-8903-013eee01b385&amp;pf_rd_p=0658137e-f5cd-4a01-8903-013eee01b385&amp;pf_rd_r=49DM6XEHKNBQ4H26W830&amp;pd_rd_wg=IDn7j&amp;pd_rd_r=33121b2a-c7fb-49da-89aa-32c23c0a7b8e&amp;pd_rd_i=4815617929&amp;psc=1</a></li></ul></li></ul><h2 id="問題集"><a href="#問題集" class="headerlink" title="問題集"></a>問題集</h2><ul><li>Whizlabx<ul><li><a href="https://www.whizlabs.com/learn/course/aws-solutions-architect-professional/168">https://www.whizlabs.com/learn/course/aws-solutions-architect-professional/168</a></li></ul></li></ul><h2 id="抑えておくサービス"><a href="#抑えておくサービス" class="headerlink" title="抑えておくサービス"></a>抑えておくサービス</h2><ul><li>Lambda</li><li>APIGateway</li><li>DynamoDB</li><li>Codeシリーズ</li><li>X-ray</li><li>CloudFormation</li><li>Cognito</li><li>SQS</li><li>S3</li><li>ElasticBeanstalk</li><li>CloudFront</li><li>KMS</li><li>Kinesis</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AWS-SysOps-Administrator-Associate-Exam-preparation&quot;&gt;&lt;a href=&quot;#AWS-SysOps-Administrator-Associate-Exam-preparation&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="AWS" scheme="http://yoursite.com/categories/AWS/"/>
    
    <category term="Cloud" scheme="http://yoursite.com/categories/AWS/Cloud/"/>
    
    <category term="資格" scheme="http://yoursite.com/categories/AWS/Cloud/%E8%B3%87%E6%A0%BC/"/>
    
    
    <category term="受験対策まとめ" scheme="http://yoursite.com/tags/%E5%8F%97%E9%A8%93%E5%AF%BE%E7%AD%96%E3%81%BE%E3%81%A8%E3%82%81/"/>
    
  </entry>
  
  <entry>
    <title>AWS認定資格試験テキスト＆問題集　AWS認定ソリューションアーキテクト - プロフェッショナル　改訂第2版 (ＡＷＳ認定資格試験テキスト)</title>
    <link href="http://yoursite.com/AWS/Cloud/%E8%B3%87%E6%A0%BC/2023-06_AWS_%E8%AA%8D%E5%AE%9A%E8%B3%87%E6%A0%BC%E8%A9%A6%E9%A8%93%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88&amp;%E5%95%8F%E9%A1%8C%E9%9B%86_SAP/"/>
    <id>http://yoursite.com/AWS/Cloud/%E8%B3%87%E6%A0%BC/2023-06_AWS_%E8%AA%8D%E5%AE%9A%E8%B3%87%E6%A0%BC%E8%A9%A6%E9%A8%93%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88&amp;%E5%95%8F%E9%A1%8C%E9%9B%86_SAP/</id>
    <published>2023-06-23T15:00:00.000Z</published>
    <updated>2023-08-10T14:40:42.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AWS認定資格試験テキスト＆問題集-AWS認定ソリューションアーキテクト-プロフェッショナル-改訂第2版-AWS認定資格試験テキスト"><a href="#AWS認定資格試験テキスト＆問題集-AWS認定ソリューションアーキテクト-プロフェッショナル-改訂第2版-AWS認定資格試験テキスト" class="headerlink" title="AWS認定資格試験テキスト＆問題集　AWS認定ソリューションアーキテクト - プロフェッショナル　改訂第2版 (ＡＷＳ認定資格試験テキスト)"></a>AWS認定資格試験テキスト＆問題集　AWS認定ソリューションアーキテクト - プロフェッショナル　改訂第2版 (ＡＷＳ認定資格試験テキスト)</h1><h2 id="書籍情報"><a href="#書籍情報" class="headerlink" title="書籍情報"></a>書籍情報</h2><ul><li><a href="https://www.sbcr.jp/product/4815617929/">https://www.sbcr.jp/product/4815617929/</a></li></ul><p>山下光洋：著者</p><p>基礎知識から合格する解答力を身につける！</p><p>AWSプラットフォームでシステム設計やアプリケーション開発をするために必要な技術スキルと経験を検証するのが「AWS認定ソリューションアーキテクト-プロフェッショナル」試験です。プロフェッショナル試験では、具体的な業務要件や課題をケース問題で出題されるため、基本となる知識をベースに、要件や課題に対応した最適な解答を導く応用力が求められます。<br>本書は、2022年秋に改訂された「SAP-C02 」試験に向けたテキスト＆問題集になっています。出題分野である「複雑な組織に対応するソリューションの設計」「新しいソリューションのための設計」「既存のソリューションの継続的な改善」「ワークロードの移行とモダナイゼーションの加速」に対応して、具体的な要件や課題を読み解きながら、ポイントとなるサービスの利用方法を紹介し、最適な解答につながるように丁寧に解説しています。<br>各節末のポイントのまとめは試験の直前に知識の確認に利用してもらえ、各章末の確認テストや最終章の模擬試験は合格に必要な解答力をしっかり身につけてもらえます。</p><h2 id="コンテンツ"><a href="#コンテンツ" class="headerlink" title="コンテンツ"></a>コンテンツ</h2><h3 id="第1章-AWS認定ソリューションアーキテクト－プロフェッショナル"><a href="#第1章-AWS認定ソリューションアーキテクト－プロフェッショナル" class="headerlink" title="第1章　AWS認定ソリューションアーキテクト－プロフェッショナル"></a>第1章　AWS認定ソリューションアーキテクト－プロフェッショナル</h3><h4 id="1-試験の概要"><a href="#1-試験の概要" class="headerlink" title="1　試験の概要"></a>1　試験の概要</h4><ul><li><p>IMDb: <a href="https://psbr.hatenablog.com/entry/imdb">https://psbr.hatenablog.com/entry/imdb</a></p><ul><li>Amazonの子会社</li><li>AWS Data Exchangeを使っていて、S3バケットに様々なデータをインポートしている</li></ul></li><li><p>AWS Data Pipeline: AWSリソースやコマンドからAWSリソースへデータを変換、コピーする一連の処理をパイプラインとして設定できる</p><ul><li>現在、マネジメントコンソールからアクセスできなくなったため、今後は重要なサービスではなくなる可能性がある</li></ul></li><li><p>Amazon EMR: EMR(Elastic Map Reduce)はApacheHadoopやSparkなどのOSSをマネージドサービスで提供</p></li><li><p>AWS Glue: ETLサービス</p><ul><li>データを指定した方法で変換してS3などストレージやデータベースにデータを保管できる</li></ul></li><li><p>Amazon Kinesis Data Analytics: ストリーミングデータをSQLなど使い慣れた言語を使ってリアルタイムに抽出検索</p></li><li><p>Amazon Kinesis Data Firehose: 最低60秒のバッファでデータをS3、OpenSearchServiceなどに簡単に格納</p></li><li><p>Amazon Kinesis Data Streams: 秒あたり数GBのデータをリアルタイムにストリーミング処理できます。</p></li><li><p>AWS Lake Formation: データレイクの構築、管理を簡易化</p></li><li><p>Amazon Managed Streaming for Apache Kafka(Amazon MSK): マネージドなApache Kafkaを提供するサービス</p></li><li><p>Amazon OpenSearch Service: Amazon Elasticsearch Serviceの後継サービス</p><ul><li>テキストや非構造化データの全文検索や視覚化、ダッシュボード分析が可能</li></ul></li><li><p>Amazon QuickSight: BIサービス</p></li><li><p>Amazon AppFlow: 外部SaaSからのノーコードなデータ連携サービス</p></li><li><p>AWS AppSync: GraphQL APIとPubSub APIを高速に開発できる</p></li></ul><h4 id="2-お勧めの学習方法"><a href="#2-お勧めの学習方法" class="headerlink" title="2　お勧めの学習方法"></a>2　お勧めの学習方法</h4><ul><li><p>模擬試験 AWS Skill Builder</p><ul><li><a href="https://explore.skillbuilder.aws/learn/external-ecommerce;view=none;redirectURL=?ctldoc-catalog-0=se-%22architect%20professional%22">https://explore.skillbuilder.aws/learn/external-ecommerce;view=none;redirectURL=?ctldoc-catalog-0=se-%22architect%20professional%22</a></li></ul></li><li><p>検証用のAWSアカウント</p><ul><li>会社、個人でAWSアカウントを利用して実際に動かしてみる</li></ul></li><li><p>Well-Architected Framework</p><ul><li><a href="https://aws.amazon.com/jp/architecture/well-architected/?wa-lens-whitepapers.sort-by=item.additionalFields.sortDate&amp;wa-lens-whitepapers.sort-order=desc&amp;wa-guidance-whitepapers.sort-by=item.additionalFields.sortDate&amp;wa-guidance-whitepapers.sort-order=desc">https://aws.amazon.com/jp/architecture/well-architected/?wa-lens-whitepapers.sort-by=item.additionalFields.sortDate&amp;wa-lens-whitepapers.sort-order=desc&amp;wa-guidance-whitepapers.sort-by=item.additionalFields.sortDate&amp;wa-guidance-whitepapers.sort-order=desc</a></li><li>6つの柱を抑えておく<ul><li>オペレーショナル・エクセレンス</li><li>セキュリティ</li><li>パフォーマンス</li><li>コスト最適化</li><li>信頼性</li><li>持続可能性</li></ul></li></ul></li><li><p>その他リソース</p><ul><li>AWS Black Belt</li><li>AWS FAQ</li></ul></li></ul><h3 id="第2章-複雑な組織への対応"><a href="#第2章-複雑な組織への対応" class="headerlink" title="第2章　複雑な組織への対応"></a>第2章　複雑な組織への対応</h3><h4 id="1-組織のネットワーク設計"><a href="#1-組織のネットワーク設計" class="headerlink" title="1　組織のネットワーク設計"></a>1　組織のネットワーク設計</h4><ul><li><p>VPC内のEC2からリクエストを実行するためには以下のいずれかが必要</p><ul><li>インターネットゲートウェイがアタッチされたVPCのパブリックネットワークでEC2を起動する</li><li>インターネットゲートウェイがアタッチされ、NATゲートウェイが起動しているVPCのプライベートサブネットでEC2を起動</li><li>VPCエンドポイントを設定</li></ul></li><li><p>VPCエンドポイント</p><ul><li>ゲートウェイエンドポイント<ul><li>VPCのサービス専用のゲートウェイをアタッチする</li><li>対象サービスはS3とDynamoDB</li></ul></li><li>インターフェースエンドポイント<ul><li>VPCのサブネットにENI(Elastic Network Interface)を作成</li><li>ENIに割り当てられたプライベートIPアドレスを使用してサービスにアクセス</li><li>ENIとサービス間のプライベート接続を提供しているのがAWS PrivateLinkという技術</li></ul></li></ul></li></ul><h5 id="S3ゲートウェイエンドポイント"><a href="#S3ゲートウェイエンドポイント" class="headerlink" title="S3ゲートウェイエンドポイント"></a>S3ゲートウェイエンドポイント</h5><p>ゲートウェイエンドポイントは利用料金が不要</p><p>オンプレからアクセスする場合はプロキシサーバーを経由してアクセス</p><p>プロキシサーバーの可用性を考慮すると、ELB、EC2、Auto Scalingを検討する必要がある</p><h5 id="S3インターフェースエンドポイント"><a href="#S3インターフェースエンドポイント" class="headerlink" title="S3インターフェースエンドポイント"></a>S3インターフェースエンドポイント</h5><p>インターフェイスエンドポイントは利用料金が発生する</p><p>インターフェイスエンドポイントは指定したサブネットにENIを作成</p><p>インターフェイスエンドポイントが作成されるとDNS名が発行される</p><p>このDNSをS3のエンドポイントに指定してアプリケーションなどからリクエストを実行</p><p>VPCエンドポイントにはエンドポイントポリシーがあり、デフォルトでは全てのリソース、すべてのアクションを許可している</p><h5 id="AWS-PrivateLinkを使用したサードパーティサービスの提供"><a href="#AWS-PrivateLinkを使用したサードパーティサービスの提供" class="headerlink" title="AWS PrivateLinkを使用したサードパーティサービスの提供"></a>AWS PrivateLinkを使用したサードパーティサービスの提供</h5><p>独自のソフトウェアサービスをサードパーティサービスと呼ぶことがある</p><h5 id="AWSクライアントVPN"><a href="#AWSクライアントVPN" class="headerlink" title="AWSクライアントVPN"></a>AWSクライアントVPN</h5><p>クライアントからVPCへのアクセス</p><p>VPCを介したオンプレミスやインターネット、他のVPCへのOpenVPNベースのVPNクライアントを使用した安全なアクセスを可能にする</p><ul><li><p>認証タイプ</p><ul><li>Active Directory（ユーザーベース）<ul><li>AWS Managed Microsoft ADまたは、AD Connectorを使用</li></ul></li><li>シングルサインオン（SAMLベースのフェデレーション、ユーザーベース）<ul><li>IAM SAML IDプロバイダー</li></ul></li><li>相互認証（証明書ベース）<ul><li>AWS Certificate Managerにアップロードしたサーバー証明書とクライアント証明書を使用</li></ul></li></ul></li><li><p>基本設定</p><ul><li>クライアントが使用するIPアドレス葉にをCIDRで設定</li><li>AWSクライアントVPNにサブネットを関連付ける</li><li>関連付けられたサブネットにはENIが作成され、ENIにはセキュリティグループがアタッチされる</li></ul></li><li><p>接続ログ</p><ul><li>オプションでCloudwatchLogsに接続ログを記録することができる</li></ul></li><li><p>接続ハンドラ</p><ul><li>接続時にLambda関数で任意のプログラムを実行して、接続の許可・拒否判定ロジックを実装できる</li></ul></li></ul><h5 id="AWS-Site-to-Site-VPN"><a href="#AWS-Site-to-Site-VPN" class="headerlink" title="AWS Site-to-Site VPN"></a>AWS Site-to-Site VPN</h5><p>VPCに仮想プライベートゲートウェイをアタッチして、データセンターなどのオンプレミスのルーターと、インタネットプロトコルセキュリティ（IPSec）VPN接続が可能</p><ul><li><p>仮想プライベートゲートウェイ</p><ul><li>ASN（自律システム番号）を指定することもできる</li><li>指定しない場合はAmaxonのデフォルトASN（64512）が使用</li></ul></li><li><p>カスタマーゲートウェイ</p><ul><li>オンプレミス側のルーターなどのこと</li><li>動的ルーティングでは、BGP（ボーダーゲートウェイプロトコル）ASNの指定が可能</li><li>パブリックなASNが無い場合は、プライベートASNを指定できる</li><li>証明書ベースではなく、事前共有キーで認証する場合は、インターネットから接続可能なIPアドレスが必要</li><li>証明書ベースの認証をする場合は、AWS Certificate Managerにプライベート証明書をインポートして指定可能</li></ul></li><li><p>静的ルーティングと動的ルーティング</p><ul><li>カスタマーゲートウェイデバイスがBGPをサポートしている場合は動的ルーティング</li><li>サポートしていない場合は静的ルーティングを選択</li></ul></li><li><p>VPN接続</p><ul><li>Internet Key Exchangeバージョン2(IKEv2):暗号化のための共通鍵を交換する仕組み</li><li>NATトラバーサル: オンプレミス側でNATルーターを介したVPN接続が可能</li><li>デッドピア検出（DPD）：接続先のデバイスが有効かどうかを確認</li></ul></li><li><p>複数のSite-to-SiteVPN接続</p><ul><li>1つの仮想プライベートゲートウェイから、複数のカスタマーゲートウェイにVPN接続を作成可能</li><li>この設計はVPN CloudHubと呼ばれる</li></ul></li><li><p>冗長なSite-to-SiteVPN接続</p><ul><li>カスタマーゲートウェイデバイスを冗長化する構成</li></ul></li><li><p>ソフトウェアVPN</p><ul><li>EC2インスタンスにソフトウェアVPNをセットアップして、インターネットゲートウェイ経由でVPN接続も可能</li><li>次のような要件の場合利用<ul><li>コンプライアンス要件により、接続両端を完全にコントロールする必要がある</li><li>IPsec以外のVPNプロトコルが必要</li></ul></li></ul></li></ul><h5 id="AWS-Direct-Connect-DX"><a href="#AWS-Direct-Connect-DX" class="headerlink" title="AWS Direct Connect(DX)"></a>AWS Direct Connect(DX)</h5><p>ユーザーまたはパートナーのルーター（Customer Router）からDirect Connectのルーター（DX Router）に標準のイーサネット光ファイバーケーブルを介して接続するサービス</p><p>この接続を使用して、VPCやAWSパブリックサービスへの仮想インターフェースを作成</p><p>インターネットサービスプロバイダーを利用する必要なく、オンプレミス拠点間の専用線の代替として、AWSへの接続に使用できるサービス</p><ul><li><p>接続</p><ul><li>専用接続</li><li>ホスト接続</li></ul></li><li><p>VPNバックアップのDirectConnect</p></li><li><p>回復性レベル</p><ul><li>最大回復性</li><li>高い回復性</li><li>開発とテスト</li><li>クラシック</li><li>AWS Direct Connect フェイルオーバーテスト</li></ul></li><li><p>仮想インターフェース</p><ul><li>AWS Direct Connect接続を使用するには、仮想インターフェイス(VIF)が必要</li><li>仮想インターフェイスの種類は以下<ul><li>プライベート仮想インターフェイス<ul><li>オンプレミスのOSでEFSにマウントできる</li></ul></li><li>パブリック仮想インターフェイス<ul><li>S3,DynamoDBにアクセスできる</li></ul></li><li>トランジット仮想インターフェイス<ul><li>Direct Connect Gatewayに関連付けられたTransit Gatewayにアクセスできる</li></ul></li></ul></li></ul></li><li><p>LAG(Link Aggregation Group)</p></li><li><p>Direct Connect の料金</p><ul><li>ポート時間<ul><li>容量、接続タイプによって時間料金が決まる</li></ul></li><li>データ転送<ul><li>プライベートVIFの場合は、データ転送を行うAWSアカウントに課金される</li></ul></li></ul></li></ul><h5 id="VPC-ピア接続"><a href="#VPC-ピア接続" class="headerlink" title="VPC ピア接続"></a>VPC ピア接続</h5><p>VPCピア接続を使用することで、VPCが他のVPCとの接続をプライベートネットワークで行える</p><h5 id="AWS-Transit-Gateway"><a href="#AWS-Transit-Gateway" class="headerlink" title="AWS Transit Gateway"></a>AWS Transit Gateway</h5><p>最大5000のVPCやオンプレミス環境の接続を簡素化する</p><ul><li><p>VPCアタッチメント</p></li><li><p>VPN接続</p></li><li><p>Direct Connectトランジット仮想インターフェイス</p></li><li><p>Transit Gatewayピアリング接続</p></li><li><p>Transit Gateway Network Manager</p></li><li><p>Global Accelerator連携のVPN高速化</p></li><li><p>Route 53 プライベートホストゾーンとRoute 53 Resolver</p><ul><li>Route 53 プライベートホストゾーン</li><li>Route 53 Resolver</li></ul></li></ul><h4 id="2-マルチアカウント"><a href="#2-マルチアカウント" class="headerlink" title="2　マルチアカウント"></a>2　マルチアカウント</h4><h5 id="クロスアカウントアクセス"><a href="#クロスアカウントアクセス" class="headerlink" title="クロスアカウントアクセス"></a>クロスアカウントアクセス</h5><ul><li>組織内でのクロスアカウントアクセス<ul><li>複数のAWSアカウントに対して認証が必要な場合の管理</li><li>IAMユーザは特定のAWSアカウントで管理</li><li>組織内の各AWSアカウントにはIAMロールを作成</li><li>AWS STSのAssume RoleアクションによってIAMロールから一時的認証情報を取得して使用</li><li>信頼関係<ul><li>誰がIAMロールに対して、sts:AssumeRoleを実行できるかを許可しているのが信頼関係</li></ul></li></ul></li></ul><h5 id="カスタムIDブローカーアプリケーション"><a href="#カスタムIDブローカーアプリケーション" class="headerlink" title="カスタムIDブローカーアプリケーション"></a>カスタムIDブローカーアプリケーション</h5><p>クロスアカウントだけでなく、オンプレミスのアプリからも同様にSDKにより開発したプログラムでIAMロール二リクエストを実行することにより、一時的な認証情報を使用してAWSのサービスをアプリケーションから使用したり、マネジメントコンソールへのリダイレクトURLを生成できる</p><h5 id="サードパーティ製品へのアクセス許可"><a href="#サードパーティ製品へのアクセス許可" class="headerlink" title="サードパーティ製品へのアクセス許可"></a>サードパーティ製品へのアクセス許可</h5><p>外部のサービスに対して必要なリソースへの操作を許可することもできる</p><p>ただし、「混乱した代理問題」が課題</p><ul><li><p>※AWS作図くんの例</p></li><li><p>「混乱した代理問題」を解決するのが「外部ID」</p></li></ul><h5 id="AWS-Directory-Service"><a href="#AWS-Directory-Service" class="headerlink" title="AWS Directory Service"></a>AWS Directory Service</h5><p>サーバー認証に、組織で管理している既存のActiceDirectoryを使用したいケースがある</p><ul><li>AD Connector<ul><li>オンプレミスのデータセンターなどで稼働しているActiveDirectoryの認証をそのまま使えるサービス</li><li>AD Connectorを使えば、Amazon Workspaces, Amazon WorkDocs, Amazon WorkMail, Amazon QuickSightなどのAWSマネージドディレクトリと連携するサービスを、既存のADのユーザ情報で利用できる</li></ul></li><li>Simple AD<ul><li>Samba 4 Active Directory Compatible Server</li><li>最大５０００ユーザー<ul><li>5000を超える場合はAWS Managed Microsoft ADを利用<ul><li>また、他ドメインとの信頼関係、MFA（多要素認証）が必要な場合もAWS Managed Microsoft ADを使用する</li></ul></li></ul></li></ul></li><li>AWS Directory Service for Microsoft Active Directory(AWS Managed Microsoft AD)<ul><li>Microsoft Active Directoryのマネージドサービス</li><li>5000を超えるユーザー</li><li>他ドメインとの信頼関係</li><li>MFA(他要素認証)</li></ul></li></ul><h5 id="IAMアイデンティティセンター（AWS-SSOの後継）"><a href="#IAMアイデンティティセンター（AWS-SSOの後継）" class="headerlink" title="IAMアイデンティティセンター（AWS SSOの後継）"></a>IAMアイデンティティセンター（AWS SSOの後継）</h5><p>複数のAWSアカウントとSalesforceやBOXなどの外部アプリケーションへのSSOが可能</p><ul><li><p>IAMアイデンティティセンターの認証</p><ul><li>アイデンティティセンターディレクトリ<ul><li>認証情報（ユーザ名、パスワード）をIAMアイデンティティセンターで管理、デフォルト設定</li></ul></li><li>ActiveDirectory<ul><li>AWS Managed Microsoft ADか、AD Connectorを選択できる</li></ul></li><li>外部IDプロバイダー<ul><li>Azure AD,Okta,OneLoginなど外部IDプロバイダーを使用できる</li></ul></li></ul></li><li><p>AWSアカウントへの許可セット</p><ul><li>IAMアイデンティティセンターで許可セットを作成して、AWSアカウントにSSOした際の権限を設定できる</li></ul></li><li><p>外部アプリケーションの追加</p></li><li><p>IAMアイデンティティセンターを使用しないケース</p><ul><li>すでにAD FS(Active Directory Federation Services)や、認証だけでなくOkta、OneLoginのポータルサイトも使用している場合に、</li><li>IAMアイデンティティセンターを使用せずに設定するケースもある</li></ul></li></ul><h5 id="AWS-Organizations"><a href="#AWS-Organizations" class="headerlink" title="AWS Organizations"></a>AWS Organizations</h5><p>AWS Organizationsを利用していない複数のアカウント環境では、次の重複作業が発生</p><ul><li>アカウント作成時にクレジットカード、電話番号などの登録</li><li>各アカウントのIAMロールのポリシー設定</li><li>請求管理</li><li>CloudTrailなどのさまざまなサービスはアカウントごとの設定</li></ul><p>AWS Organizationsを利用した場合</p><ul><li><p>AWS Organizations APIによるアカウント作成の自動化</p></li><li><p>SCP(サービスコントロールポリシー)による組織単位のポリシー設定</p></li><li><p>一括請求管理</p></li><li><p>各AWSサービスとのサービス統合</p></li><li><p>アカウント作成の自動化</p><ul><li>通常、あWSアカウントの作成時には、メールアドレス、パスワード、住所、電話番号、クレジットカードが必要</li><li>SMSか通話での本人確認も必要</li><li>Organizationsでは、既存アカウントを組織のメンバーアカウントとして招待できますが、新規メンバーアカウントもマネジメントコンソール、CLI、SDKから追加可能</li></ul></li><li><p>SCP(サービスコントロールポリシー)</p><ul><li>Organizations組織でOUやアカウントに設定するポリシー</li><li>予防コントロールとして、OUに所属するアカウント、またはアカウントでの権限を制限できる</li><li>SCPはOUの階層において下のレベルへ継承される</li></ul></li><li><p>SCPの許可リスト戦略</p></li><li><p>SCPの拒否リスト戦略</p></li><li><p>一括請求（コンソリデーテッドビリング）</p><ul><li>１つの請求書、統合請求データ：コストと使用状況データを複数カウントに渡って複合的に分析できる</li><li>合計量によるボリュームディスカウント：複数アカウントの合計容量による従量制の割引が受けられる</li><li>リザーブドインスタンス（RI）、Savings Plansの共有<ul><li>組織のアカウントの合計使用量にリザーブドインスタンス、Savings Plansを適用できるので選択しやすくなる</li></ul></li></ul></li><li><p>MEMO: Saving Plans <a href="https://aws.amazon.com/jp/savingsplans/">https://aws.amazon.com/jp/savingsplans/</a></p><ul><li>Savings Plans は、1 年または 3 年の時間単位で利用をコミットする代わりに、オンデマンド料金と比較して最大 72% の請求額の削減を可能にする柔軟な料金モデルです。</li><li>AWS は 3 種類の Savings Plans を提供しています:<ul><li>Compute Savings Plans</li><li>EC2 Instance Savings Plans</li><li>Amazon SageMaker Savings Plans</li></ul></li></ul></li><li><p>AWS CloudFormation StackSets</p><ul><li>複数リージョン、複数アカウントにスタックを作成して、変更・削除・管理できる機能</li><li>Organizationsと統合することで、組織、OU、アカウントを指定して、スタックを作成・変更・削除できる</li></ul></li><li><p>AWS CloudTrail （ユーザのアクティビティやAPI使用量をトレース）</p><ul><li>Organizations組織のマスターアカウントで、組織内のすべてのアカウントについてCloudTrailを有効化できる</li><li>書き出されるS3オブジェクトのプレフィックスには組織IDが含まれる</li></ul></li><li><p>AWS Service Catalog</p><ul><li>IAMユーザ二CloudFormationスタックで作成されるリソースへの直接的なアクセス権限を与えられずに、事前に用意されたテンプレートからスタックを作成できる</li><li>例えば、スタックによって作成されたEC2インスタンスなどのリソースには直接アクセスできませんので、決められたインスタンスタイプ以外を起動したり、セキュリティグループを勝手に変更することはできない</li><li>管理者があらかじめテンプレートを<strong>製品</strong>としてService Catalogに登録し、IAMユーザに許可する製品のリストをポートフォリオとして設定</li><li>ポートフォリオはいわばIAMユーザにとってのサービスカタログメニューで、Organizations組織でOUを指定して共有できる</li></ul></li><li><p>AWS Resource Access Manager(RAM)</p><ul><li>Organizationsと連携して組織、OUとの共有が可能</li><li>Transit Gateway、サブネット、Route53Resolverの転送ルールを複数アカウントで共有可能</li><li>License Managerではソフトウェア・ライセンスを複数アカウントにまたがって管理</li></ul></li><li><p>AWS Control Tower</p><ul><li>複数アカウントのベストプラクティスであるランディングゾーンを児童構築する</li><li>ランディングゾーンは、Organizations組織のベストプラクティス構成</li><li>ログアカウントと監査アカウント<ul><li>SecurityOUにログと監査のアカウントを作成</li><li>ログアカウントにはCloudTrailとConfigのログが集約される<ul><li>Athenaなどを使用して集約されたログを分析可能</li></ul></li><li>監査アカウント<ul><li>各アカウントのSNSトピックのサブスクライバーのLambda関数から、監査アカウントのSNSトピックへ通知がパブリッシュ（送信）される</li></ul></li></ul></li><li>アカウトの追加、招待<ul><li>アカウントは、Service Controlポートフォリオで作成されたAccountFactoryで新規作成、または追加ができる</li></ul></li><li>アカウント認証<ul><li>Organizationsと連携するIAMアイデンティティセンターによって、各アカウントへのシングルサインオン設定が可能</li></ul></li><li>コントロール（ガードレール）</li><li>ダッシュボード<ul><li>Control Tower ランディングゾーンは作成して終わりでなく、ダッシュボードで確認、設定が可能</li></ul></li></ul></li></ul><h4 id="3-確認テスト"><a href="#3-確認テスト" class="headerlink" title="3　確認テスト"></a>3　確認テスト</h4><h3 id="第3章-ソリューション設計と継続的改善"><a href="#第3章-ソリューション設計と継続的改善" class="headerlink" title="第3章　ソリューション設計と継続的改善"></a>第3章　ソリューション設計と継続的改善</h3><h4 id="1-運用上の優秀性"><a href="#1-運用上の優秀性" class="headerlink" title="1　運用上の優秀性"></a>1　運用上の優秀性</h4><h5 id="デプロイ関連サービス"><a href="#デプロイ関連サービス" class="headerlink" title="デプロイ関連サービス"></a>デプロイ関連サービス</h5><ul><li><p>この節では、リリース作業を自動化するAWSデプロイサービスと、サービスを活用することにより実現しやすくなったデプロイメントパターンを解説</p></li><li><p>Cloud9</p><ul><li>統合開発環境（IDE）をブラウザさえあれば実行できる</li></ul></li><li><p>CodeGuru</p><ul><li>ソースコードのレビューによってバグや問題の抽出、パフォーマンスの最適化を自動化</li></ul></li><li><p>CodeStar</p><ul><li>CodePipeline、CodeCommit、CodeBuild、CodeDeployなどを組み合わせたCICDパイプライン</li></ul></li><li><p>CodeArtifact</p><ul><li>パッケージを適切なアクセス権限でチーム内に公開、共有可能</li></ul></li><li><p>OpsWorks</p><ul><li>Chef、Puppetの機能をマネージドで提供</li></ul></li><li><p>AWS Codecommit</p><ul><li>リポジトリのアクセス許可はIAMポリシーで制限可能</li><li>リポジトリのソースコードなどのデータはKMSのAWSマネージドキーによってサードパーティ暗号化されている</li><li>リポジトリへのアクセス履歴はCloudTrailによって記録</li></ul></li><li><p>AWS CodeBuild</p><ul><li>ビルド環境：AWSが用意したLinux、Windowsコンテナを選択したり任意のコンテナを用意したりもできる</li><li>ソースコード：CodeCommit以外にもS3バケット、Github、Bitbucketが選択可能</li><li>CodeBuildで実行される、テストやコンパイル、パッケージ作成、コンテナイメージ作成などはbuildspec.ymlに事前定義されたコマンドによって実行される</li><li>作成されたパッケージ（アーティファクトファイル）は、指定したS3バケットへ保存されたり、buildspec.ymlに定義したdocker pushコマンドでアップロードしたECRリポジトリに保存される</li></ul></li><li><p>AWS CodeDeploy</p><ul><li>EC2インスタンス、ECSのコンテナ、Lambda関数、オンプレミスサーバーへのデプロイを自動化するサービス</li><li>EC2インスタンス・オンプレミスのデプロイ設定<ul><li>AllAtOnce<ul><li>正常なホストの最小数値：0</li><li>一度にすべてのインスタンスにデプロイ</li></ul></li><li>HalfAtATime<ul><li>正常なホストの最小数値：50%</li><li>一度に最大半分のインスタンスにデプロイ</li></ul></li><li>OneAtAAtime<ul><li>正常なホストの最小数値：１</li><li>一度に１つのインスタンスにデプロイ</li></ul></li></ul></li><li>ECSのデプロイ設定<ul><li>ECSで実行しているコンテナデプロイは、カナリアとリニアから選択可能</li><li>Canary：最初一定の割合のみにリリースしたあと、指定した期間後に残りのリリースを完了</li><li>Linear:最初一定の割合のみにリリースしたあと、指定した感覚でデプロイ対象を増分する<ul><li>ECSCanary10Percent5Minutes:最初10%のみ移行、5分後に残り90%も移行</li><li>ECSLinear10Percent1Minutes:すべての移行が完了するまで、1分ごとに10%ずつ移行</li><li>ECSAllAtOnce:一度にすべてのコンテナにデプロイ</li></ul></li></ul></li><li>Lambdaのデプロイ設定<ul><li>AWS Lambdaにはバージョン、エイリアスという機能がある</li><li>バージョン：イミュータブルで開発後にバージョンを作成したら変更できない</li><li>エイリアス：バージョンと紐づけ管理する</li><li>こうすることで迅速なデプロイとロールバックが可能</li><li>LambdaCanary10Percent5Minutes</li><li>LambdaLinear10PercentEvery1Minutes</li><li>LambdaAllAtOnce</li></ul></li></ul></li><li><p>AWS CloudFormation</p><ul><li>テンプレートをもとにAWSリソースをスタックという単位で作成する</li><li>カスタムリソース<ul><li>Resourcesにカスタムリソースを含めて任意のLambda関数を実行することができる</li><li>カスタムリソースを使用してLambda関数を実行することによって、CloudFormationがサポートしていない処理や、必要な情報を動的に取得可能</li></ul></li><li>CloudFormationヘルパースクリプト<ul><li>EC2インスタンスへデプロイするアプリケーション向けに、CloudFormationヘルパースクリプトが用意されている</li><li>Amazon Linux AMIにはすでにインストールされていて、<code>/opt/aws/bin</code>にある<ul><li><code>cfn-init</code>: パッケージのインストール、ファイルの作成、サービスの開始などが可能</li><li><code>cfn-signal</code>: CreationPolicy、またはWaitConditionにシグナルを送信するために使用可能</li></ul></li></ul></li><li>スタックポリシー<ul><li>スタックに含まれるリソースノ更新は、テンプレートの更新によって行う</li><li>意図しない更新を防ぐためにはスタックポリシーを使用できる</li></ul></li><li>DeletionPolicy（削除ポリシー）<ul><li>スタック削除時に特定のリソースを保護することができる</li><li>データベースやストレージを保護する際などに有効</li></ul></li><li>AWS CDK<ul><li>ソースコードからCloudFormationテンプレートを生成することができる</li></ul></li></ul></li><li><p>AWS CodePipeline</p><ul><li>ソース、ビルド、デプロイのCI&#x2F;CDパイプラインを自動化</li></ul></li><li><p>AWS Elastic Beanstalk</p><ul><li>開発者がすばやくAWSを使い始めることができるようにするサービス</li><li><code>.ebextensions</code>: EB CLIを実行するカレントディレクトリに、<code>.ebextensions</code>ディレクトリを作成して、配下にconfigファイルを配置することで、アプリケーションのカスタマイズが可能</li></ul></li></ul><h5 id="デプロイメントパターン"><a href="#デプロイメントパターン" class="headerlink" title="デプロイメントパターン"></a>デプロイメントパターン</h5><ul><li><p>ローリングデプロイ</p><ul><li>指定したバッチサイズ（インスタンス数、割合）ずつ更新デプロイします。</li></ul></li><li><p>ブルー／グリーンデプロイ</p><ul><li>現在のアプリケーションバージョンをブルー</li><li>新しいバージョンをグリーンとしてデプロイ</li><li>リクエスト送信先を切り替えてリリース方法をブルー／グリーンデプロイと呼ぶ</li><li>Route53を使用したデプロイ</li><li>Application Load Balancerを使用したデプロイ</li><li>EC2 Auto Scalingを使用したデプロイ</li></ul></li></ul><h5 id="モニタリング"><a href="#モニタリング" class="headerlink" title="モニタリング"></a>モニタリング</h5><ul><li><p>AWS Healthイベント</p><ul><li>AWSアカウントに影響を及ぼすイベントをモニタリングできる</li><li>AWS Personal Health Dashboard<ul><li>マネジメントコンソールにサインインんして、ダッシュボードとイベントログで、過去９０日のアカウント固有のイベントとパブリックイベントを確認可能</li><li>問題のイベントタイプコードの例：</li><li>アカウント通知のイベントタイプコードの例</li><li>スケジュールされた変更のイベントタイプコードの例</li></ul></li><li>AWS Health API</li><li>Service Health Dashboard<ul><li>インターネット上の公開ページで、パブリックイベントを確認可能</li></ul></li></ul></li><li><p>Amazon CloudWatch</p><ul><li>メトリクス、ダッシュボード</li><li>アラーム</li><li>以上検出</li><li>CloudWatch Logs<ul><li>AWSサービスうやCloudWatchエージェントによるアプリケーションログなどさまざまなログを収集できる</li></ul></li><li>CloudWatch Synthetics<ul><li>CanaryというLambda関数を設定したスケジュールで実行し、指定したウェブページへ定期的に自動アクセス</li><li>その時点のスクリーンショットの取得と、Webページに含まれるコンテンツのダウンロード時間などを記録</li></ul></li><li>CloudWatch RUM<ul><li>RUM(リアルユーザモニタリング)は、エンドユーザの場所や使用デバイス別のパフォーマンスやエラー発生情報を収集、モニタリングできる</li></ul></li></ul></li><li><p>Amazon VPCのモニタリング</p><ul><li>VPC Flow Logs<ul><li>ENIへのインバウンド／アウトバウンドトラフィックに関する情報は、CloudWatchLogsまたはS3バケットへ送信可能</li><li>VPC Flow Logsでは各種のAWS情報をモニタリング可能</li><li>トラフィックミラーリング</li></ul></li><li>AWS X-Ray<ul><li>アプリケーションの潜在的なバグとボトルネックを抽出</li><li>X-RayのPutTrace Segments APIアクセ本により、実行時間やリクエストの成功失敗がX-Rayに送信される</li><li>結果をサービスマップやトレース情報で確認可能</li></ul></li><li>SIEM on Amazon OpenSearch Sevice<ul><li>SIEM(Security Information and Event Management)と呼ばれるログの収集、一元的なモニタリング、分析が可能なシステムを、</li><li>Amazon OpenSearchServiceを中心として構築できる</li><li>OpenSearch Dashboardsで可視化、分析可能</li></ul></li></ul></li></ul><h5 id="構成管理、メンテナンス"><a href="#構成管理、メンテナンス" class="headerlink" title="構成管理、メンテナンス"></a>構成管理、メンテナンス</h5><ul><li>AWS Systems Manager<ul><li>LinuxやWindowsのEC2インスタンス、オンプレミスサーバにSSMAgent(AWS Ssytems Managerエージェント)をインストールすることで、Systems Managerのマネージドインスタンス(管理対象)にできる</li><li>Session Manager<ul><li>セキュリティグループでSSHポートを許可する必要もキーペアを使用する必要も内</li><li>ブラウザのSessionManagerからsudo可能なssm-userを使って対話式コマンドを実行可能</li></ul></li><li>RunCommand<ul><li>EC2、オンプレミスサーバーなどマネージドインスタンスに、コマンドドキュメントに事前定義されたコマンドを実行可能</li><li>定形運用をドキュメント化して、Run Commandにより1回のみ実行したり、Lambdaから動的に実行するなども可能</li><li>コマンド実行対象のインスタンスは、インスタンスID、タグ、リソースグループから指定可能</li></ul></li><li>パッチマネージャ<ul><li>マネージドインスタンスへのパッチ適用を自動化できる</li></ul></li><li>Automation<ul><li>定義済みのオートメーションドキュメントを実行</li><li>例）Health EventのEventBridge連携の自動アクションで紹介したAWS-RestartEC2Instanceの例を紹介<ul><li>インスタンスIDとIAMロールがパラメータで定義されている</li></ul></li></ul></li><li>OpsCenter<ul><li>運用で発生した問題の確認やステータスを一言管理できる</li></ul></li></ul></li></ul><h5 id="AWS-Config"><a href="#AWS-Config" class="headerlink" title="AWS Config"></a>AWS Config</h5><ul><li><p>AWSアカウント内のリソースの設定情報を収集する</p></li><li><p>ControlTowerによって組織内のアカウントすべてのリソースの設定情報を集約することもできます。</p></li><li><p>設定変更の際にイベント通知</p></li><li><p>有効にしておいたルールによって組織で決められたルールやコンプライアンス要件に準拠しているかを確認できる</p></li><li><p>非準拠になり修復する必要がある場合は、修復アクションを設定して自動修復することも可能</p></li><li><p>自動修復にはSystemsManagerAutomationを選択可能</p></li><li><p>S3バッチオペレーション</p><ul><li>S3のオブジェクト管理機能にバッチオペレーションがある</li><li>数十億のオブジェクトを大規模に管理可能</li><li>S3バッチオペレーションが使用するIAMロールには、batchoperations.s3.amazonaws.comからの信頼ポリシーが必要</li></ul></li></ul><h4 id="2-セキュリティ"><a href="#2-セキュリティ" class="headerlink" title="2　セキュリティ"></a>2　セキュリティ</h4><h5 id="ルートユーザーの保護"><a href="#ルートユーザーの保護" class="headerlink" title="ルートユーザーの保護"></a>ルートユーザーの保護</h5><ul><li><p>ルートユーザはIAMポリシーを設定できず、すべてのアクションが可能</p></li><li><p>ルートユーザは基本的に使用せず、複雑なパスワードとMFAを設定して保護しておくこと</p></li><li><p>メールアドレスは個人に紐づくものではなく、企業のエイリアスやメーリングリストを使用する</p></li><li><p>ルートユーザーにしかできないタスク</p><ul><li>アカウント設定の変更：アカウント名、Eメールアドレス、パスワードの変更</li><li>アクセスキーの作成：ルートユーザーにもアクセスキーを作成できますが非推奨なので作成しないこと</li><li>請求情報へのIAMアクセスの有効化：有効化したあとはIAMユーザー、IAMロールに請求情報へのアクションをポリシーで許可できる</li><li>MFA Delete：S3バケットのMFA Deleteを設定</li><li>S3バケットポリシーの修復：誰もアクセスできないS3バケットポリシーを設定してしまった場合は、ルートユーザーによって削除、編集可能</li></ul></li><li><p>ルートユーザ使用時に通知する</p><ul><li>GuardDutyで検知<ul><li>Amazon GuardDuty→AmazonEventBridge→AmazonSNS</li></ul></li></ul></li></ul><h5 id="最小権限の適用"><a href="#最小権限の適用" class="headerlink" title="最小権限の適用"></a>最小権限の適用</h5><p>IAM Access Analyzer: 最小権限の原則を適用するために便利なサービス</p><ul><li><p>IAM Access Analyzer</p><ul><li>外部に共有されているリソースの識別</li><li>IAMポリシーの検証</li><li>CloudTrailログに基づいたIAMポリシーの作成</li><li>外部に共有されているリソースの識別<ul><li>IAMロール、S3バケット、KMSキー、RDSスナップショットといったアカウントやパブリックなどのアカウント外部と共有可能なリソースを調べて、</li><li>外部と共有されたリソースを検出する</li><li>Organizationsの組織全体での検出が可能だが、リージョンごとに有効化する必要がある</li></ul></li><li>IAMポリシーの検証<ul><li>IAM Access AnalyzerはIAMポリシーの作成時に、セキュリティ・エラー・警告・提案の４つの視点で検証してくれる</li></ul></li><li>CloudTrailログに基づいたIAMポリシーの作成<ul><li>IAMユーザー、IAMロールが実行したリクエストのCloudTrailログを分析して、適切なIAMポリシーを生成してくれる</li></ul></li></ul></li><li><p>アクセス許可の境界</p><ul><li>IAMユーザー、IAMロールを作成しポリシーを設定するユーザーが過剰な権限を適用することを防ぐ機能</li><li>例）Lambda関数やEC2インスタンス向けのIAMロールを作成することを許可されたユーザがいるとする。<ul><li>開発ユーザ自身はapp-bucketにアクセスすることは許可されているが、機密情報が保存されたsecure-bucketへのアクセスは許可されていない</li><li>このとき、開発ユーザーがIAMロールとIAMポリシーを作成する際に、secure-bucketへのフルアクセス許可のあるIAMロールを作成下とすると、開発ユーザはIAMロールをEC2インスタンスに設定して、EC2インスタンス上でCLIなどでの操作でsecure-bucketへアクセスできてしまう</li><li>だからといって、開発ユーザからIAMロールやIAMポリシーの権限を奪ってしまうと開発スピードが落ちる</li><li>この問題を解決するのが<strong>アクセス許可の境界</strong></li><li>アクセス許可の境界はIAMユーザー、IAMロールに追加で設定する管理ポリシーです。</li></ul></li></ul></li></ul><h5 id="VPCのセキュリティ"><a href="#VPCのセキュリティ" class="headerlink" title="VPCのセキュリティ"></a>VPCのセキュリティ</h5><ul><li>VPCにおけるセキュリティ設定の基礎<ul><li>ルートテーブル</li><li>セキュリティグループ：ALB,EC2,ENIを保護するファイアウォール</li><li>ネットワークACL：サブネットを保護するファイアウォール</li></ul></li></ul><h5 id="AWS-KMS"><a href="#AWS-KMS" class="headerlink" title="AWS KMS"></a>AWS KMS</h5><p>CMK(カスタマー管理キー)を管理して、データキーを生成・暗号化・復号するなど、復号化に必要なキー管理、キーオペレーションを提供するマネージド・サービス</p><p>さまざまなAWSサービスとシームレスに統合することができる</p><ul><li><p>KMSキーの種類</p><ul><li>カスタマー管理キー：AWSユーザーが作成、管理、完全に制御するキー。キーストレージ料金とリクエスト量に応じた料金が発生</li><li>AWS管理キー：AWSが作成、管理するキー。特定のサービスを使用したり、暗号化するときに選択することで作成される。リクエスト量に応じた課金のみ</li></ul></li><li><p>エンベロープ暗号化</p><ul><li>対象暗号化</li><li>非対称暗号化</li></ul></li><li><p>キーのローテーション</p><ul><li>KMSキーには年ごとに自動ローテーション機能がある</li><li>カスタマー管理キーでは、自動ローテーションはオプションで有効にできる</li><li>AWS管理キーは自動ローテーションが矯正される</li><li>有効にするとKMSは毎年新しいキーマテリアルを生成</li><li>私達はキーIDを指定して暗号化／復号をするのみで、ローテーションされたキーマテリアルの指定は意識しない</li></ul></li><li><p>キーのエイリアス</p><ul><li>カスタマー管理キーにはエイリアスが設定できる</li><li>アプリケーションからはキーIDのかわりにエイリアスを指定してキーへのアクションを実行できる</li></ul></li><li><p>キーのインポート</p><ul><li>カスタマー管理キーの作成時にキーをインポート可能</li><li>オンプレミスで作成したキーマテリアルをアップロードしてカスタマー管理キーとして使用できる</li></ul></li><li><p>KMSをサポートするサービス</p><ul><li>AWS Systems Manager Parameter Store</li><li>AWS Secrets Manager</li><li>Amazon DynamoDB</li><li>Amazon EBS</li><li>Amazon RDS</li><li>Amazon WorkSpaces</li><li>Amazon EMR</li><li>Amazon Redshift</li><li>Amazon S3</li></ul></li></ul><h5 id="AWS-CloudHSM"><a href="#AWS-CloudHSM" class="headerlink" title="AWS CloudHSM"></a>AWS CloudHSM</h5><p>キー保存、暗号化を実行するハードウェアを物理的に専有するサービスが、AWS CloudHSM</p><p>CloudHSMはFIPS 140-2レベル3に準拠している</p><p>AWS KMSもFIPS 140-2レベル2に準拠しているが、レベル3が必要な場合はCloudHSMを選択</p><ul><li>CloudHSMの構成</li><li>KMSカスタムキーストア</li><li>CloudHSMのバックアップ</li><li>CloudHSMのユースケース(TDE)</li></ul><h5 id="AWS-Certificate-Manager"><a href="#AWS-Certificate-Manager" class="headerlink" title="AWS Certificate Manager"></a>AWS Certificate Manager</h5><p>パブリックなSSL&#x2F;TSL証明書の保存、更新を提供する無料のサービス</p><h5 id="AWS-Private-Certificate-Authority"><a href="#AWS-Private-Certificate-Authority" class="headerlink" title="AWS Private Certificate Authority"></a>AWS Private Certificate Authority</h5><p>プライベートな独自の証明機関(CA)階層を作成し、ユーザー、デバイス、アプリケーションなどの認証のプライベート証明書を作成可能</p><h5 id="Amazon-Cognito"><a href="#Amazon-Cognito" class="headerlink" title="Amazon Cognito"></a>Amazon Cognito</h5><p>Webアプリケーションやモバイルアプリケーションに安全に認証を提供するサービス</p><ul><li>Cognitoユーザープール<ul><li>サインアップ・サインインを短期間でアプリケーションに実装<ul><li>認証基盤を開発しなくても、モバイルアプリケーションやWebアプリケーションからのサインアップ、サインインのために使用可能</li><li>開発コストを下げて開発機関を短くするためにも有用</li><li>Cognitoユーザープールのみで認証も可能、SNSなど外部での認証も可能</li></ul></li><li>MFA、アドバンスドセキュリティ他<ul><li>パスワードポリシー</li><li>メールアドレス、電話番号の検証</li><li>MFA(多要素認証)</li><li>アドバンスドセキュリティ</li></ul></li><li>Lambdaトリガー<ul><li>サインアップイベント、サインインイベントをトリガーにAWS Lambda関数を実行できる</li></ul></li></ul></li><li>IDプール<ul><li>モバイルアプリケーションやクライアントサイドJavaScriptが動作しているアプリケーションで、AWSのサービスに対して安全にリクエストを実行したい場合、CognitoIDプールを利用する</li></ul></li></ul><h5 id="AWS-Secrets-Manager"><a href="#AWS-Secrets-Manager" class="headerlink" title="AWS Secrets Manager"></a>AWS Secrets Manager</h5><p>データベースなどの認証情報を保持し、取得にはSecrets ManagerへのAPIリクエストを使用します。</p><p>認証情報のローテーション更新が必要となった際には、Secrets Managerがデータベースの認証情報を更新して保持します</p><p>アプリケーションからはSecrets ManagerへGetSecretValueリクエストを実行することで、常に現在の認証情報を取得できるので、認証情報の再配布やそのための長時間に渡るシステムダウンタイムはない</p><ul><li>ローテーション戦略</li></ul><h5 id="Amazon-Inspector"><a href="#Amazon-Inspector" class="headerlink" title="Amazon Inspector"></a>Amazon Inspector</h5><p>EC2インスタンス、ECRコンテナイメージ、Lambda関数を自動的に検出して、脆弱性のスキャンを継続的に行い、レポートで可視化するサービスです。</p><p>以前はInspector用のエージェントが必要で、EC2のみスキャン可能でしたが、そのバージョンはAmazon Inspector Classicになった</p><h5 id="AWS-WAF"><a href="#AWS-WAF" class="headerlink" title="AWS WAF"></a>AWS WAF</h5><p>Web Application Firewall</p><p>CloudFront,APIGateway,ApplicationLoadBalancer,AppSync GraphQL API, Cognitoユーザープール、App Runnerへのリクエストに対応できる</p><ul><li>AWS WAFの構成と料金</li><li>AWS WAFの代表的なマネージドルール</li></ul><h5 id="AWS-Shield"><a href="#AWS-Shield" class="headerlink" title="AWS Shield"></a>AWS Shield</h5><p>DDoS攻撃から保護するサービスで、StandardとAdvancedがある</p><ul><li>AWS Shield Standardは無料で有効になり、AWSサービスへのベーシックなネットワークレイヤー攻撃を自動的に緩和する</li><li>Advancedは1ヶ月3000USDのサブスクリプションサービスで、Organizations組織で利用可能</li></ul><h4 id="3-信頼性"><a href="#3-信頼性" class="headerlink" title="3　信頼性"></a>3　信頼性</h4><h4 id="4-パフォーマンス"><a href="#4-パフォーマンス" class="headerlink" title="4　パフォーマンス"></a>4　パフォーマンス</h4><h4 id="5-コスト最適化"><a href="#5-コスト最適化" class="headerlink" title="5　コスト最適化"></a>5　コスト最適化</h4><h4 id="6-確認テスト"><a href="#6-確認テスト" class="headerlink" title="6　確認テスト"></a>6　確認テスト</h4><h3 id="第4章-移行とモダナイゼーションの加速"><a href="#第4章-移行とモダナイゼーションの加速" class="headerlink" title="第4章　移行とモダナイゼーションの加速"></a>第4章　移行とモダナイゼーションの加速</h3><h4 id="1-移行評価とアプローチ"><a href="#1-移行評価とアプローチ" class="headerlink" title="1　移行評価とアプローチ"></a>1　移行評価とアプローチ</h4><h4 id="2-移行後アーキテクチャとモダナイゼーション"><a href="#2-移行後アーキテクチャとモダナイゼーション" class="headerlink" title="2　移行後アーキテクチャとモダナイゼーション"></a>2　移行後アーキテクチャとモダナイゼーション</h4><h4 id="3-確認テスト-1"><a href="#3-確認テスト-1" class="headerlink" title="3　確認テスト"></a>3　確認テスト</h4><h3 id="第5章-模擬テスト"><a href="#第5章-模擬テスト" class="headerlink" title="第5章　模擬テスト"></a>第5章　模擬テスト</h3><h4 id="1-問題"><a href="#1-問題" class="headerlink" title="1　問題"></a>1　問題</h4><h4 id="2-解答と解説"><a href="#2-解答と解説" class="headerlink" title="2　解答と解説"></a>2　解答と解説</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AWS認定資格試験テキスト＆問題集-AWS認定ソリューションアーキテクト-プロフェッショナル-改訂第2版-AWS認定資格試験テキスト&quot;&gt;&lt;a href=&quot;#AWS認定資格試験テキスト＆問題集-AWS認定ソリューションアーキテクト-プロフェッショナル-改訂第2版-A</summary>
      
    
    
    
    <category term="AWS" scheme="http://yoursite.com/categories/AWS/"/>
    
    <category term="Cloud" scheme="http://yoursite.com/categories/AWS/Cloud/"/>
    
    <category term="資格" scheme="http://yoursite.com/categories/AWS/Cloud/%E8%B3%87%E6%A0%BC/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>Excelで学ぶ ビジネスデータ分析の基礎</title>
    <link href="http://yoursite.com/Excel/%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90/%E7%B5%B1%E8%A8%88/2023-02_Excel%E3%81%A7%E5%AD%A6%E3%81%B6_%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E3%81%AE%E5%9F%BA%E7%A4%8E/"/>
    <id>http://yoursite.com/Excel/%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90/%E7%B5%B1%E8%A8%88/2023-02_Excel%E3%81%A7%E5%AD%A6%E3%81%B6_%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E3%81%AE%E5%9F%BA%E7%A4%8E/</id>
    <published>2023-02-25T15:00:00.000Z</published>
    <updated>2023-03-04T06:24:33.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Excelで学ぶ-ビジネスデータ分析の基礎"><a href="#Excelで学ぶ-ビジネスデータ分析の基礎" class="headerlink" title="Excelで学ぶ ビジネスデータ分析の基礎"></a>Excelで学ぶ ビジネスデータ分析の基礎</h1><h2 id="理解したこと"><a href="#理解したこと" class="headerlink" title="理解したこと"></a>理解したこと</h2><h2 id="書籍サイト"><a href="#書籍サイト" class="headerlink" title="書籍サイト"></a>書籍サイト</h2><p><a href="https://aoten.jp/store/detail.html?no=a1500i_b171113">https://aoten.jp/store/detail.html?no=a1500i_b171113</a></p><h2 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h2><p><a href="https://stat.odyssey-com.co.jp/book/statex_basic/">https://stat.odyssey-com.co.jp/book/statex_basic/</a></p><h2 id="書籍情報"><a href="#書籍情報" class="headerlink" title="書籍情報"></a>書籍情報</h2><ul><li>商品の特長<br>本書は、ビジネスの現場でさまざまなデータを活用するための基本的な知識とExcelを使用したデータ分析の方法を解説した書籍です。義務教育の算数・数学レベルを習得していれば、十分理解して実践できる内容になっています。統計分析の実務やデータの見方を習得したい学生、ビジネスパーソン、マネージャー、経営者の方を対象としています。<br>また本書は、資格試験『ビジネス統計スペシャリスト エクセル分析ベーシック』の出題範囲を網羅しており、試験対策テキストとしてもご利用いただけます。</li></ul><p>内容は大きく3つの部門に分かれており、全15章で構成されています。章が進むにつれて、より高度な分析方法を習得できるようになり、ビジネス実務におけるデータ分析の理解と実践的な力が身につけられます。また、各章の最後には章末問題があり、学習した内容の理解度を確認できます。</p><ul><li>目次<br>[ビジネスデータ把握力 編]<br>第1章 平均値｜第2章 中央値｜第3章 最頻値｜第4章 レンジ｜第5章 標準偏差</li></ul><p>[ビジネス課題発見力 編]<br>第6章 外れ値の検出｜第7章 度数分布表｜第8章 標準化｜第9章 移動平均｜第10章 季節調整</p><p>[ビジネス仮説検証力 編]<br>第11章 集計｜第12章 散布図｜第13章 相関｜第14章 回帰分析｜第15章 最適化</p><h3 id="ビジネスデータ把握力-編"><a href="#ビジネスデータ把握力-編" class="headerlink" title="[ビジネスデータ把握力 編]"></a>[ビジネスデータ把握力 編]</h3><h4 id="第1章-平均値"><a href="#第1章-平均値" class="headerlink" title="第1章 平均値"></a>第1章 平均値</h4><h4 id="第2章-中央値"><a href="#第2章-中央値" class="headerlink" title="第2章 中央値"></a>第2章 中央値</h4><ul><li>外れ値(他のデータと大きく異なる値)の影響を受けにくい</li><li>データの個数が偶数の場合は２つの値の平均を取る</li></ul><h4 id="第3章-最頻値"><a href="#第3章-最頻値" class="headerlink" title="第3章 最頻値"></a>第3章 最頻値</h4><ul><li><p>modeと呼ばれる</p><ul><li>modeに流行り、流行のような意味合いがあり最頻値と結びついてそう</li></ul></li><li><p>MODE.MULT,MODE.SNGLの違い</p><ul><li><a href="http://www.eurus.dti.ne.jp/~yoneyama/Excel/kansu/mode.htm">http://www.eurus.dti.ne.jp/~yoneyama/Excel/kansu/mode.htm</a><ul><li>MULT: マルチの意味で複数の最頻値を返却する</li><li>SNGL: シングルの意味で単一の最頻値を返却する</li></ul></li></ul></li><li><p>代表値</p><ul><li>平均値</li><li>中央値</li><li>最頻値<br><a href="https://atmarkit.itmedia.co.jp/ait/articles/2109/15/news033.html">https://atmarkit.itmedia.co.jp/ait/articles/2109/15/news033.html</a></li></ul></li></ul><h4 id="第4章-レンジ"><a href="#第4章-レンジ" class="headerlink" title="第4章 レンジ"></a>第4章 レンジ</h4><p>データが分布している範囲を表す</p><h4 id="第5章-標準偏差"><a href="#第5章-標準偏差" class="headerlink" title="第5章 標準偏差"></a>第5章 標準偏差</h4><h3 id="ビジネス課題発見力-編"><a href="#ビジネス課題発見力-編" class="headerlink" title="[ビジネス課題発見力 編]"></a>[ビジネス課題発見力 編]</h3><h4 id="第6章-外れ値の検出"><a href="#第6章-外れ値の検出" class="headerlink" title="第6章 外れ値の検出"></a>第6章 外れ値の検出</h4><h4 id="第7章-度数分布表"><a href="#第7章-度数分布表" class="headerlink" title="第7章 度数分布表"></a>第7章 度数分布表</h4><h4 id="第8章-標準化"><a href="#第8章-標準化" class="headerlink" title="第8章 標準化"></a>第8章 標準化</h4><h4 id="第9章-移動平均"><a href="#第9章-移動平均" class="headerlink" title="第9章 移動平均"></a>第9章 移動平均</h4><h4 id="第10章-季節調整"><a href="#第10章-季節調整" class="headerlink" title="第10章 季節調整"></a>第10章 季節調整</h4><h3 id="ビジネス仮説検証力-編"><a href="#ビジネス仮説検証力-編" class="headerlink" title="[ビジネス仮説検証力 編]"></a>[ビジネス仮説検証力 編]</h3><h4 id="第11章-集計"><a href="#第11章-集計" class="headerlink" title="第11章 集計"></a>第11章 集計</h4><h4 id="第12章-散布図"><a href="#第12章-散布図" class="headerlink" title="第12章 散布図"></a>第12章 散布図</h4><h4 id="第13章-相関"><a href="#第13章-相関" class="headerlink" title="第13章 相関"></a>第13章 相関</h4><h4 id="第14章-回帰分析"><a href="#第14章-回帰分析" class="headerlink" title="第14章 回帰分析"></a>第14章 回帰分析</h4><h4 id="第15章-最適化"><a href="#第15章-最適化" class="headerlink" title="第15章 最適化"></a>第15章 最適化</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Excelで学ぶ-ビジネスデータ分析の基礎&quot;&gt;&lt;a href=&quot;#Excelで学ぶ-ビジネスデータ分析の基礎&quot; class=&quot;headerlink&quot; title=&quot;Excelで学ぶ ビジネスデータ分析の基礎&quot;&gt;&lt;/a&gt;Excelで学ぶ ビジネスデータ分析の基礎&lt;/</summary>
      
    
    
    
    <category term="Excel" scheme="http://yoursite.com/categories/Excel/"/>
    
    <category term="データ分析" scheme="http://yoursite.com/categories/Excel/%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90/"/>
    
    <category term="統計" scheme="http://yoursite.com/categories/Excel/%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90/%E7%B5%B1%E8%A8%88/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>Linux教科書_LinuCレベル2Version10.0対応</title>
    <link href="http://yoursite.com/Linux/2021-11_Linux%E6%95%99%E7%A7%91%E6%9B%B8_LinuC%E3%83%AC%E3%83%99%E3%83%AB2Version10.0%E5%AF%BE%E5%BF%9C%20copy/"/>
    <id>http://yoursite.com/Linux/2021-11_Linux%E6%95%99%E7%A7%91%E6%9B%B8_LinuC%E3%83%AC%E3%83%99%E3%83%AB2Version10.0%E5%AF%BE%E5%BF%9C%20copy/</id>
    <published>2021-11-19T15:00:00.000Z</published>
    <updated>2021-11-23T16:02:00.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux教科書-LinuCレベル2Version10-0対応"><a href="#Linux教科書-LinuCレベル2Version10-0対応" class="headerlink" title="Linux教科書_LinuCレベル2Version10.0対応"></a>Linux教科書_LinuCレベル2Version10.0対応</h1><h2 id="理解したこと"><a href="#理解したこと" class="headerlink" title="理解したこと"></a>理解したこと</h2><h2 id="書籍サイト"><a href="#書籍サイト" class="headerlink" title="書籍サイト"></a>書籍サイト</h2><p><a href="https://www.shoeisha.co.jp/book/detail/9784798167961">https://www.shoeisha.co.jp/book/detail/9784798167961</a></p><h2 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h2><p><a href="https://www.shoeisha.co.jp/book/download/9784798167961/detail">https://www.shoeisha.co.jp/book/download/9784798167961/detail</a></p><h2 id="書籍情報"><a href="#書籍情報" class="headerlink" title="書籍情報"></a>書籍情報</h2><p>支持率No.1「Linux教科書」シリーズのノウハウを注いだ『LinuCレベル2』が登場！<br>クラウド時代のLinuxエンジニアの技術力を証明する資格として<br>LPI-Japanにより新たに開発された認定試験が「LinuC（リナック）」です。</p><p>この試験が、2020年4月よりVersion 10.0にバージョンアップ。<br>本書は「レベル2 Version 10.0」に対応したLPI-Japan認定テキストです。<br>「あずき本」で有名な、支持率No.1「Linux教科書」シリーズのノウハウを<br>すべて注ぎ込み、LinuCレベル2最新バージョンの出題範囲を完全網羅した新しい定番書です。</p><p>●「201試験」「202試験」の2試験に対応。出題範囲を完全網羅<br>●学習したことを確認できる練習問題を、各章末に豊富に掲載しています<br>●巻末には1回分の模擬試験を収録。本試験に向けて実力を試せます<br>●Linux実習環境（CentOS）を翔泳社Webサイトからダウンロード可。<br>　実際にコマンドを入力しながら学習できます</p><p>【LinuCレベル2】 「仮想マシン・コンテナを含むLinuxシステム、ネットワークの設定・構築」<br>ができるエンジニアとして認定されます。</p><h2 id="メモ"><a href="#メモ" class="headerlink" title="メモ"></a>メモ</h2><ul><li>ローカル環境にDockerでCentOS7環境を作ってSSHで接続して演習する<ul><li><a href="https://pocketcode.net/docker-centos7-ssh-connect">https://pocketcode.net/docker-centos7-ssh-connect</a></li></ul></li></ul><h2 id="序章-LinuCの概要"><a href="#序章-LinuCの概要" class="headerlink" title="序章　LinuCの概要"></a>序章　LinuCの概要</h2><h2 id="LinuCとは"><a href="#LinuCとは" class="headerlink" title="LinuCとは"></a>LinuCとは</h2><h2 id="LinuCの概要"><a href="#LinuCの概要" class="headerlink" title="LinuCの概要"></a>LinuCの概要</h2><h2 id="受験の申し込み手続き"><a href="#受験の申し込み手続き" class="headerlink" title="受験の申し込み手続き"></a>受験の申し込み手続き</h2><h2 id="受験の実際"><a href="#受験の実際" class="headerlink" title="受験の実際"></a>受験の実際</h2><h2 id="試験問題の形式"><a href="#試験問題の形式" class="headerlink" title="試験問題の形式"></a>試験問題の形式</h2><h2 id="学習の進め方"><a href="#学習の進め方" class="headerlink" title="学習の進め方"></a>学習の進め方</h2><h2 id="受験のテクニック"><a href="#受験のテクニック" class="headerlink" title="受験のテクニック"></a>受験のテクニック</h2><h2 id="■第1部-201試験（LinuC-Level2-Exam-201）"><a href="#■第1部-201試験（LinuC-Level2-Exam-201）" class="headerlink" title="■第1部　201試験（LinuC Level2 Exam 201）"></a>■第1部　201試験（LinuC Level2 Exam 201）</h2><h2 id="第1章-システムの起動とLinuxカーネル"><a href="#第1章-システムの起動とLinuxカーネル" class="headerlink" title="第1章　システムの起動とLinuxカーネル"></a>第1章　システムの起動とLinuxカーネル</h2><h3 id="1-1-ブートプロセス"><a href="#1-1-ブートプロセス" class="headerlink" title="1.1　ブートプロセス"></a>1.1　ブートプロセス</h3><ul><li>BIOS<ul><li>MBR:マスターブートレコード<ul><li>ブートローダ：OSを起動するプログラム</li><li>パーティションテーブル</li></ul></li></ul></li><li>UEFI<ul><li>GPT:GUID Partition Table</li><li>ブートローダ：UEFIシステムパーティション(ESP)に格納される</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ブロックデバイスを一覧表示する</span></span><br><span class="line">lsblk</span><br></pre></td></tr></table></figure><ul><li><p>ブートローダ：OSを起動するプログラム</p><ul><li>Linuxでもっともよく利用されるブートローダはGRUB(Grand Unified Bootloader)</li></ul></li><li><p>カーネル</p><ul><li>OSの中でハードウェアとソフトウェアの仲立ちをしてくれるプログラム</li><li><a href="https://qiita.com/uguis410/items/17ec1e447e9716bfdca7">https://qiita.com/uguis410/items/17ec1e447e9716bfdca7</a></li><li>起動処理<ul><li>組み込まれているハードウェアの検出と初期化</li><li>システムクロックの設定</li><li>ルートパーティションのチェックとマウント</li><li>systemdの開始</li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">journalctl -b</span><br><span class="line">dmesg</span><br></pre></td></tr></table></figure><ul><li><p>初期RAMディスク</p><ul><li>カーネルが起動すると、初期RAMディスクをルートパーティションとしてマウントする</li></ul></li><li><p>RAMディスク：メモリ上にファイルシステムを作成</p></li><li><p>ループバックマウント：ファイルをファイルシステムとしてマウントする</p></li><li><p>TODO: 初期RAMディスクの作成などについては復習が必要</p></li></ul><h3 id="1-2-ブートローダ"><a href="#1-2-ブートローダ" class="headerlink" title="1.2　ブートローダ"></a>1.2　ブートローダ</h3><ul><li>ブートローダとは：<ul><li>カーネルをストレージから読み込み、システムを起動するためのプログラム</li><li>Linuxの代表的なブートローダはGRUB</li></ul></li></ul><h3 id="1-3-システム起動のカスタマイズ"><a href="#1-3-システム起動のカスタマイズ" class="headerlink" title="1.3　システム起動のカスタマイズ"></a>1.3　システム起動のカスタマイズ</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># メンテナンスモード</span></span><br><span class="line">systemctl isolate rescue.target</span><br><span class="line">systemctl rescue</span><br><span class="line"><span class="comment"># 緊急モード</span></span><br><span class="line">systemctl isolate emergency.target</span><br><span class="line">systemclt emergency</span><br></pre></td></tr></table></figure><ul><li><p>Unit設定ファイル</p><ul><li><code>/etc/systemd/system</code>ディレクトリに配置される<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">[tomo@localhost system]$ cat multi-user.target.wants/postfix.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Postfix Mail Transport Agent</span><br><span class="line">After=syslog.target network.target</span><br><span class="line">Conflicts=sendmail.service exim.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/spool/postfix/pid/master.pid</span><br><span class="line">EnvironmentFile=-/etc/sysconfig/network</span><br><span class="line">ExecStartPre=-/usr/libexec/postfix/aliasesdb</span><br><span class="line">ExecStartPre=-/usr/libexec/postfix/chroot-update</span><br><span class="line">ExecStart=/usr/sbin/postfix start</span><br><span class="line">ExecReload=/usr/sbin/postfix reload</span><br><span class="line">ExecStop=/usr/sbin/postfix stop</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># systemd-deltaコマンド 設定ファイルの差分を出力</span></span><br><span class="line">[tomo@localhost system]$ systemd-delta</span><br><span class="line">[EXTENDED]   /run/systemd/system/user-0.slice → /run/systemd/system/user-0.slice.d/50-After-systemd-logind\x2eservice.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/user-0.slice → /run/systemd/system/user-0.slice.d/50-TasksMax.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/user-0.slice → /run/systemd/system/user-0.slice.d/50-Description.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/user-0.slice → /run/systemd/system/user-0.slice.d/50-After-systemd-user-sessions\x2eservice.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-2.scope → /run/systemd/system/session-2.scope.d/50-After-systemd-user-sessions\x2eservice.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-2.scope → /run/systemd/system/session-2.scope.d/50-After-systemd-logind\x2eservice.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-2.scope → /run/systemd/system/session-2.scope.d/50-Description.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-2.scope → /run/systemd/system/session-2.scope.d/50-Slice.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-2.scope → /run/systemd/system/session-2.scope.d/50-SendSIGHUP.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-2.scope → /run/systemd/system/session-2.scope.d/50-TasksMax.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-6.scope → /run/systemd/system/session-6.scope.d/50-Slice.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-6.scope → /run/systemd/system/session-6.scope.d/50-TasksMax.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-6.scope → /run/systemd/system/session-6.scope.d/50-After-systemd-user-sessions\x2eservice.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-6.scope → /run/systemd/system/session-6.scope.d/50-After-systemd-logind\x2eservice.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-6.scope → /run/systemd/system/session-6.scope.d/50-Description.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-6.scope → /run/systemd/system/session-6.scope.d/50-SendSIGHUP.conf</span><br><span class="line">[EQUIVALENT] /etc/systemd/system/default.target → /usr/lib/systemd/system/default.target</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-3.scope → /run/systemd/system/session-3.scope.d/50-After-systemd-logind\x2eservice.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-3.scope → /run/systemd/system/session-3.scope.d/50-SendSIGHUP.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-3.scope → /run/systemd/system/session-3.scope.d/50-TasksMax.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-3.scope → /run/systemd/system/session-3.scope.d/50-Description.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-3.scope → /run/systemd/system/session-3.scope.d/50-Slice.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/session-3.scope → /run/systemd/system/session-3.scope.d/50-After-systemd-user-sessions\x2eservice.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/user-1000.slice → /run/systemd/system/user-1000.slice.d/50-After-systemd-logind\x2eservice.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/user-1000.slice → /run/systemd/system/user-1000.slice.d/50-Description.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/user-1000.slice → /run/systemd/system/user-1000.slice.d/50-TasksMax.conf</span><br><span class="line">[EXTENDED]   /run/systemd/system/user-1000.slice → /run/systemd/system/user-1000.slice.d/50-After-systemd-user-sessions\x2eservice.conf</span><br><span class="line"></span><br><span class="line">27 overridden configuration files found.</span><br></pre></td></tr></table></figure></li></ul></li><li><p>systemdのログ</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">journalctl -b</span><br><span class="line">journalctl -f</span><br><span class="line">journalctl -n 10</span><br><span class="line">journalctl -p err</span><br><span class="line">-p, --priority=</span><br><span class="line">           Filter output by message priorities or priority ranges. Takes either a single numeric or textual <span class="built_in">log</span> level (i.e. between 0/<span class="string">"emerg"</span> and 7/<span class="string">"debug"</span>), or a range of numeric/text <span class="built_in">log</span> levels <span class="keyword">in</span> the</span><br><span class="line">           form FROM..TO. The <span class="built_in">log</span> levels are the usual syslog <span class="built_in">log</span> levels as documented <span class="keyword">in</span> syslog(3), i.e.  <span class="string">"emerg"</span> (0), <span class="string">"alert"</span> (1), <span class="string">"crit"</span> (2), <span class="string">"err"</span> (3), <span class="string">"warning"</span> (4), <span class="string">"notice"</span> (5), <span class="string">"info"</span> (6),</span><br><span class="line">           <span class="string">"debug"</span> (7). If a single <span class="built_in">log</span> level is specified, all messages with this <span class="built_in">log</span> level or a lower (hence more important) <span class="built_in">log</span> level are shown. If a range is specified, all messages within the range are</span><br><span class="line">           shown, including both the start and the end value of the range. This will add <span class="string">"PRIORITY="</span> matches <span class="keyword">for</span> the specified priorities.</span><br><span class="line"></span><br><span class="line">journalctl -r</span><br><span class="line"><span class="comment"># よく使うことになるのはこれだけと思う</span></span><br><span class="line">journalctl -u postfix.service</span><br></pre></td></tr></table></figure><ul><li>ログの保存場所<ul><li><code>/var/run/log/journal</code>ディレクトリ配下にバイナリファイルが存在する。このファイルはシステム再起動で失われるため永続化するなら</li><li><code>/var/log/journal</code>ディレクトリを作成して、<code>/etc/systemd/journalId.conf</code>ファイルで次の設定</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Storage&#x3D;persistent</span><br><span class="line">SystemMaxUse&#x3D;200M</span><br></pre></td></tr></table></figure><h3 id="1-4-カーネルの構成要素"><a href="#1-4-カーネルの構成要素" class="headerlink" title="1.4　カーネルの構成要素"></a>1.4　カーネルの構成要素</h3><ul><li><p>カーネルバージョン</p><ul><li><code>uname</code>コマンドでバージョンがわかる</li><li><code>cat /proc/version</code>でもわかる</li></ul></li><li><p>カーネルイメージ</p><ul><li><code>ls /boot</code>でvmlinuz-xxxの名前でファイルが存在する</li></ul></li><li><p>lsmodコマンド</p><ul><li>現在ロードされているすべてのモジュール一覧を表示</li><li><code>cat /proc/modules</code>でも同様の情報が取得できる</li></ul></li><li><p>modinfoコマンド</p><ul><li>モジュールの情報を表示</li></ul></li><li><p>insmodコマンド</p><ul><li>ローダブルモジュールをロード</li></ul></li><li><p>rmmodコマンド</p><ul><li>ロードされているモジュールをアンロード</li></ul></li><li><p>modproveコマンド</p><ul><li>モジュールのロードやアンロードを行います。</li><li>insmodやrmmodだと依存関係を気にしなければ行けないが、</li><li>このコマンドであれば必要なモジュールをロードできるから楽</li><li>modproveコマンドが参照する依存関係はmodles.depファイルに記述されている</li></ul></li></ul><h3 id="1-5-カーネルのコンパイル"><a href="#1-5-カーネルのコンパイル" class="headerlink" title="1.5　カーネルのコンパイル"></a>1.5　カーネルのコンパイル</h3><ul><li>カーネルソースの格納ディレクトリ：<code>/usr/src/linux</code></li><li>TODO: ディレクトリ内構造把握しておいたほうがいい</li></ul><h3 id="1-6-カーネルパラメータの変更"><a href="#1-6-カーネルパラメータの変更" class="headerlink" title="1.6　カーネルパラメータの変更"></a>1.6　カーネルパラメータの変更</h3><h3 id="1-7-カーネルの管理と問題解決"><a href="#1-7-カーネルの管理と問題解決" class="headerlink" title="1.7　カーネルの管理と問題解決"></a>1.7　カーネルの管理と問題解決</h3><h3 id="練習問題"><a href="#練習問題" class="headerlink" title="練習問題"></a>練習問題</h3><ul><li>1.1 GRUBの設定ファイルgrub.cfgを生成するコマンド：grub2-mkconfig -o &#x2F;boot&#x2F;grub2&#x2F;grub.cfg</li><li>1.2 システム起動→GRUBメニュー画面→カーネルが見つからないエラー：メニュー画面で<code>[c]</code>を押下してGRUBシェルを起動し、原因を探って修復</li><li>1.3 GRUBを再インストールするコマンド：<code>grub-install</code>or<code>grub2-install</code>コマンド</li><li>1.4 systemdを採用したシステムでログを確認するコマンド：<code>journalctl</code>コマンド</li><li>1.5 systemdを採用したシステムでnginxサーバが自動起動しないようにするコマンド：<code>systemctl disabled nginx.service</code></li><li>1.6 rescueモードで起動：一般ユーザはログインできない、ネットワーク接続されない</li><li>1.7 mobproveコマンドが利用するファイルで、モジュールの依存関係情報が格納されているファイル：<code>/lib/modules/4.19.132/modules.dep</code></li><li>1.8 xxx</li><li>1.9 カーネルソースツリーを初期化するコマンド：make mrproper</li><li>1.10 ロードされているカーネルモジュールを確認する方法：<code>lsmod</code>or<code>cat /proc/modules</code></li><li>1.11 初期RAMディスクに関する問題：システム起動に必要なデバイスドライバがカーネル本体に含まれていれば初期RAMディスクは必須ではない</li><li>1.12 </li><li>1.13</li><li>1.14</li><li>1.15</li></ul><h2 id="第2章-ファイルシステムとストレージ管理"><a href="#第2章-ファイルシステムとストレージ管理" class="headerlink" title="第2章　ファイルシステムとストレージ管理"></a>第2章　ファイルシステムとストレージ管理</h2><h3 id="2-1-ファイルシステムの設定とマウント"><a href="#2-1-ファイルシステムの設定とマウント" class="headerlink" title="2.1　ファイルシステムの設定とマウント"></a>2.1　ファイルシステムの設定とマウント</h3><ul><li>ファイルシステム：SSDやHDDなどのストレージにファイルを保存して管理する仕組み</li><li>システムで利用するファイルシステム情報は<code>/etc/fstab</code>ファイルに記述されている</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]<span class="comment"># cat /etc/fstab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /etc/fstab</span></span><br><span class="line"><span class="comment"># Created by anaconda on Sat Nov 20 22:26:51 2021</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under '/dev/disk'</span></span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">/dev/mapper/centos-root /                       xfs     defaults        0 0</span><br><span class="line">UUID=165774f9-21d1-4f11-ac52-75928012626b /boot                   xfs     defaults        0 0</span><br><span class="line">/dev/mapper/centos-swap swap                    swap    defaults        0 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 書式：</span></span><br><span class="line"><span class="comment"># 1.デバイスファイル名・ラベル・UID</span></span><br><span class="line"><span class="comment"># 2.マウントポイント</span></span><br><span class="line"><span class="comment"># 3.ファイルシステムの種類</span></span><br><span class="line"><span class="comment"># 4.マウントオプション</span></span><br><span class="line"><span class="comment"># 5.dumpコマンドの対象</span></span><br><span class="line"><span class="comment"># 6.ブート時にfsckがチェックする順序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># UUIDを確認するコマンド</span></span><br><span class="line">[root@localhost etc]<span class="comment"># blkid</span></span><br><span class="line">/dev/mapper/centos-root: UUID=<span class="string">"947b91d3-28fe-493a-b8e9-522e5c598fb6"</span> TYPE=<span class="string">"xfs"</span></span><br><span class="line">/dev/sda2: UUID=<span class="string">"Rl5syf-IFgI-7shw-aKvy-Y4cH-ZrIM-lVVpOU"</span> TYPE=<span class="string">"LVM2_member"</span></span><br><span class="line">/dev/sda1: UUID=<span class="string">"165774f9-21d1-4f11-ac52-75928012626b"</span> TYPE=<span class="string">"xfs"</span></span><br><span class="line">/dev/mapper/centos-swap: UUID=<span class="string">"4fab2c94-5288-45ee-8a62-1acd401bb752"</span> TYPE=<span class="string">"swap"</span></span><br><span class="line"></span><br><span class="line">[root@localhost etc]<span class="comment"># ls -l /dev/disk/by-uuid/</span></span><br><span class="line">合計 0</span><br><span class="line">lrwxrwxrwx. 1 root root 10 11月 21 17:49 165774f9-21d1-4f11-ac52-75928012626b -&gt; ../../sda1</span><br><span class="line">lrwxrwxrwx. 1 root root 10 11月 21 17:49 4fab2c94-5288-45ee-8a62-1acd401bb752 -&gt; ../../dm-1</span><br><span class="line">lrwxrwxrwx. 1 root root 10 11月 21 17:49 947b91d3-28fe-493a-b8e9-522e5c598fb6 -&gt; ../../dm-0</span><br><span class="line"></span><br><span class="line"><span class="comment"># UUIDを変更するコマンド</span></span><br><span class="line">tune2fs -U `uuidgen` /dev/sdb1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost etc]<span class="comment"># cat /usr/lib/systemd/system/tmp.mount</span></span><br><span class="line"><span class="comment">#  This file is part of systemd.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  systemd is free software; you can redistribute it and/or modify it</span></span><br><span class="line"><span class="comment">#  under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="comment">#  the Free Software Foundation; either version 2.1 of the License, or</span></span><br><span class="line"><span class="comment">#  (at your option) any later version.</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Temporary Directory</span><br><span class="line">Documentation=man:hier(7)</span><br><span class="line">Documentation=http://www.freedesktop.org/wiki/Software/systemd/APIFileSystems</span><br><span class="line">ConditionPathIsSymbolicLink=!/tmp</span><br><span class="line">DefaultDependencies=no</span><br><span class="line">Conflicts=umount.target</span><br><span class="line">Before=<span class="built_in">local</span>-fs.target umount.target</span><br><span class="line"></span><br><span class="line">[Mount]</span><br><span class="line">What=tmpfs</span><br><span class="line">Where=/tmp</span><br><span class="line">Type=tmpfs</span><br><span class="line">Options=mode=1777,strictatime</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make 'systemctl enable tmp.mount' work:</span></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=<span class="built_in">local</span>-fs.target</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># カーネルがサポートしているファイルシステム</span></span><br><span class="line">[root@localhost etc]<span class="comment"># cat /proc/filesystems</span></span><br><span class="line">nodev   sysfs</span><br><span class="line">nodev   rootfs</span><br><span class="line">nodev   ramfs</span><br><span class="line">nodev   bdev</span><br><span class="line">nodev   proc</span><br><span class="line">nodev   cgroup</span><br><span class="line">nodev   cpuset</span><br><span class="line">nodev   tmpfs</span><br><span class="line">nodev   devtmpfs</span><br><span class="line">nodev   debugfs</span><br><span class="line">nodev   securityfs</span><br><span class="line">nodev   sockfs</span><br><span class="line">nodev   dax</span><br><span class="line">nodev   bpf</span><br><span class="line">nodev   pipefs</span><br><span class="line">nodev   configfs</span><br><span class="line">nodev   devpts</span><br><span class="line">nodev   hugetlbfs</span><br><span class="line">nodev   autofs</span><br><span class="line">nodev   pstore</span><br><span class="line">nodev   mqueue</span><br><span class="line">nodev   selinuxfs</span><br><span class="line">        fuseblk</span><br><span class="line">nodev   fuse</span><br><span class="line">nodev   fusectl</span><br><span class="line">        xfs</span><br><span class="line">nodev   rpc_pipefs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 現在どのようなファイルシステムがマウントされているか</span></span><br><span class="line">[root@localhost etc]<span class="comment"># cat /etc/mtab</span></span><br><span class="line">sysfs /sys sysfs rw,seclabel,nosuid,nodev,noexec,relatime 0 0</span><br><span class="line">proc /proc proc rw,nosuid,nodev,noexec,relatime 0 0</span><br><span class="line">devtmpfs /dev devtmpfs rw,seclabel,nosuid,size=4515168k,nr_inodes=1128792,mode=755 0 0</span><br><span class="line">securityfs /sys/kernel/security securityfs rw,nosuid,nodev,noexec,relatime 0 0</span><br><span class="line">tmpfs /dev/shm tmpfs rw,seclabel,nosuid,nodev 0 0</span><br><span class="line">devpts /dev/pts devpts rw,seclabel,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000 0 0</span><br><span class="line">tmpfs /run tmpfs rw,seclabel,nosuid,nodev,mode=755 0 0</span><br><span class="line">tmpfs /sys/fs/cgroup tmpfs ro,seclabel,nosuid,nodev,noexec,mode=755 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/systemd cgroup rw,seclabel,nosuid,nodev,noexec,relatime,xattr,release_agent=/usr/lib/systemd/systemd-cgroups-agent,name=systemd 0 0</span><br><span class="line">pstore /sys/fs/pstore pstore rw,nosuid,nodev,noexec,relatime 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/devices cgroup rw,seclabel,nosuid,nodev,noexec,relatime,devices 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/net_cls,net_prio cgroup rw,seclabel,nosuid,nodev,noexec,relatime,net_prio,net_cls 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/hugetlb cgroup rw,seclabel,nosuid,nodev,noexec,relatime,hugetlb 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/cpuset cgroup rw,seclabel,nosuid,nodev,noexec,relatime,cpuset 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/cpu,cpuacct cgroup rw,seclabel,nosuid,nodev,noexec,relatime,cpuacct,cpu 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/memory cgroup rw,seclabel,nosuid,nodev,noexec,relatime,memory 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/perf_event cgroup rw,seclabel,nosuid,nodev,noexec,relatime,perf_event 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/pids cgroup rw,seclabel,nosuid,nodev,noexec,relatime,pids 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/blkio cgroup rw,seclabel,nosuid,nodev,noexec,relatime,blkio 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/freezer cgroup rw,seclabel,nosuid,nodev,noexec,relatime,freezer 0 0</span><br><span class="line">configfs /sys/kernel/config configfs rw,relatime 0 0</span><br><span class="line">/dev/mapper/centos-root / xfs rw,seclabel,relatime,attr2,inode64,noquota 0 0</span><br><span class="line">selinuxfs /sys/fs/selinux selinuxfs rw,relatime 0 0</span><br><span class="line">systemd-1 /proc/sys/fs/binfmt_misc autofs rw,relatime,fd=22,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=10915 0 0</span><br><span class="line">debugfs /sys/kernel/debug debugfs rw,relatime 0 0</span><br><span class="line">mqueue /dev/mqueue mqueue rw,seclabel,relatime 0 0</span><br><span class="line">fusectl /sys/fs/fuse/connections fusectl rw,relatime 0 0</span><br><span class="line">hugetlbfs /dev/hugepages hugetlbfs rw,seclabel,relatime 0 0</span><br><span class="line">/dev/sda1 /boot xfs rw,seclabel,relatime,attr2,inode64,noquota 0 0</span><br><span class="line">sunrpc /var/lib/nfs/rpc_pipefs rpc_pipefs rw,relatime 0 0</span><br><span class="line">tmpfs /run/user/1000 tmpfs rw,seclabel,nosuid,nodev,relatime,size=906448k,mode=700,uid=1000,gid=1000 0 0</span><br><span class="line">gvfsd-fuse /run/user/1000/gvfs fuse.gvfsd-fuse rw,nosuid,nodev,relatime,user_id=1000,group_id=1000 0 0</span><br><span class="line">tmpfs /run/user/0 tmpfs rw,seclabel,nosuid,nodev,relatime,size=906448k,mode=700 0 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># こちらにもほぼ同じ情報（どのようなファイルシステムがマウントされているか）</span></span><br><span class="line">[root@localhost etc]<span class="comment"># cat /proc/mounts</span></span><br><span class="line">sysfs /sys sysfs rw,seclabel,nosuid,nodev,noexec,relatime 0 0</span><br><span class="line">proc /proc proc rw,nosuid,nodev,noexec,relatime 0 0</span><br><span class="line">devtmpfs /dev devtmpfs rw,seclabel,nosuid,size=4515168k,nr_inodes=1128792,mode=755 0 0</span><br><span class="line">securityfs /sys/kernel/security securityfs rw,nosuid,nodev,noexec,relatime 0 0</span><br><span class="line">tmpfs /dev/shm tmpfs rw,seclabel,nosuid,nodev 0 0</span><br><span class="line">devpts /dev/pts devpts rw,seclabel,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000 0 0</span><br><span class="line">tmpfs /run tmpfs rw,seclabel,nosuid,nodev,mode=755 0 0</span><br><span class="line">tmpfs /sys/fs/cgroup tmpfs ro,seclabel,nosuid,nodev,noexec,mode=755 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/systemd cgroup rw,seclabel,nosuid,nodev,noexec,relatime,xattr,release_agent=/usr/lib/systemd/systemd-cgroups-agent,name=systemd 0 0</span><br><span class="line">pstore /sys/fs/pstore pstore rw,nosuid,nodev,noexec,relatime 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/devices cgroup rw,seclabel,nosuid,nodev,noexec,relatime,devices 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/net_cls,net_prio cgroup rw,seclabel,nosuid,nodev,noexec,relatime,net_prio,net_cls 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/hugetlb cgroup rw,seclabel,nosuid,nodev,noexec,relatime,hugetlb 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/cpuset cgroup rw,seclabel,nosuid,nodev,noexec,relatime,cpuset 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/cpu,cpuacct cgroup rw,seclabel,nosuid,nodev,noexec,relatime,cpuacct,cpu 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/memory cgroup rw,seclabel,nosuid,nodev,noexec,relatime,memory 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/perf_event cgroup rw,seclabel,nosuid,nodev,noexec,relatime,perf_event 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/pids cgroup rw,seclabel,nosuid,nodev,noexec,relatime,pids 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/blkio cgroup rw,seclabel,nosuid,nodev,noexec,relatime,blkio 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/freezer cgroup rw,seclabel,nosuid,nodev,noexec,relatime,freezer 0 0</span><br><span class="line">configfs /sys/kernel/config configfs rw,relatime 0 0</span><br><span class="line">/dev/mapper/centos-root / xfs rw,seclabel,relatime,attr2,inode64,noquota 0 0</span><br><span class="line">selinuxfs /sys/fs/selinux selinuxfs rw,relatime 0 0</span><br><span class="line">systemd-1 /proc/sys/fs/binfmt_misc autofs rw,relatime,fd=22,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=10915 0 0</span><br><span class="line">debugfs /sys/kernel/debug debugfs rw,relatime 0 0</span><br><span class="line">mqueue /dev/mqueue mqueue rw,seclabel,relatime 0 0</span><br><span class="line">fusectl /sys/fs/fuse/connections fusectl rw,relatime 0 0</span><br><span class="line">hugetlbfs /dev/hugepages hugetlbfs rw,seclabel,relatime 0 0</span><br><span class="line">/dev/sda1 /boot xfs rw,seclabel,relatime,attr2,inode64,noquota 0 0</span><br><span class="line">sunrpc /var/lib/nfs/rpc_pipefs rpc_pipefs rw,relatime 0 0</span><br><span class="line">tmpfs /run/user/1000 tmpfs rw,seclabel,nosuid,nodev,relatime,size=906448k,mode=700,uid=1000,gid=1000 0 0</span><br><span class="line">gvfsd-fuse /run/user/1000/gvfs fuse.gvfsd-fuse rw,nosuid,nodev,relatime,user_id=1000,group_id=1000 0 0</span><br><span class="line">tmpfs /run/user/0 tmpfs rw,seclabel,nosuid,nodev,relatime,size=906448k,mode=700 0 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># そのため、/etc/mtabを誤って編集してしまった場合は、/proc/mountsを利用して復旧を試みることができる</span></span><br></pre></td></tr></table></figure><ul><li>マウントとアンマウント<ul><li>ファイルシステムを利用するには、任意のディレクトリをマウントポイントとしてマウントする必要がある</li><li>ファイルシステムをマウントするには<code>mount</code>コマンドを使う</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]<span class="comment"># mount</span></span><br><span class="line">sysfs on /sys <span class="built_in">type</span> sysfs (rw,nosuid,nodev,noexec,relatime,seclabel)</span><br><span class="line">proc on /proc <span class="built_in">type</span> proc (rw,nosuid,nodev,noexec,relatime)</span><br><span class="line">devtmpfs on /dev <span class="built_in">type</span> devtmpfs (rw,nosuid,seclabel,size=4515168k,nr_inodes=1128792,mode=755)</span><br><span class="line">securityfs on /sys/kernel/security <span class="built_in">type</span> securityfs (rw,nosuid,nodev,noexec,relatime)</span><br><span class="line">tmpfs on /dev/shm <span class="built_in">type</span> tmpfs (rw,nosuid,nodev,seclabel)</span><br><span class="line">devpts on /dev/pts <span class="built_in">type</span> devpts (rw,nosuid,noexec,relatime,seclabel,gid=5,mode=620,ptmxmode=000)</span><br><span class="line">tmpfs on /run <span class="built_in">type</span> tmpfs (rw,nosuid,nodev,seclabel,mode=755)</span><br><span class="line">tmpfs on /sys/fs/cgroup <span class="built_in">type</span> tmpfs (ro,nosuid,nodev,noexec,seclabel,mode=755)</span><br><span class="line">cgroup on /sys/fs/cgroup/systemd <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,xattr,release_agent=/usr/lib/systemd/systemd-cgroups-agent,name=systemd)</span><br><span class="line">pstore on /sys/fs/pstore <span class="built_in">type</span> pstore (rw,nosuid,nodev,noexec,relatime)</span><br><span class="line">cgroup on /sys/fs/cgroup/devices <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,devices)</span><br><span class="line">cgroup on /sys/fs/cgroup/net_cls,net_prio <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,net_prio,net_cls)</span><br><span class="line">cgroup on /sys/fs/cgroup/hugetlb <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,hugetlb)</span><br><span class="line">cgroup on /sys/fs/cgroup/cpuset <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,cpuset)</span><br><span class="line">cgroup on /sys/fs/cgroup/cpu,cpuacct <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,cpuacct,cpu)</span><br><span class="line">cgroup on /sys/fs/cgroup/memory <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,memory)</span><br><span class="line">cgroup on /sys/fs/cgroup/perf_event <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,perf_event)</span><br><span class="line">cgroup on /sys/fs/cgroup/pids <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,pids)</span><br><span class="line">cgroup on /sys/fs/cgroup/blkio <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,blkio)</span><br><span class="line">cgroup on /sys/fs/cgroup/freezer <span class="built_in">type</span> cgroup (rw,nosuid,nodev,noexec,relatime,seclabel,freezer)</span><br><span class="line">configfs on /sys/kernel/config <span class="built_in">type</span> configfs (rw,relatime)</span><br><span class="line">/dev/mapper/centos-root on / <span class="built_in">type</span> xfs (rw,relatime,seclabel,attr2,inode64,noquota)</span><br><span class="line">selinuxfs on /sys/fs/selinux <span class="built_in">type</span> selinuxfs (rw,relatime)</span><br><span class="line">systemd-1 on /proc/sys/fs/binfmt_misc <span class="built_in">type</span> autofs (rw,relatime,fd=22,pgrp=1,timeout=0,minproto=5,maxproto=5,direct,pipe_ino=10915)</span><br><span class="line">debugfs on /sys/kernel/debug <span class="built_in">type</span> debugfs (rw,relatime)</span><br><span class="line">mqueue on /dev/mqueue <span class="built_in">type</span> mqueue (rw,relatime,seclabel)</span><br><span class="line">fusectl on /sys/fs/fuse/connections <span class="built_in">type</span> fusectl (rw,relatime)</span><br><span class="line">hugetlbfs on /dev/hugepages <span class="built_in">type</span> hugetlbfs (rw,relatime,seclabel)</span><br><span class="line">/dev/sda1 on /boot <span class="built_in">type</span> xfs (rw,relatime,seclabel,attr2,inode64,noquota)</span><br><span class="line">sunrpc on /var/lib/nfs/rpc_pipefs <span class="built_in">type</span> rpc_pipefs (rw,relatime)</span><br><span class="line">tmpfs on /run/user/1000 <span class="built_in">type</span> tmpfs (rw,nosuid,nodev,relatime,seclabel,size=906448k,mode=700,uid=1000,gid=1000)</span><br><span class="line">gvfsd-fuse on /run/user/1000/gvfs <span class="built_in">type</span> fuse.gvfsd-fuse (rw,nosuid,nodev,relatime,user_id=1000,group_id=1000)</span><br><span class="line">tmpfs on /run/user/0 <span class="built_in">type</span> tmpfs (rw,nosuid,nodev,relatime,seclabel,size=906448k,mode=700)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># マウント</span></span><br><span class="line">mount /dev/sdb1 /data</span><br><span class="line">mount -o remount /data</span><br></pre></td></tr></table></figure><ul><li>スワップ<ul><li>スワップ領域は、ブロックデバイス上の仮想的なメモリ領域として使われます。</li><li>スワップ領域は通常、システムのインストール時に作成しますが、あとから作成することも可能</li><li>作成するには、<code>mkswap</code>コマンドを使う</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># スワップ領域作成</span></span><br><span class="line">mkswap -c /dev/sda3</span><br><span class="line"></span><br><span class="line">[root@localhost etc]<span class="comment"># dd if=/dev/zero of=/tmp/swapfile bs=1M count=500</span></span><br><span class="line">500+0 レコード入力</span><br><span class="line">500+0 レコード出力</span><br><span class="line">524288000 バイト (524 MB) コピーされました、 0.539949 秒、 971 MB/秒</span><br><span class="line">[root@localhost etc]<span class="comment"># mkswap /tmp/swapfile</span></span><br><span class="line">スワップ空間バージョン1を設定します、サイズ = 511996 KiB</span><br><span class="line">ラベルはありません, UUID=2b778452-5107-43a0-8f90-03fb310b6c19</span><br><span class="line">[root@localhost etc]<span class="comment"># chmod 600 /tmp/swapfile</span></span><br><span class="line">[root@localhost etc]<span class="comment"># ll /tmp/swapfile</span></span><br><span class="line">-rw-------. 1 root root 524288000 11月 21 18:59 /tmp/swapfile</span><br><span class="line"></span><br><span class="line">[root@localhost etc]<span class="comment"># swapon /tmp/swapfile</span></span><br><span class="line">[root@localhost etc]<span class="comment"># swapon -s</span></span><br><span class="line">Filename                                Type            Size    Used    Priority</span><br><span class="line">/dev/dm-1                               partition       839676  0       -2</span><br><span class="line">/tmp/swapfile                           file    511996  0       -3</span><br><span class="line">[root@localhost etc]<span class="comment"># cat /proc/swaps</span></span><br><span class="line">Filename                                Type            Size    Used    Priority</span><br><span class="line">/dev/dm-1                               partition       839676  0       -2</span><br><span class="line">/tmp/swapfile                           file            511996  0       -3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost etc]<span class="comment"># swapoff /tmp/swapfile</span></span><br><span class="line">[root@localhost etc]<span class="comment"># swapon -s</span></span><br><span class="line">Filename                                Type            Size    Used    Priority</span><br><span class="line">/dev/dm-1                               partition       839676  0       -2</span><br></pre></td></tr></table></figure><h3 id="2-2-ファイルシステムの作成"><a href="#2-2-ファイルシステムの作成" class="headerlink" title="2.2　ファイルシステムの作成"></a>2.2　ファイルシステムの作成</h3><ul><li><code>mkfs</code>コマンド：ファイルシステムを作成するコマンド</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ブロックデバイス確認</span></span><br><span class="line">lsblk</span><br><span class="line">[root@localhost etc]<span class="comment"># lsblk -p</span></span><br><span class="line">NAME                        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">/dev/sda                      8:0    0    8G  0 disk</span><br><span class="line">tq/dev/sda1                   8:1    0    1G  0 part /boot</span><br><span class="line">mq/dev/sda2                   8:2    0    7G  0 part</span><br><span class="line">  tq/dev/mapper/centos-root 253:0    0  6.2G  0 lvm  /</span><br><span class="line">  mq/dev/mapper/centos-swap 253:1    0  820M  0 lvm  [SWAP]</span><br><span class="line">/dev/sr0                     11:0    1 1024M  0 rom</span><br><span class="line"></span><br><span class="line"><span class="comment"># ext2/ext3/ext4ファイルシステムの作成</span></span><br><span class="line">mke2fs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mke2fsコマンドのデフォルト値</span></span><br><span class="line">[root@localhost etc]<span class="comment"># cat /etc/mke2fs.conf</span></span><br><span class="line">[defaults]</span><br><span class="line">        base_features = sparse_super,filetype,resize_inode,dir_index,ext_attr</span><br><span class="line">        default_mntopts = acl,user_xattr</span><br><span class="line">        enable_periodic_fsck = 0</span><br><span class="line">        blocksize = 4096</span><br><span class="line">        inode_size = 256</span><br><span class="line">        inode_ratio = 16384</span><br><span class="line"></span><br><span class="line">[fs_types]</span><br><span class="line">        ext3 = &#123;</span><br><span class="line">                features = has_journal</span><br><span class="line">        &#125;</span><br><span class="line">        ext4 = &#123;</span><br><span class="line">                features = has_journal,extent,huge_file,flex_bg,uninit_bg,dir_nlink,extra_isize,64bit</span><br><span class="line">                inode_size = 256</span><br><span class="line">        &#125;</span><br><span class="line">        ext4dev = &#123;</span><br><span class="line">                features = has_journal,extent,huge_file,flex_bg,uninit_bg,dir_nlink,extra_isize</span><br><span class="line">                inode_size = 256</span><br><span class="line">                options = test_fs=1</span><br><span class="line">        &#125;</span><br><span class="line">        rhel6_ext4 = &#123;</span><br><span class="line">                features = has_journal,extent,huge_file,flex_bg,uninit_bg,dir_nlink,extra_isize</span><br><span class="line">                inode_size = 256</span><br><span class="line">                enable_periodic_fsck = 1</span><br><span class="line">                default_mntopts = <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">        small = &#123;</span><br><span class="line">                blocksize = 1024</span><br><span class="line">                inode_size = 128</span><br><span class="line">                inode_ratio = 4096</span><br><span class="line">        &#125;</span><br><span class="line">        floppy = &#123;</span><br><span class="line">                blocksize = 1024</span><br><span class="line">                inode_size = 128</span><br><span class="line">                inode_ratio = 8192</span><br><span class="line">        &#125;</span><br><span class="line">        big = &#123;</span><br><span class="line">                inode_ratio = 32768</span><br><span class="line">        &#125;</span><br><span class="line">        huge = &#123;</span><br><span class="line">                inode_ratio = 65536</span><br><span class="line">        &#125;</span><br><span class="line">        news = &#123;</span><br><span class="line">                inode_ratio = 4096</span><br><span class="line">        &#125;</span><br><span class="line">        largefile = &#123;</span><br><span class="line">                inode_ratio = 1048576</span><br><span class="line">                blocksize = -1</span><br><span class="line">        &#125;</span><br><span class="line">        largefile4 = &#123;</span><br><span class="line">                inode_ratio = 4194304</span><br><span class="line">                blocksize = -1</span><br><span class="line">        &#125;</span><br><span class="line">        hurd = &#123;</span><br><span class="line">             blocksize = 4096</span><br><span class="line">             inode_size = 128</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mkfsコマンドによるファイルシステム作成</span></span><br><span class="line">mkdf -t ext3 /dev/sdc1</span><br></pre></td></tr></table></figure><ul><li>Btrfsファイルシステムの作成<ul><li>Btrfs(B-tree file system)はLinux向けの新しいファイルシステムで対象外性に優れ先進的な機能が取り込まれている<ul><li>最大ファイルサイズは16EiB</li><li>コピーオンライと</li><li>ディスク容量の効率的な使用</li><li>iノードの動的割当</li><li>ストレージプール対応</li><li>スナップショット機能</li><li>チェックサムによる完全性の保証</li><li>効率的な増分バックアップ</li><li>オンラインデフラグ</li></ul></li><li><code>mkfs.btrfs</code>コマンドを実行して作成する<ul><li><code>mkfs.btrfs /dev/sdb1 /dev/sdb2</code><ul><li>このように複数の物理ボリュームをまとめた１つの仮想的なボリュームをストレージプールと言う</li></ul></li><li><code>btrfs-convert</code>コマンドを使うと、ext2&#x2F;ext3&#x2F;ext4ファイルシステムをBtrfsに変換できる</li></ul></li></ul></li></ul><h3 id="2-3-ファイルシステムの管理"><a href="#2-3-ファイルシステムの管理" class="headerlink" title="2.3　ファイルシステムの管理"></a>2.3　ファイルシステムの管理</h3><ul><li><p>ext2&#x2F;ext3ファイルシステムはブロック単位で管理されている</p></li><li><p>ブロックには以下が存在する</p><ul><li>データブロック</li><li>iノードブロック<ul><li>どのデータブロックにどんなデータが格納されているかの情報</li><li>ファイル・タイプ、アクセス権、所有者、所有グループ、ファイルサイズ</li></ul></li><li>スーパーブロック<ul><li>ファイルシステムの全般的な情報（データブロックサイズ、マウント回数、iノードやデータブロックの数など）</li><li>スーパーブロックは非常に重要なので、ブロックグループごとにバックアップが作成される</li></ul></li></ul></li><li><p>TODO: 詳細見れていない・・</p></li></ul><h3 id="2-4-LVM"><a href="#2-4-LVM" class="headerlink" title="2.4　LVM"></a>2.4　LVM</h3><ul><li><p>LVM:論理ボリューム管理　Logical Volume Manager</p><ul><li>ディスクのパーティションを直接操作するのではなく、仮想的なパーティションである論理ボリュームを動的に管理</li><li>パーティションを使ったディスク管理に比べて次の制約を回避できる<ul><li>一度パーティションを作成するとサイズ変更ができない</li><li>別のディスクにパーティションを移動させることができない</li><li>ディスクのサイズを超える大きさのパーティションは作成できない</li></ul></li><li>★：PVがPhysical Volume(物理ボリューム)、VGがVolume Group(ボリュームグループ)、LVがLogical Volume(論理ボリューム)の略称であることを覚えておく</li></ul></li><li><p>LVMの作成</p><ul><li>物理ボリュームを用意して、パーティションタイプを「8e」(Linux LVM)に設定しておく</li><li><code>pvcreate</code>: デバイスを物理ボリュームとして初期化</li><li><code>vgcreate testvg /dev/sdd1 /dev/sde1</code>: ボリュームグループの作成</li><li><code>lvcreate -L 500M -n lv01 testvg</code>: 論理ボリュームの作成</li><li><code>lvscan</code>: 論理ボリュームの状態を完結に表示</li></ul></li><li><p>TODO: vg~~コマンドが他にも多数あるが詳細は一旦飛ばす</p></li></ul><h3 id="練習問題-1"><a href="#練習問題-1" class="headerlink" title="練習問題"></a>練習問題</h3><ul><li>2.1 カーネルがサポートしているファイルシステムの種類を確認するにはどのコマンドを実行すればよいか<ul><li><code>cat /proc/filesystems</code></li><li>その他：<ul><li><code>/etc/mtab</code>には現在マウントされているファイルシステムについての情報が格納されている</li></ul></li></ul></li><li>2.2 <code>/etc/fstab</code>で指定できるマウントオプションの説明で適切でないもの<ul><li>割愛</li></ul></li><li>2.3 <code>/etc/fstab</code>の書式として適切でないもの</li><li>2.4 <code>/mnt</code>ディレクトリにマウント下Btrfsファイルシステムの使用状況を表示したい場合<ul><li><code>btrfs filesystem df /mnt</code></li></ul></li><li>2.5 Btrfsファイルシステムのサブボリューム&#x2F;dataのスナップショットを&#x2F;mnt&#x2F;data_snapとして作成<ul><li><code>btrfs subvolume snapshot /data /mnt/data_snap</code></li></ul></li><li>2.6 USBメモリを読み取り専用でマウントしたい。マウントポイントは<code>/media/usb</code>、デバイスファイルは<code>/dev/sdb1</code>とする。ファイルシステム地アプは<code>vfat</code><ul><li><code>mount -t vfat -o ro /dev/sdb1 /media/usb</code></li></ul></li><li>2.7 現在マウントされているファイルシステムとそのオプションを知るには何というファイルを参照<ul><li><code>cat /etc/mtab</code></li></ul></li><li>2.8 ファイルシステムの種類がxfsであるファイルシステムのみをすべてアンマウントするには<ul><li><code>unmount -at xfs</code></li></ul></li><li>2.9 <code>unmount /home; mount /home</code>を実行するのと同じことを１コマンドで実行したい場合<ul><li><code>mount -o remount /home</code></li></ul></li><li>2.10 スワップ領域を<code>/dev/sda7</code>に作成するコマンドを引数とともに記述してください<ul><li><code>mkswap /dev/sda7</code></li></ul></li><li>2.11 アクティブなスワップ領域を表示するには<ul><li><code>swapon -s</code></li></ul></li><li>2.12 mkfsコマンドを使ってext4ファイルシステムを作成。その際に、予約ブロックの割合も変更する。不良ブロックのチェックも行う。必要なオプションをすべて選択<ul><li><code>-t</code>:タイプを指定</li><li><code>-c</code>:不良ブロックのチェック</li><li><code>-m</code>:root用の予約領域を指定する</li></ul></li><li>2.13 rootユーザー用予約領域が5%確保されているext4ファイルシステム<code>/dev/sda5</code>がある。この領域を0%に死体<ul><li><code>tune2fs -m 0 /dev/sda5</code></li></ul></li><li>2.14 XFSファイルシステムをバックアップするコマンド<ul><li><code>xfsdump</code></li></ul></li><li>2.15 <code>/dev/sdb1</code>を物理ボリュームとして初期化したい場合に実行するコマンド<ul><li><code>pvcreate /dev/sdb1</code></li></ul></li><li>2.16 <code>testvg</code>という名称のボリュームグループを作成したい場合。ボリュームグループを構成する物理ボリュームデバイスは<code>/dev/sdb1</code>と<code>/dev/sdc1</code><ul><li><code>vgcreate -s 32m testvg /dev/sdb1 /dev/sdc1</code></li></ul></li><li>2.17 ボリュームグループtestvg内にサイズが10Gバイトの論理ボリュームlv01を作成しようとする。<ul><li><code>lvcreate</code><ul><li>-L:サイズ</li><li>-n:論理ボリューム名</li><li>引数にはボリュームグループ名を指定する</li></ul></li></ul></li></ul><h2 id="第3章-ネットワーク構成"><a href="#第3章-ネットワーク構成" class="headerlink" title="第3章　ネットワーク構成"></a>第3章　ネットワーク構成</h2><h3 id="3-1-基本的なネットワーク構成"><a href="#3-1-基本的なネットワーク構成" class="headerlink" title="3.1　基本的なネットワーク構成"></a>3.1　基本的なネットワーク構成</h3><ul><li>ネットワークデバイスの操作<ul><li>インターフェース名：eth0,eth1,loなどがもともと</li><li>最近は、<code>enp0s3</code>などの名前が使われる</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># カーネルが認識しているネットワークデバイスを確認</span></span><br><span class="line">lspci | grep -i eth</span><br><span class="line">journalctl -b | grep -i eth | grep enp</span><br></pre></td></tr></table></figure><ul><li><code>ip</code>コマンド<ul><li>ネットワークインターフェースやルーティングテーブル、ARPテーブルなどを管理するコマンド</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># データリンク層</span></span><br><span class="line">ip link show</span><br><span class="line"><span class="comment"># IPアドレス</span></span><br><span class="line">ip addr show</span><br><span class="line"><span class="comment"># ルーティングテーブル</span></span><br><span class="line">ip route show</span><br><span class="line"><span class="comment"># ARPキャッシュ</span></span><br><span class="line">ip neigh show</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ip -s link show enp0s3</span><br><span class="line"></span><br><span class="line"><span class="comment"># add でパラメータ設定する</span></span><br><span class="line">ip addr add 192.168.11.10/24 dev enp0s3</span><br><span class="line"></span><br><span class="line"><span class="comment">#### ifconfigコマンド</span></span><br><span class="line"><span class="comment"># ipコマンド以前に広く使われていたコマンド</span></span><br><span class="line">ifconfig</span><br><span class="line">ifconfig -a</span><br><span class="line"></span><br><span class="line">ifconfig enp0s3 192.168.120.27 netmask 255.255.255.0</span><br><span class="line">ifconfig enp0s3 up</span><br><span class="line"><span class="comment"># まとめて指定も可能</span></span><br><span class="line">ifconfig enp0s3 192.168.120.27 netmask 255.255.255.0 up</span><br><span class="line"></span><br><span class="line"><span class="comment">#### ARP</span></span><br><span class="line"><span class="comment"># MACアドレスとIPアドレスを変換するプロトコル</span></span><br><span class="line"><span class="comment"># 自分のIPアドレス/MACアドレスと相手のIPアドレスが含まれたパケットをブロードキャストして、指定されたIPアドレスを持つ相手がこのパケットを受け取ると、自分のMACアドレスを返す</span></span><br><span class="line"><span class="comment"># 一度取得した情報は、ARPキャッシュと呼ばれるテーブルに一定期間キャッシュされる</span></span><br></pre></td></tr></table></figure><ul><li>無線ネットワークの設定</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iwconfig</span><br></pre></td></tr></table></figure><h3 id="3-2-高度なネットワーク設定"><a href="#3-2-高度なネットワーク設定" class="headerlink" title="3.2　高度なネットワーク設定"></a>3.2　高度なネットワーク設定</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">route</span><br><span class="line">netstat -r</span><br><span class="line"><span class="comment"># 情報は同じ物が出力される</span></span><br><span class="line"></span><br><span class="line">[root@localhost etc]<span class="comment"># netstat -r</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface</span><br><span class="line">default         buffalo.setup   0.0.0.0         UG        0 0          0 enp0s3</span><br><span class="line">192.168.11.0    0.0.0.0         255.255.255.0   U         0 0          0 enp0s3</span><br><span class="line">192.168.122.0   0.0.0.0         255.255.255.0   U         0 0          0 virbr0</span><br><span class="line">[root@localhost etc]<span class="comment"># route</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">default         buffalo.setup   0.0.0.0         UG    100    0        0 enp0s3</span><br><span class="line">192.168.11.0    0.0.0.0         255.255.255.0   U     100    0        0 enp0s3</span><br><span class="line">192.168.122.0   0.0.0.0         255.255.255.0   U     0      0        0 virbr0</span><br></pre></td></tr></table></figure><ul><li><p>基本的なネットワーク管理コマンド</p><ul><li>pingコマンド：指定されたホストにICMPパケットを贈り、その反応も表示<ul><li>オプション：<ul><li>-n:ホスト名を名前解決せずにIPアドレスで表示</li><li>-c 回数</li><li>-i 間隔：指定した間隔ごとにICMPパケットを送信</li></ul></li></ul></li><li>ping6コマンド：IPv6用コマンド</li><li>tcpdumpコマンド：指定したネットワークインターフェースを監視市、そこに到達したデータをコンソール上に表示</li><li>netstatコマンド：ネットワーク機能に関する様々な情報を表示</li><li>ssコマンド：netstatコマンドに変わるのがssコマンド</li><li>tracerouteコマンド：指定されたホストまでパケットが伝わる経路を表示<ul><li>ネットワーク経路上にICMPメッセージに返答しないホストが存在する場合などでは適切な動作は期待できない</li></ul></li><li>ncコマンド：TCP&#x2F;UDPを使ったネットワーク通信を行うシンプルなコマンド<ul><li>ポートスキャンを実施したり、通信状態を確認したりといったちょっとした操作に活用できる</li><li><code>nc localhost 25</code></li></ul></li></ul></li><li><p>NetworkManager</p><ul><li>ネットワークを管理するサブシステムとして、NetworkManagerが導入されている</li><li>稼働しているか確認：<code>systemctl status NetworkManager</code></li><li><code>nmcli</code>コマンドを使ってネットワークの設定、接続の管理、状態の確認などが可能</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nmcli</span><br><span class="line"></span><br><span class="line"><span class="comment"># NetworkManagerの状態確認</span></span><br><span class="line">nmcli general status</span><br><span class="line"></span><br><span class="line"><span class="comment"># ネットワークインターフェースの設定ファイル</span></span><br><span class="line">cat /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br></pre></td></tr></table></figure><h3 id="3-3-ネットワークの問題解決"><a href="#3-3-ネットワークの問題解決" class="headerlink" title="3.3　ネットワークの問題解決"></a>3.3　ネットワークの問題解決</h3><ul><li>ネットワーク設定情報の収集<ul><li><code>/etc/hostname</code>: ホスト名を記述</li><li><code>/etc/hosts</code>: ホスト名とIPアドレスの対応を記述</li><li><code>/etc/networks</code>: ネットワーク名とネットワークアドレスの対応が記述</li><li><code>/etc/nsswitch.conf</code>: 名前解決をする際の問い合わせ順を記述</li><li><code>/etc/resolv.conf</code>: 問い合わせ先のDNSサーバーやドメイン名を記述</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##### /etc/nsswitch.conf</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /etc/nsswitch.conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /etc/nsswitch.conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># An example Name Service Switch config file. This file should be</span></span><br><span class="line"><span class="comment"># sorted with the most-used services at the beginning.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The entry '[NOTFOUND=return]' means that the search for an</span></span><br><span class="line"><span class="comment"># entry should stop if the search in the previous entry turned</span></span><br><span class="line"><span class="comment"># up nothing. Note that if the search failed due to some other reason</span></span><br><span class="line"><span class="comment"># (like no NIS server responding) then the search continues with the</span></span><br><span class="line"><span class="comment"># next entry.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Valid entries include:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       nisplus                 Use NIS+ (NIS version 3)</span></span><br><span class="line"><span class="comment">#       nis                     Use NIS (NIS version 2), also called YP</span></span><br><span class="line"><span class="comment">#       dns                     Use DNS (Domain Name Service)</span></span><br><span class="line"><span class="comment">#       files                   Use the local files</span></span><br><span class="line"><span class="comment">#       db                      Use the local database (.db) files</span></span><br><span class="line"><span class="comment">#       compat                  Use NIS on compat mode</span></span><br><span class="line"><span class="comment">#       hesiod                  Use Hesiod for user lookups</span></span><br><span class="line"><span class="comment">#       sss                     Use sssd (System Security Services Daemon)</span></span><br><span class="line"><span class="comment">#       [NOTFOUND=return]       Stop searching if not found so far</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: Running nscd with a secondary caching service like sssd may lead to</span></span><br><span class="line"><span class="comment">#          unexpected behaviour, especially with how long entries are cached.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To use db, put the "db" in front of "files" for entries you want to be</span></span><br><span class="line"><span class="comment"># looked up first in the databases</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#passwd:    db files nisplus nis</span></span><br><span class="line"><span class="comment">#shadow:    db files nisplus nis</span></span><br><span class="line"><span class="comment">#group:     db files nisplus nis</span></span><br><span class="line"></span><br><span class="line">passwd:     files sss</span><br><span class="line">shadow:     files sss</span><br><span class="line">group:      files sss</span><br><span class="line"><span class="comment">#initgroups: files sss</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#hosts:     db files nisplus nis dns</span></span><br><span class="line">hosts:      files dns myhostname</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example - obey only what nisplus tells us...</span></span><br><span class="line"><span class="comment">#services:   nisplus [NOTFOUND=return] files</span></span><br><span class="line"><span class="comment">#networks:   nisplus [NOTFOUND=return] files</span></span><br><span class="line"><span class="comment">#protocols:  nisplus [NOTFOUND=return] files</span></span><br><span class="line"><span class="comment">#rpc:        nisplus [NOTFOUND=return] files</span></span><br><span class="line"><span class="comment">#ethers:     nisplus [NOTFOUND=return] files</span></span><br><span class="line"><span class="comment">#netmasks:   nisplus [NOTFOUND=return] files</span></span><br><span class="line"></span><br><span class="line">bootparams: nisplus [NOTFOUND=<span class="built_in">return</span>] files</span><br><span class="line"></span><br><span class="line">ethers:     files</span><br><span class="line">netmasks:   files</span><br><span class="line">networks:   files</span><br><span class="line">protocols:  files</span><br><span class="line">rpc:        files</span><br><span class="line">services:   files sss</span><br><span class="line"></span><br><span class="line">netgroup:   nisplus sss</span><br><span class="line"></span><br><span class="line">publickey:  nisplus</span><br><span class="line"></span><br><span class="line">automount:  files nisplus sss</span><br><span class="line">aliases:    files nisplus</span><br></pre></td></tr></table></figure><ul><li>ネットワークの通信経路の確認</li></ul><h3 id="練習問題-2"><a href="#練習問題-2" class="headerlink" title="練習問題"></a>練習問題</h3><ul><li><p>3.1 ARPキャッシュを表示したりエントリーを追加したりするときに利用するコマンド</p><ul><li><code>arp</code></li></ul></li><li><p>3.2 tcpdumpコマンドの出力の一部。適切な説明を選択</p><ul><li>接続元IPアドレス.ポート番号(サービス名) &gt; 接続先IPアドレス.ポート番号(サービス名)</li></ul></li><li><p>3.3 routeコマンドを実行したときの表示</p></li><li><p>3.4 routeコマンドの使い方</p><ul><li><code>route add -net 192.168.100.0 netmask 255.255.255.0 gw 172.16.100.1</code></li></ul></li><li><p>3.5 ルーティングテーブルを表示するコマンド</p><ul><li><code>route</code></li><li><code>ip route show</code></li><li><code>netstat -r</code></li></ul></li><li><p>3.6 <code>/etc/resolv.conf</code>の記述</p><ul><li>nameserver 172.16.0.1</li></ul></li><li><p>3.7 <code>www.example.com</code>に到達するまでに経由するルーター一覧を表示して経路を確認したい場合、役立つコマンド</p><ul><li><code>traceroute6</code></li><li><code>mtr</code></li></ul></li></ul><h2 id="第4章-システムの保守と運用管理"><a href="#第4章-システムの保守と運用管理" class="headerlink" title="第4章　システムの保守と運用管理"></a>第4章　システムの保守と運用管理</h2><h3 id="4-1-makeによるソースコードからのビルドとインストール"><a href="#4-1-makeによるソースコードからのビルドとインストール" class="headerlink" title="4.1　makeによるソースコードからのビルドとインストール"></a>4.1　makeによるソースコードからのビルドとインストール</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar cvf</span><br><span class="line">tar xvf</span><br><span class="line">tar tvf</span><br><span class="line">gzip</span><br><span class="line">gunzip</span><br><span class="line">bzip</span><br><span class="line">bunzip</span><br></pre></td></tr></table></figure><h3 id="4-2-バックアップ"><a href="#4-2-バックアップ" class="headerlink" title="4.2　バックアップ"></a>4.2　バックアップ</h3><ul><li><p>バックアップの種類</p><ul><li>完全バックアップ：時間がかかり容量も必要</li><li>差分バックアップ：復元にはフルバックアップと最新の差分バックアップが必要</li><li>増分バックアップ：復元にはフルバックアップとフルバックアップ以降のすべての増分バックアップが必要</li></ul></li><li><p>バックアップデバイス</p><ul><li>CD-R&#x2F;RW、リムーバブルハードディスク</li><li>DVD-R&#x2F;RW</li><li>BD-R&#x2F;RE</li><li>磁気テープ</li><li>ネットワーク</li></ul></li><li><p>ローカルでのバックアップ</p><ul><li>tar,dd,dump,restoreなどのコマンドでバックアップが可能</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OP,形式と拡張子</span></span><br><span class="line"><span class="comment"># -j bzip -&gt; bz2</span></span><br><span class="line"><span class="comment"># -z gzip -&gt; gz</span></span><br><span class="line"><span class="comment"># -J xz - xz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># このコマンドをあわせて使う使い方は必要に応じて調べるで良さそう</span></span><br><span class="line">dump</span><br><span class="line">restore</span><br><span class="line"></span><br><span class="line"><span class="comment"># テープドライブを操作するコマンド</span></span><br><span class="line">mt</span><br><span class="line"></span><br><span class="line"><span class="comment"># ネットワーク経由でのバックアップ</span></span><br><span class="line">rsync</span><br></pre></td></tr></table></figure><h3 id="4-3-ユーザーへのシステム管理情報の通知"><a href="#4-3-ユーザーへのシステム管理情報の通知" class="headerlink" title="4.3　ユーザーへのシステム管理情報の通知"></a>4.3　ユーザーへのシステム管理情報の通知</h3><ul><li><p>ログイン前後のメッセージ</p><ul><li><code>/etc/issue</code>: 接続前に表示されるメッセージ　telnet接続だと表示される sshだとログイン前メッセージが表示されない（Teratermとコマンドプロンプト）</li><li><code>/etc/issue.net</code>: 接続前に表示されるメッセージ　telnet接続だと表示される  sshだとログイン前メッセージが表示されない（Teratermとコマンドプロンプト）</li><li><code>/etc/motd</code>: 接続後に表示されるメッセージ</li></ul></li><li><p>ログイン中のユーザへの通知</p><ul><li><code>wall &quot;message&quot;</code></li><li><code>shutdown -k now &quot;message&quot;</code></li></ul></li><li><p><a href="https://qiita.com/montblanc18/items/8b4fd2cf150913c6e1c2">https://qiita.com/montblanc18/items/8b4fd2cf150913c6e1c2</a></p><ul><li>telnetを有効にする方法で参考</li></ul></li></ul><h3 id="4-4-リソース使用状況の把握"><a href="#4-4-リソース使用状況の把握" class="headerlink" title="4.4　リソース使用状況の把握"></a>4.4　リソース使用状況の把握</h3><ul><li><p>CPU使用率やメモリの状況など、システムリソースを総合的に確認できるツール</p><ul><li><code>top</code></li><li><code>vmstat</code></li></ul></li><li><p>EPELリポジトリ epelリポジトリを追加方法</p><ul><li><a href="https://linuc.spa-miz.com/2020/10/13/installing-htop-centos/">https://linuc.spa-miz.com/2020/10/13/installing-htop-centos/</a></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">top</span><br><span class="line">htop</span><br><span class="line">vmstat</span><br><span class="line">iostat</span><br><span class="line">iotop</span><br><span class="line">sar</span><br><span class="line">uptime <span class="comment"># システムの稼働時間やログインユーザー数、平均負荷などが表示される。topコマンドの１行目とほぼ同じ</span></span><br><span class="line">w <span class="comment"># 現在ログインしているユーザと各ユーザのプロセス情報が表示される</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CPU使用率の測定</span></span><br><span class="line">ps</span><br><span class="line">ps aux: システムで使用されているすべてのプロセスを表示</span><br><span class="line"></span><br><span class="line"><span class="comment"># 開いているファイルやポートの確認</span></span><br><span class="line">lsof</span><br><span class="line"><span class="comment"># /var/log/messagesファイルを開いているプロセスを検索</span></span><br><span class="line">[root@localhost top]<span class="comment"># lsof /var/log/messages</span></span><br><span class="line">COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME</span><br><span class="line">abrt-watc  914 root    4r   REG  253,0   718793 10468097 /var/<span class="built_in">log</span>/messages</span><br><span class="line">rsyslogd  1338 root    7w   REG  253,0   718793 10468097 /var/<span class="built_in">log</span>/messages</span><br><span class="line"><span class="comment"># プロセス名が開いているファイルを表示</span></span><br><span class="line">[root@localhost top]<span class="comment"># lsof -p `pidof rsyslogd`</span></span><br><span class="line">COMMAND   PID USER   FD      TYPE             DEVICE SIZE/OFF     NODE NAME</span><br><span class="line">rsyslogd 1338 root  cwd       DIR              253,0      224       64 /</span><br><span class="line">rsyslogd 1338 root  rtd       DIR              253,0      224       64 /</span><br><span class="line">rsyslogd 1338 root  txt       REG              253,0   663976  3172893 /usr/sbin/rsyslogd</span><br><span class="line">rsyslogd 1338 root  mem       REG               0,19  8388608     8307 /run/<span class="built_in">log</span>/journal/4f887155365a419b9cb02e497221d5a4/system.journal</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0    68192   176358 /usr/lib64/libbz2.so.1.0.6</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0    99944   176516 /usr/lib64/libelf-0.176.so</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0   402384   383771 /usr/lib64/libpcre.so.1.2.0</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0    19896   176626 /usr/lib64/libattr.so.1.1.0</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0   338672  1300052 /usr/lib64/libdw-0.176.so</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0   109976   383691 /usr/lib64/libresolv-2.17.so</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0    19384   176460 /usr/lib64/libgpg-error.so.0.10.0</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0   535064   176472 /usr/lib64/libgcrypt.so.11.8.2</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0    61752   270256 /usr/lib64/liblz4.so.1.8.3</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0   157424   176353 /usr/lib64/liblzma.so.5.2.2</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0   155744   176263 /usr/lib64/libselinux.so.1</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0  1136944   383671 /usr/lib64/libm-2.17.so</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0    20048   176631 /usr/lib64/libcap.so.2.22</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0   203688  1300065 /usr/lib64/libsystemd.so.0.6.0</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0    25024  5817422 /usr/lib64/rsyslog/imjournal.so</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0    38048  5817429 /usr/lib64/rsyslog/imuxsock.so</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0    24432  5817430 /usr/lib64/rsyslog/lmnet.so</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0  2156272   383663 /usr/lib64/libc-2.17.so</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0    88720       85 /usr/lib64/libgcc_s-4.8.5-20150702.so.1</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0    20064   176270 /usr/lib64/libuuid.so.1.3.0</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0    40896  1245966 /usr/lib64/libfastjson.so.4.0.0</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0    15424  1299766 /usr/lib64/libestr.so.0.0.0</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0    43712   383693 /usr/lib64/librt-2.17.so</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0    19248   383669 /usr/lib64/libdl-2.17.so</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0   142144   383689 /usr/lib64/libpthread-2.17.so</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0    90248   176266 /usr/lib64/libz.so.1.2.7</span><br><span class="line">rsyslogd 1338 root  mem       REG              253,0   163312   383656 /usr/lib64/ld-2.17.so</span><br><span class="line">rsyslogd 1338 root    0r      CHR                1,3      0t0     1028 /dev/null</span><br><span class="line">rsyslogd 1338 root    1w      CHR                1,3      0t0     1028 /dev/null</span><br><span class="line">rsyslogd 1338 root    2w      CHR                1,3      0t0     1028 /dev/null</span><br><span class="line">rsyslogd 1338 root    3r  a_inode               0,10        0     6415 inotify</span><br><span class="line">rsyslogd 1338 root    4u     unix 0xffff8e7135db5940      0t0    23333 socket</span><br><span class="line">rsyslogd 1338 root    5r      REG               0,19  8388608     8307 /run/<span class="built_in">log</span>/journal/4f887155365a419b9cb02e497221d5a4/system.journal</span><br><span class="line">rsyslogd 1338 root    6w      REG              253,0    18803  8671877 /var/<span class="built_in">log</span>/cron</span><br><span class="line">rsyslogd 1338 root    7w      REG              253,0   718793 10468097 /var/<span class="built_in">log</span>/messages</span><br><span class="line">rsyslogd 1338 root    8w      REG              253,0    20795 10468098 /var/<span class="built_in">log</span>/secure</span><br><span class="line">rsyslogd 1338 root    9w      REG              253,0     1639 10468099 /var/<span class="built_in">log</span>/maillog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### メモリ及びスワップ使用量の測定</span></span><br><span class="line"><span class="comment"># メモリ使用率を測定するには、先に上げたtop,sadc/sarコマンドなどが利用できる他freeコマンドも利用できる</span></span><br><span class="line"><span class="comment"># Linuxは、使われていない物理メモリをできるだけキャッシュに割り当てようとします。</span></span><br><span class="line"><span class="comment"># そのため、Linuxの起動時間が長くなればなるほど、Mem行のfree列の値は小さくなっていきます。</span></span><br><span class="line"><span class="comment"># その値が小さくても、キャッシュに割り当てられているサイズが大きいのであれば、実際にメモリが足りないわけではない、ということに注意してください。</span></span><br><span class="line"><span class="comment"># available列を見ると、おおよその利用可能なメモリ量がわかります。スワップはディスクの一部を仮想的なメモリとして利用する機能です。</span></span><br><span class="line"><span class="comment"># システムの物理メモリが不足するとスワップが行われます。スワップ領域が継続的に使われるようであれば、システムのパフォーマンスが低下します。</span></span><br><span class="line"><span class="comment"># そのため、システムが利用しているメモリ量を把握することは必要です。前記の例ではスワップは利用されていませんが、スワップが頻繁に利用されるようなら、</span></span><br><span class="line"><span class="comment"># 不要なサービスを停止させるか、メモリの増設を検討する必要があります。freeコマンド以上に詳細なメモリの情報を得るには、/proc/meminfoを参照します。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### ディスク使用量の測定</span></span><br><span class="line">df</span><br><span class="line"></span><br><span class="line"><span class="comment">### ネットワークトラフィックの測定</span></span><br><span class="line">netstat -s</span><br><span class="line">ss -s</span><br><span class="line"></span><br><span class="line">netserver</span><br><span class="line">netperf</span><br><span class="line">iptables</span><br><span class="line">iftop</span><br><span class="line"></span><br><span class="line"><span class="comment"># この辺詳細ちょっとおいきれてないので後で振り返り</span></span><br></pre></td></tr></table></figure><h3 id="4-5-死活監視と運用監視ツール"><a href="#4-5-死活監視と運用監視ツール" class="headerlink" title="4.5　死活監視と運用監視ツール"></a>4.5　死活監視と運用監視ツール</h3><ul><li><p>リソースの枯渇</p><ul><li>スラッシング：アプリが使うメモリ領域が肥大し、空きメモリがなくなるとメモリの一部がスワップ領域に移されその分のメモリが開放される<ul><li>さらにメモリ不足が継続すると、スワップ領域への対比が頻発市、システムの動作が大幅に遅くなってしまうこと</li></ul></li></ul></li><li><p>システムの過負荷</p></li><li><p>サービスの以上</p></li><li><p>OOMKiller</p><ul><li><code>cat /proc/sys/vm/panic_on_oom</code>これが0であればOOM Killerは動作しない、1であれば動作する</li><li>真っ先にOOM Killerに強制終了されるプロセスはdstatコマンドで調べることができる</li><li><code>dstat --top-oom</code></li><li><code>pidof python2</code> dstatコマンドで出力されるのはこの値が最も高いプロセス</li><li>強制終了の優先度を変更するには、<code>/proc/PID/oom_adj</code>ファイルに値を書き込む</li></ul></li><li><p>監視作業</p><ul><li>死活監視</li><li>リソース監視</li><li>ログ監視<ul><li><code>swatch</code>: simple log watcherが古くから使われている</li></ul></li></ul></li><li><p>SNMP: ネットワーク上のサーバーやネットワーク機器を監視できるプロトコル</p><ul><li>SNMPマネージャ：監視する側</li><li>SNMPエージェント：監視される側</li><li>監視の仕組み：<ul><li>SNMPマネージャ側からSNMPエージェント側に情報を求める（ポーリング）</li><li>SNMPエージェント側からSNMPマネージャ側に通知する<ul><li>ポーリングには、SNMPエージェント側のUDP161ポート、SNMPマネージャ側のUDP162ポートが使われる</li></ul></li></ul></li></ul></li><li><p>システム運用監視ツール</p><ul><li>collectd: システムの各種情報を定期的に収集する軽量なデーモン</li><li>Nagios</li><li>MRTG (Multi Router Traffic Grapher)</li><li>Cacti</li><li>Icinga2</li><li>Zabbix</li></ul></li></ul><h3 id="4-6-システム構成ツール"><a href="#4-6-システム構成ツール" class="headerlink" title="4.6　システム構成ツール"></a>4.6　システム構成ツール</h3><ul><li><p>Ansibleの概要</p><ul><li>YAML形式のテキストファイルで設定</li><li>Pythonが動けば使える</li></ul></li><li><p>コントロールノードとターゲットノード</p><ul><li>コントロールノード：システム構成処理の指示を出すホスト</li><li>ターゲットノード：コントロールノードによってシステム構成処理が実行されるホスト</li></ul></li><li><p>インベントリとPlaybook</p><ul><li>インベントリ:<ul><li>ターゲットノードのリストが記述される</li><li>複数のターゲットノードをまとめたグループも設定できる</li></ul></li><li>Playbook:<ul><li>ターゲットノードで実施するシステム構成処理が記述される</li></ul></li></ul></li><li><p>モジュール: Ansibleの構成管理機能を実現するため、数多くのモジュールが提供されている</p></li><li><p>Ansibleの基本的な設定</p><ul><li><code>/etc/ansible/ansible.cfg</code></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 1340]<span class="comment"># cat /etc/ansible/ansible.cfg</span></span><br><span class="line"><span class="comment"># config file for ansible -- https://ansible.com/</span></span><br><span class="line"><span class="comment"># ===============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nearly all parameters can be overridden in ansible-playbook</span></span><br><span class="line"><span class="comment"># or with command line flags. ansible will read ANSIBLE_CONFIG,</span></span><br><span class="line"><span class="comment"># ansible.cfg in the current working directory, .ansible.cfg in</span></span><br><span class="line"><span class="comment"># the home directory or /etc/ansible/ansible.cfg, whichever it</span></span><br><span class="line"><span class="comment"># finds first</span></span><br><span class="line"></span><br><span class="line">[defaults]</span><br><span class="line"></span><br><span class="line"><span class="comment"># some basic default values...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#inventory      = /etc/ansible/hosts</span></span><br><span class="line"><span class="comment">#library        = /usr/share/my_modules/</span></span><br><span class="line"><span class="comment">#module_utils   = /usr/share/my_module_utils/</span></span><br><span class="line"><span class="comment">#remote_tmp     = ~/.ansible/tmp</span></span><br><span class="line"><span class="comment">#local_tmp      = ~/.ansible/tmp</span></span><br><span class="line"><span class="comment">#plugin_filters_cfg = /etc/ansible/plugin_filters.yml</span></span><br><span class="line"><span class="comment">#forks          = 5</span></span><br><span class="line"><span class="comment">#poll_interval  = 15</span></span><br><span class="line"><span class="comment">#sudo_user      = root</span></span><br><span class="line"><span class="comment">#ask_sudo_pass = True</span></span><br><span class="line"><span class="comment">#ask_pass      = True</span></span><br><span class="line"><span class="comment">#transport      = smart</span></span><br><span class="line"><span class="comment">#remote_port    = 22</span></span><br><span class="line"><span class="comment">#module_lang    = C</span></span><br><span class="line"><span class="comment">#module_set_locale = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># plays will gather facts by default, which contain information about</span></span><br><span class="line"><span class="comment"># the remote system.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># smart - gather by default, but don't regather if already gathered</span></span><br><span class="line"><span class="comment"># implicit - gather by default, turn off with gather_facts: False</span></span><br><span class="line"><span class="comment"># explicit - do not gather by default, must say gather_facts: True</span></span><br><span class="line"><span class="comment">#gathering = implicit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This only affects the gathering done by a play's gather_facts directive,</span></span><br><span class="line"><span class="comment"># by default gathering retrieves all facts subsets</span></span><br><span class="line"><span class="comment"># all - gather all subsets</span></span><br><span class="line"><span class="comment"># network - gather min and network facts</span></span><br><span class="line"><span class="comment"># hardware - gather hardware facts (longest facts to retrieve)</span></span><br><span class="line"><span class="comment"># virtual - gather min and virtual facts</span></span><br><span class="line"><span class="comment"># facter - import facts from facter</span></span><br><span class="line"><span class="comment"># ohai - import facts from ohai</span></span><br><span class="line"><span class="comment"># You can combine them using comma (ex: network,virtual)</span></span><br><span class="line"><span class="comment"># You can negate them using ! (ex: !hardware,!facter,!ohai)</span></span><br><span class="line"><span class="comment"># A minimal set of facts is always gathered.</span></span><br><span class="line"><span class="comment">#gather_subset = all</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># some hardware related facts are collected</span></span><br><span class="line"><span class="comment"># with a maximum timeout of 10 seconds. This</span></span><br><span class="line"><span class="comment"># option lets you increase or decrease that</span></span><br><span class="line"><span class="comment"># timeout to something more suitable for the</span></span><br><span class="line"><span class="comment"># environment.</span></span><br><span class="line"><span class="comment"># gather_timeout = 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ansible facts are available inside the ansible_facts.* dictionary</span></span><br><span class="line"><span class="comment"># namespace. This setting maintains the behaviour which was the default prior</span></span><br><span class="line"><span class="comment"># to 2.5, duplicating these variables into the main namespace, each with a</span></span><br><span class="line"><span class="comment"># prefix of 'ansible_'.</span></span><br><span class="line"><span class="comment"># This variable is set to True by default for backwards compatibility. It</span></span><br><span class="line"><span class="comment"># will be changed to a default of 'False' in a future release.</span></span><br><span class="line"><span class="comment"># ansible_facts.</span></span><br><span class="line"><span class="comment"># inject_facts_as_vars = True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># additional paths to search for roles in, colon separated</span></span><br><span class="line"><span class="comment">#roles_path    = /etc/ansible/roles</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment this to disable SSH key host checking</span></span><br><span class="line"><span class="comment">#host_key_checking = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># change the default callback, you can only have one 'stdout' type  enabled at a time.</span></span><br><span class="line"><span class="comment">#stdout_callback = skippy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Ansible ships with some plugins that require whitelisting,</span></span><br><span class="line"><span class="comment">## this is done to avoid running all of a type by default.</span></span><br><span class="line"><span class="comment">## These setting lists those that you want enabled for your system.</span></span><br><span class="line"><span class="comment">## Custom plugins should not need this unless plugin author specifies it.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enable callback plugins, they can output to stdout but cannot be 'stdout' type.</span></span><br><span class="line"><span class="comment">#callback_whitelist = timer, mail</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Determine whether includes in tasks and handlers are "static" by</span></span><br><span class="line"><span class="comment"># default. As of 2.0, includes are dynamic by default. Setting these</span></span><br><span class="line"><span class="comment"># values to True will make includes behave more like they did in the</span></span><br><span class="line"><span class="comment"># 1.x versions.</span></span><br><span class="line"><span class="comment">#task_includes_static = False</span></span><br><span class="line"><span class="comment">#handler_includes_static = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls if a missing handler for a notification event is an error or a warning</span></span><br><span class="line"><span class="comment">#error_on_missing_handler = True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># change this for alternative sudo implementations</span></span><br><span class="line"><span class="comment">#sudo_exe = sudo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># What flags to pass to sudo</span></span><br><span class="line"><span class="comment"># WARNING: leaving out the defaults might create unexpected behaviours</span></span><br><span class="line"><span class="comment">#sudo_flags = -H -S -n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SSH timeout</span></span><br><span class="line"><span class="comment">#timeout = 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># default user to use for playbooks if user is not specified</span></span><br><span class="line"><span class="comment"># (/usr/bin/ansible will use current user as default)</span></span><br><span class="line"><span class="comment">#remote_user = root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># logging is off by default unless this path is defined</span></span><br><span class="line"><span class="comment"># if so defined, consider logrotate</span></span><br><span class="line"><span class="comment">#log_path = /var/log/ansible.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># default module name for /usr/bin/ansible</span></span><br><span class="line"><span class="comment">#module_name = command</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use this shell for commands executed under sudo</span></span><br><span class="line"><span class="comment"># you may need to change this to bin/bash in rare instances</span></span><br><span class="line"><span class="comment"># if sudo is constrained</span></span><br><span class="line"><span class="comment">#executable = /bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if inventory variables overlap, does the higher precedence one win</span></span><br><span class="line"><span class="comment"># or are hash values merged together?  The default is 'replace' but</span></span><br><span class="line"><span class="comment"># this can also be set to 'merge'.</span></span><br><span class="line"><span class="comment">#hash_behaviour = replace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># by default, variables from roles will be visible in the global variable</span></span><br><span class="line"><span class="comment"># scope. To prevent this, the following option can be enabled, and only</span></span><br><span class="line"><span class="comment"># tasks and handlers within the role will see the variables there</span></span><br><span class="line"><span class="comment">#private_role_vars = yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list any Jinja2 extensions to enable here:</span></span><br><span class="line"><span class="comment">#jinja2_extensions = jinja2.ext.do,jinja2.ext.i18n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if set, always use this private key file for authentication, same as</span></span><br><span class="line"><span class="comment"># if passing --private-key to ansible or ansible-playbook</span></span><br><span class="line"><span class="comment">#private_key_file = /path/to/file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If set, configures the path to the Vault password file as an alternative to</span></span><br><span class="line"><span class="comment"># specifying --vault-password-file on the command line.</span></span><br><span class="line"><span class="comment">#vault_password_file = /path/to/vault_password_file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># format of string &#123;&#123; ansible_managed &#125;&#125; available within Jinja2</span></span><br><span class="line"><span class="comment"># templates indicates to users editing templates files will be replaced.</span></span><br><span class="line"><span class="comment"># replacing &#123;file&#125;, &#123;host&#125; and &#123;uid&#125; and strftime codes with proper values.</span></span><br><span class="line"><span class="comment">#ansible_managed = Ansible managed: &#123;file&#125; modified on %Y-%m-%d %H:%M:%S by &#123;uid&#125; on &#123;host&#125;</span></span><br><span class="line"><span class="comment"># &#123;file&#125;, &#123;host&#125;, &#123;uid&#125;, and the timestamp can all interfere with idempotence</span></span><br><span class="line"><span class="comment"># in some situations so the default is a static string:</span></span><br><span class="line"><span class="comment">#ansible_managed = Ansible managed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># by default, ansible-playbook will display "Skipping [host]" if it determines a task</span></span><br><span class="line"><span class="comment"># should not be run on a host.  Set this to "False" if you don't want to see these "Skipping"</span></span><br><span class="line"><span class="comment"># messages. <span class="doctag">NOTE:</span> the task header will still be shown regardless of whether or not the</span></span><br><span class="line"><span class="comment"># task is skipped.</span></span><br><span class="line"><span class="comment">#display_skipped_hosts = True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># by default, if a task in a playbook does not include a name: field then</span></span><br><span class="line"><span class="comment"># ansible-playbook will construct a header that includes the task's action but</span></span><br><span class="line"><span class="comment"># not the task's args.  This is a security feature because ansible cannot know</span></span><br><span class="line"><span class="comment"># if the *module* considers an argument to be no_log at the time that the</span></span><br><span class="line"><span class="comment"># header is printed.  If your environment doesn't have a problem securing</span></span><br><span class="line"><span class="comment"># stdout from ansible-playbook (or you have manually specified no_log in your</span></span><br><span class="line"><span class="comment"># playbook on all of the tasks where you have secret information) then you can</span></span><br><span class="line"><span class="comment"># safely set this to True to get more informative messages.</span></span><br><span class="line"><span class="comment">#display_args_to_stdout = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># by default (as of 1.3), Ansible will raise errors when attempting to dereference</span></span><br><span class="line"><span class="comment"># Jinja2 variables that are not set in templates or action lines. Uncomment this line</span></span><br><span class="line"><span class="comment"># to revert the behavior to pre-1.3.</span></span><br><span class="line"><span class="comment">#error_on_undefined_vars = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># by default (as of 1.6), Ansible may display warnings based on the configuration of the</span></span><br><span class="line"><span class="comment"># system running ansible itself. This may include warnings about 3rd party packages or</span></span><br><span class="line"><span class="comment"># other conditions that should be resolved if possible.</span></span><br><span class="line"><span class="comment"># to disable these warnings, set the following value to False:</span></span><br><span class="line"><span class="comment">#system_warnings = True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># by default (as of 1.4), Ansible may display deprecation warnings for language</span></span><br><span class="line"><span class="comment"># features that should no longer be used and will be removed in future versions.</span></span><br><span class="line"><span class="comment"># to disable these warnings, set the following value to False:</span></span><br><span class="line"><span class="comment">#deprecation_warnings = True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (as of 1.8), Ansible can optionally warn when usage of the shell and</span></span><br><span class="line"><span class="comment"># command module appear to be simplified by using a default Ansible module</span></span><br><span class="line"><span class="comment"># instead.  These warnings can be silenced by adjusting the following</span></span><br><span class="line"><span class="comment"># setting or adding warn=yes or warn=no to the end of the command line</span></span><br><span class="line"><span class="comment"># parameter string.  This will for example suggest using the git module</span></span><br><span class="line"><span class="comment"># instead of shelling out to the git command.</span></span><br><span class="line"><span class="comment"># command_warnings = False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># set plugin path directories here, separate with colons</span></span><br><span class="line"><span class="comment">#action_plugins     = /usr/share/ansible/plugins/action</span></span><br><span class="line"><span class="comment">#become_plugins     = /usr/share/ansible/plugins/become</span></span><br><span class="line"><span class="comment">#cache_plugins      = /usr/share/ansible/plugins/cache</span></span><br><span class="line"><span class="comment">#callback_plugins   = /usr/share/ansible/plugins/callback</span></span><br><span class="line"><span class="comment">#connection_plugins = /usr/share/ansible/plugins/connection</span></span><br><span class="line"><span class="comment">#lookup_plugins     = /usr/share/ansible/plugins/lookup</span></span><br><span class="line"><span class="comment">#inventory_plugins  = /usr/share/ansible/plugins/inventory</span></span><br><span class="line"><span class="comment">#vars_plugins       = /usr/share/ansible/plugins/vars</span></span><br><span class="line"><span class="comment">#filter_plugins     = /usr/share/ansible/plugins/filter</span></span><br><span class="line"><span class="comment">#test_plugins       = /usr/share/ansible/plugins/test</span></span><br><span class="line"><span class="comment">#terminal_plugins   = /usr/share/ansible/plugins/terminal</span></span><br><span class="line"><span class="comment">#strategy_plugins   = /usr/share/ansible/plugins/strategy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># by default, ansible will use the 'linear' strategy but you may want to try</span></span><br><span class="line"><span class="comment"># another one</span></span><br><span class="line"><span class="comment">#strategy = free</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># by default callbacks are not loaded for /bin/ansible, enable this if you</span></span><br><span class="line"><span class="comment"># want, for example, a notification or logging callback to also apply to</span></span><br><span class="line"><span class="comment"># /bin/ansible runs</span></span><br><span class="line"><span class="comment">#bin_ansible_callbacks = False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># don't like cows?  that's unfortunate.</span></span><br><span class="line"><span class="comment"># set to 1 if you don't want cowsay support or export ANSIBLE_NOCOWS=1</span></span><br><span class="line"><span class="comment">#nocows = 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set which cowsay stencil you'd like to use by default. When set to 'random',</span></span><br><span class="line"><span class="comment"># a random stencil will be selected for each task. The selection will be filtered</span></span><br><span class="line"><span class="comment"># against the `cow_whitelist` option below.</span></span><br><span class="line"><span class="comment">#cow_selection = default</span></span><br><span class="line"><span class="comment">#cow_selection = random</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># when using the 'random' option for cowsay, stencils will be restricted to this list.</span></span><br><span class="line"><span class="comment"># it should be formatted as a comma-separated list with no spaces between names.</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> line continuations here are for formatting purposes only, as the INI parser</span></span><br><span class="line"><span class="comment">#       in python does not support them.</span></span><br><span class="line"><span class="comment">#cow_whitelist=bud-frogs,bunny,cheese,daemon,default,dragon,elephant-in-snake,elephant,eyes,\</span></span><br><span class="line"><span class="comment">#              hellokitty,kitty,luke-koala,meow,milk,moofasa,moose,ren,sheep,small,stegosaurus,\</span></span><br><span class="line"><span class="comment">#              stimpy,supermilker,three-eyes,turkey,turtle,tux,udder,vader-koala,vader,www</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># don't like colors either?</span></span><br><span class="line"><span class="comment"># set to 1 if you don't want colors, or export ANSIBLE_NOCOLOR=1</span></span><br><span class="line"><span class="comment">#nocolor = 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if set to a persistent type (not 'memory', for example 'redis') fact values</span></span><br><span class="line"><span class="comment"># from previous runs in Ansible will be stored.  This may be useful when</span></span><br><span class="line"><span class="comment"># wanting to use, for example, IP information from one group of servers</span></span><br><span class="line"><span class="comment"># without having to talk to them in the same playbook run to get their</span></span><br><span class="line"><span class="comment"># current IP information.</span></span><br><span class="line"><span class="comment">#fact_caching = memory</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#This option tells Ansible where to cache facts. The value is plugin dependent.</span></span><br><span class="line"><span class="comment">#For the jsonfile plugin, it should be a path to a local directory.</span></span><br><span class="line"><span class="comment">#For the redis plugin, the value is a host:port:database triplet: fact_caching_connection = localhost:6379:0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#fact_caching_connection=/tmp</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># retry files</span></span><br><span class="line"><span class="comment"># When a playbook fails a .retry file can be created that will be placed in ~/</span></span><br><span class="line"><span class="comment"># You can enable this feature by setting retry_files_enabled to True</span></span><br><span class="line"><span class="comment"># and you can change the location of the files by setting retry_files_save_path</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#retry_files_enabled = False</span></span><br><span class="line"><span class="comment">#retry_files_save_path = ~/.ansible-retry</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># squash actions</span></span><br><span class="line"><span class="comment"># Ansible can optimise actions that call modules with list parameters</span></span><br><span class="line"><span class="comment"># when looping. Instead of calling the module once per with_ item, the</span></span><br><span class="line"><span class="comment"># module is called once with all items at once. Currently this only works</span></span><br><span class="line"><span class="comment"># under limited circumstances, and only with parameters named 'name'.</span></span><br><span class="line"><span class="comment">#squash_actions = apk,apt,dnf,homebrew,pacman,pkgng,yum,zypper</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># prevents logging of task data, off by default</span></span><br><span class="line"><span class="comment">#no_log = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># prevents logging of tasks, but only on the targets, data is still logged on the master/controller</span></span><br><span class="line"><span class="comment">#no_target_syslog = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># controls whether Ansible will raise an error or warning if a task has no</span></span><br><span class="line"><span class="comment"># choice but to create world readable temporary files to execute a module on</span></span><br><span class="line"><span class="comment"># the remote machine.  This option is False by default for security.  Users may</span></span><br><span class="line"><span class="comment"># turn this on to have behaviour more like Ansible prior to 2.1.x.  See</span></span><br><span class="line"><span class="comment"># https://docs.ansible.com/ansible/become.html#becoming-an-unprivileged-user</span></span><br><span class="line"><span class="comment"># for more secure ways to fix this than enabling this option.</span></span><br><span class="line"><span class="comment">#allow_world_readable_tmpfiles = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># controls the compression level of variables sent to</span></span><br><span class="line"><span class="comment"># worker processes. At the default of 0, no compression</span></span><br><span class="line"><span class="comment"># is used. This value must be an integer from 0 to 9.</span></span><br><span class="line"><span class="comment">#var_compression_level = 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># controls what compression method is used for new-style ansible modules when</span></span><br><span class="line"><span class="comment"># they are sent to the remote system.  The compression types depend on having</span></span><br><span class="line"><span class="comment"># support compiled into both the controller's python and the client's python.</span></span><br><span class="line"><span class="comment"># The names should match with the python Zipfile compression types:</span></span><br><span class="line"><span class="comment"># * ZIP_STORED (no compression. available everywhere)</span></span><br><span class="line"><span class="comment"># * ZIP_DEFLATED (uses zlib, the default)</span></span><br><span class="line"><span class="comment"># These values may be set per host via the ansible_module_compression inventory</span></span><br><span class="line"><span class="comment"># variable</span></span><br><span class="line"><span class="comment">#module_compression = 'ZIP_DEFLATED'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This controls the cutoff point (in bytes) on --diff for files</span></span><br><span class="line"><span class="comment"># set to 0 for unlimited (RAM may suffer!).</span></span><br><span class="line"><span class="comment">#max_diff_size = 1048576</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This controls how ansible handles multiple --tags and --skip-tags arguments</span></span><br><span class="line"><span class="comment"># on the CLI.  If this is True then multiple arguments are merged together.  If</span></span><br><span class="line"><span class="comment"># it is False, then the last specified argument is used and the others are ignored.</span></span><br><span class="line"><span class="comment"># This option will be removed in 2.8.</span></span><br><span class="line"><span class="comment">#merge_multiple_cli_flags = True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls showing custom stats at the end, off by default</span></span><br><span class="line"><span class="comment">#show_custom_stats = True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls which files to ignore when using a directory as inventory with</span></span><br><span class="line"><span class="comment"># possibly multiple sources (both static and dynamic)</span></span><br><span class="line"><span class="comment">#inventory_ignore_extensions = ~, .orig, .bak, .ini, .cfg, .retry, .pyc, .pyo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This family of modules use an alternative execution path optimized for network appliances</span></span><br><span class="line"><span class="comment"># only update this setting if you know how this works, otherwise it can break module execution</span></span><br><span class="line"><span class="comment">#network_group_modules=eos, nxos, ios, iosxr, junos, vyos</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When enabled, this option allows lookups (via variables like &#123;&#123;lookup('foo')&#125;&#125; or when used as</span></span><br><span class="line"><span class="comment"># a loop with `with_foo`) to return data that is not marked "unsafe". This means the data may contain</span></span><br><span class="line"><span class="comment"># jinja2 templating language which will be run through the templating engine.</span></span><br><span class="line"><span class="comment"># ENABLING THIS COULD BE A SECURITY RISK</span></span><br><span class="line"><span class="comment">#allow_unsafe_lookups = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set default errors for all plays</span></span><br><span class="line"><span class="comment">#any_errors_fatal = False</span></span><br><span class="line"></span><br><span class="line">[inventory]</span><br><span class="line"><span class="comment"># enable inventory plugins, default: 'host_list', 'script', 'auto', 'yaml', 'ini', 'toml'</span></span><br><span class="line"><span class="comment">#enable_plugins = host_list, virtualbox, yaml, constructed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ignore these extensions when parsing a directory as inventory source</span></span><br><span class="line"><span class="comment">#ignore_extensions = .pyc, .pyo, .swp, .bak, ~, .rpm, .md, .txt, ~, .orig, .ini, .cfg, .retry</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ignore files matching these patterns when parsing a directory as inventory source</span></span><br><span class="line"><span class="comment">#ignore_patterns=</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If 'true' unparsed inventory sources become fatal errors, they are warnings otherwise.</span></span><br><span class="line"><span class="comment">#unparsed_is_failed=False</span></span><br><span class="line"></span><br><span class="line">[privilege_escalation]</span><br><span class="line"><span class="comment">#become=True</span></span><br><span class="line"><span class="comment">#become_method=sudo</span></span><br><span class="line"><span class="comment">#become_user=root</span></span><br><span class="line"><span class="comment">#become_ask_pass=False</span></span><br><span class="line"></span><br><span class="line">[paramiko_connection]</span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment this line to cause the paramiko connection plugin to not record new host</span></span><br><span class="line"><span class="comment"># keys encountered.  Increases performance on new host additions.  Setting works independently of the</span></span><br><span class="line"><span class="comment"># host key checking setting above.</span></span><br><span class="line"><span class="comment">#record_host_keys=False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># by default, Ansible requests a pseudo-terminal for commands executed under sudo. Uncomment this</span></span><br><span class="line"><span class="comment"># line to disable this behaviour.</span></span><br><span class="line"><span class="comment">#pty=False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># paramiko will default to looking for SSH keys initially when trying to</span></span><br><span class="line"><span class="comment"># authenticate to remote devices.  This is a problem for some network devices</span></span><br><span class="line"><span class="comment"># that close the connection after a key failure.  Uncomment this line to</span></span><br><span class="line"><span class="comment"># disable the Paramiko look for keys function</span></span><br><span class="line"><span class="comment">#look_for_keys = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When using persistent connections with Paramiko, the connection runs in a</span></span><br><span class="line"><span class="comment"># background process.  If the host doesn't already have a valid SSH key, by</span></span><br><span class="line"><span class="comment"># default Ansible will prompt to add the host key.  This will cause connections</span></span><br><span class="line"><span class="comment"># running in background processes to fail.  Uncomment this line to have</span></span><br><span class="line"><span class="comment"># Paramiko automatically add host keys.</span></span><br><span class="line"><span class="comment">#host_key_auto_add = True</span></span><br><span class="line"></span><br><span class="line">[ssh_connection]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh arguments to use</span></span><br><span class="line"><span class="comment"># Leaving off ControlPersist will result in poor performance, so use</span></span><br><span class="line"><span class="comment"># paramiko on older platforms rather than removing it, -C controls compression use</span></span><br><span class="line"><span class="comment">#ssh_args = -C -o ControlMaster=auto -o ControlPersist=60s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The base directory for the ControlPath sockets.</span></span><br><span class="line"><span class="comment"># This is the "%(directory)s" in the control_path option</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment"># control_path_dir = /tmp/.ansible/cp</span></span><br><span class="line"><span class="comment">#control_path_dir = ~/.ansible/cp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The path to use for the ControlPath sockets. This defaults to a hashed string of the hostname,</span></span><br><span class="line"><span class="comment"># port and username (empty string in the config). The hash mitigates a common problem users</span></span><br><span class="line"><span class="comment"># found with long hostnames and the conventional %(directory)s/ansible-ssh-%%h-%%p-%%r format.</span></span><br><span class="line"><span class="comment"># In those cases, a "too long for Unix domain socket" ssh error would occur.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment"># control_path = %(directory)s/%%h-%%r</span></span><br><span class="line"><span class="comment">#control_path =</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enabling pipelining reduces the number of SSH operations required to</span></span><br><span class="line"><span class="comment"># execute a module on the remote server. This can result in a significant</span></span><br><span class="line"><span class="comment"># performance improvement when enabled, however when using "sudo:" you must</span></span><br><span class="line"><span class="comment"># first disable 'requiretty' in /etc/sudoers</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default, this option is disabled to preserve compatibility with</span></span><br><span class="line"><span class="comment"># sudoers configurations that have requiretty (the default on many distros).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#pipelining = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Control the mechanism for transferring files (old)</span></span><br><span class="line"><span class="comment">#   * smart = try sftp and then try scp [default]</span></span><br><span class="line"><span class="comment">#   * True = use scp only</span></span><br><span class="line"><span class="comment">#   * False = use sftp only</span></span><br><span class="line"><span class="comment">#scp_if_ssh = smart</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Control the mechanism for transferring files (new)</span></span><br><span class="line"><span class="comment"># If set, this will override the scp_if_ssh option</span></span><br><span class="line"><span class="comment">#   * sftp  = use sftp to transfer files</span></span><br><span class="line"><span class="comment">#   * scp   = use scp to transfer files</span></span><br><span class="line"><span class="comment">#   * piped = use 'dd' over SSH to transfer files</span></span><br><span class="line"><span class="comment">#   * smart = try sftp, scp, and piped, in that order [default]</span></span><br><span class="line"><span class="comment">#transfer_method = smart</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if False, sftp will not use batch mode to transfer files. This may cause some</span></span><br><span class="line"><span class="comment"># types of file transfer failures impossible to catch however, and should</span></span><br><span class="line"><span class="comment"># only be disabled if your sftp version has problems with batch mode</span></span><br><span class="line"><span class="comment">#sftp_batch_mode = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The -tt argument is passed to ssh when pipelining is not enabled because sudo</span></span><br><span class="line"><span class="comment"># requires a tty by default.</span></span><br><span class="line"><span class="comment">#usetty = True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Number of times to retry an SSH connection to a host, in case of UNREACHABLE.</span></span><br><span class="line"><span class="comment"># For each retry attempt, there is an exponential backoff,</span></span><br><span class="line"><span class="comment"># so after the first attempt there is 1s wait, then 2s, 4s etc. up to 30s (max).</span></span><br><span class="line"><span class="comment">#retries = 3</span></span><br><span class="line"></span><br><span class="line">[persistent_connection]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configures the persistent connection timeout value in seconds.  This value is</span></span><br><span class="line"><span class="comment"># how long the persistent connection will remain idle before it is destroyed.</span></span><br><span class="line"><span class="comment"># If the connection doesn't receive a request before the timeout value</span></span><br><span class="line"><span class="comment"># expires, the connection is shutdown. The default value is 30 seconds.</span></span><br><span class="line"><span class="comment">#connect_timeout = 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The command timeout value defines the amount of time to wait for a command</span></span><br><span class="line"><span class="comment"># or RPC call before timing out. The value for the command timeout must</span></span><br><span class="line"><span class="comment"># be less than the value of the persistent connection idle timeout (connect_timeout)</span></span><br><span class="line"><span class="comment"># The default value is 30 second.</span></span><br><span class="line"><span class="comment">#command_timeout = 30</span></span><br><span class="line"></span><br><span class="line">[accelerate]</span><br><span class="line"><span class="comment">#accelerate_port = 5099</span></span><br><span class="line"><span class="comment">#accelerate_timeout = 30</span></span><br><span class="line"><span class="comment">#accelerate_connect_timeout = 5.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The daemon timeout is measured in minutes. This time is measured</span></span><br><span class="line"><span class="comment"># from the last activity to the accelerate daemon.</span></span><br><span class="line"><span class="comment">#accelerate_daemon_timeout = 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If set to yes, accelerate_multi_key will allow multiple</span></span><br><span class="line"><span class="comment"># private keys to be uploaded to it, though each user must</span></span><br><span class="line"><span class="comment"># have access to the system via SSH to add a new key. The default</span></span><br><span class="line"><span class="comment"># is "no".</span></span><br><span class="line"><span class="comment">#accelerate_multi_key = yes</span></span><br><span class="line"></span><br><span class="line">[selinux]</span><br><span class="line"><span class="comment"># file systems that require special treatment when dealing with security context</span></span><br><span class="line"><span class="comment"># the default behaviour that copies the existing context or uses the user default</span></span><br><span class="line"><span class="comment"># needs to be changed to use the file system dependent context.</span></span><br><span class="line"><span class="comment">#special_context_filesystems=nfs,vboxsf,fuse,ramfs,9p,vfat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set this to yes to allow libvirt_lxc connections to work without SELinux.</span></span><br><span class="line"><span class="comment">#libvirt_lxc_noseclabel = yes</span></span><br><span class="line"></span><br><span class="line">[colors]</span><br><span class="line"><span class="comment">#highlight = white</span></span><br><span class="line"><span class="comment">#verbose = blue</span></span><br><span class="line"><span class="comment">#warn = bright purple</span></span><br><span class="line"><span class="comment">#error = red</span></span><br><span class="line"><span class="comment">#debug = dark gray</span></span><br><span class="line"><span class="comment">#deprecate = purple</span></span><br><span class="line"><span class="comment">#skip = cyan</span></span><br><span class="line"><span class="comment">#unreachable = red</span></span><br><span class="line"><span class="comment">#ok = green</span></span><br><span class="line"><span class="comment">#changed = yellow</span></span><br><span class="line"><span class="comment">#diff_add = green</span></span><br><span class="line"><span class="comment">#diff_remove = red</span></span><br><span class="line"><span class="comment">#diff_lines = cyan</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[diff]</span><br><span class="line"><span class="comment"># Always print diff when running ( same as always running with -D/--diff )</span></span><br><span class="line"><span class="comment"># always = no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set how many context lines to show in diff</span></span><br><span class="line"><span class="comment"># context = 3</span></span><br></pre></td></tr></table></figure><ul><li><code>/etc/ansible/hosts</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 1340]<span class="comment"># cat /etc/ansible/hosts</span></span><br><span class="line"><span class="comment"># This is the default ansible 'hosts' file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It should live in /etc/ansible/hosts</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - Comments begin with the '#' character</span></span><br><span class="line"><span class="comment">#   - Blank lines are ignored</span></span><br><span class="line"><span class="comment">#   - Groups of hosts are delimited by [header] elements</span></span><br><span class="line"><span class="comment">#   - You can enter hostnames or ip addresses</span></span><br><span class="line"><span class="comment">#   - A hostname/ip can be a member of multiple groups</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ex 1: Ungrouped hosts, specify before any group headers.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## green.example.com</span></span><br><span class="line"><span class="comment">## blue.example.com</span></span><br><span class="line"><span class="comment">## 192.168.100.1</span></span><br><span class="line"><span class="comment">## 192.168.100.10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ex 2: A collection of hosts belonging to the 'webservers' group</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## [webservers]</span></span><br><span class="line"><span class="comment">## alpha.example.org</span></span><br><span class="line"><span class="comment">## beta.example.org</span></span><br><span class="line"><span class="comment">## 192.168.1.100</span></span><br><span class="line"><span class="comment">## 192.168.1.110</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you have multiple hosts following a pattern you can specify</span></span><br><span class="line"><span class="comment"># them like this:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## www[001:006].example.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ex 3: A collection of database servers in the 'dbservers' group</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## [dbservers]</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## db01.intranet.mydomain.net</span></span><br><span class="line"><span class="comment">## db02.intranet.mydomain.net</span></span><br><span class="line"><span class="comment">## 10.25.1.56</span></span><br><span class="line"><span class="comment">## 10.25.1.57</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Here's another example of host ranges, this time there are no</span></span><br><span class="line"><span class="comment"># leading 0s:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## db-[99:101]-node.example.com</span></span><br></pre></td></tr></table></figure><ul><li><p>Playbook</p><ul><li>YAML形式で記載する</li><li>実行するには<code>ansible-playbook</code>コマンドを使う</li></ul></li><li><p>Ansibleの活用</p><ul><li>アプリケーションのリリース</li><li>仮想サーバー・コンテナの払い出し<ul><li>KVMによる仮想マシンや、Dockerコンテナ、コンテナイメージの作成などを自動化できる</li></ul></li><li>ネットワーク機器の管理<ul><li>CISCOを始めとするネットワークベンダーの様々なネットワーク機器に対応しており、ネットワーク機器の設定や情報収集に利用できる</li></ul></li></ul></li></ul><h3 id="練習問題-3"><a href="#練習問題-3" class="headerlink" title="練習問題"></a>練習問題</h3><ul><li>4.1 gitコマンド<ul><li><code>git clone http://github/xxxx</code></li></ul></li><li>4.2 gzファイルを展開する方法<ul><li><code>gunzip newsoft.tar.gx ; tar xvf newsoft.tar</code></li><li><code>tar zxvf newsoft.tar.gz</code></li><li><code>gzip -dc newsoft.tar.gz | tar xvf -</code></li></ul></li><li>4.3 <code>make</code><ul><li><code>./configure</code>でMackefileを作成</li><li><code>make</code>コマンドでMakefileに基づいてコンパイルを行う</li><li><code>make install</code>コマンドでコンパイル済みのファイルをインストール</li></ul></li><li>4.4 パッチの適用を取り消すには？patchコマンドでなんというオプション？<ul><li>R</li></ul></li><li>4.5 <code>dd if=/dev/sdb of=/dev/sdc</code></li><li>4.6 <code>tar cvf /dev/st0 /home</code><ul><li>tar [option] [アーカイブ先] [アーカイブ元]</li></ul></li><li>4.7 &#x2F;dataディレクトリ以下を、ホストjupiterの&#x2F;backupディレクトリにバックアップ<ul><li><code>rsync -auvz -e ssh /data/ march@jupiter:/backup</code></li><li>TODO: rsyncコマンド使ってみる</li></ul></li><li>4.8 メンテナンス情報を通知する方法</li><li>4.9 スワップ領域がどの程度利用されているのか、その容量を計測したい場合のコマンド<ul><li><code>vmstat</code>,<code>cat /proc/swaps</code>,<code>free</code></li><li><code>swapon</code>,<code>/proc/meminfo</code></li></ul></li><li>4.10 vmstatコマンドで使用率が高いと考えられるリソース<ul><li>TODO: vmstatコマンドの見方再確認</li></ul></li><li>4.11 sarで今月の15日の記録を見たい<ul><li><code>sar -b -f /var/log/sa/sa15</code></li></ul></li><li>4.12 次のコマンド実行結果の説明<ul><li>vmstat 30 50<ul><li>30秒間隔で計測結果が50回表示される</li><li>使用中のスワップ領域サイズが表示される</li><li>バッファキャッシュとページキャッシュの利用状況が表示される</li></ul></li></ul></li><li>4.13 プロセスごとにメモリ使用量を把握したい<ul><li><code>top</code></li><li><code>ps aux</code>でもわかる。<code>ps -ex</code>は、Unix98オプションとGNUオプションを続けて指定できないためエラーになる</li></ul></li><li>4.14 物理メモリが枯渇してしまう前にプロセスを強制終了し、そのプロセスが使っていたメモリを開放する仕組み<ul><li>OOM Killer</li></ul></li><li>4.15 Ansibleの説明について</li><li>4.16 Ansilbeをインストール下ホストで以下のコマンドを実行<ul><li><code>ansible-playbook -i localtest test_playbook.yml</code></li><li>TODO: ansibleを実際に使ってみる必要ある</li></ul></li></ul><h2 id="第5章-仮想化サーバー"><a href="#第5章-仮想化サーバー" class="headerlink" title="第5章　仮想化サーバー"></a>第5章　仮想化サーバー</h2><h3 id="5-1-仮想マシンの仕組みとKVM"><a href="#5-1-仮想マシンの仕組みとKVM" class="headerlink" title="5.1　仮想マシンの仕組みとKVM"></a>5.1　仮想マシンの仕組みとKVM</h3><ul><li><p>仮想化</p><ul><li>ホスト型仮想化：仮想化ソフトウェアをインストールし、仮想化ソフトウェアが作り出した仮想マシン上にOSをインストールする方式<ul><li>ホストOSとゲストOSに分けられる</li></ul></li><li>ハイパーバイザー型仮想化：コンピュータ上にハイパーバイザと呼ばれる仮想化管理機構を用意し、その上で仮想マシンを動かす方式<ul><li>ホスト型仮想化よりも高いパフォーマンスを期待できる</li></ul></li></ul></li><li><p>仮想化のメリット・デメリット</p><ul><li>メリット：<ul><li>トータルの運用コストを削減できる</li><li>リソースの変化に柔軟に対応できる</li></ul></li><li>デメリット：<ul><li>仮想マシンのホストに障害が発生したい場合、複数の仮想マシンが影響</li><li>物理サーバとは違った形での運用スキルやセキュリティ対策が必要</li><li>ハードウェア上で直接OSを動作させるのに比べてパフォーマンスが低下してしまう<ul><li>オーバーヘッドを低減するCPUの仮想化支援機能<ul><li>Intel社のCPUに搭載されているVT-x</li><li>AMD社のCPUに搭載されているADM-V</li></ul></li></ul></li></ul></li></ul></li><li><p>KVM</p><ul><li>CPUが仮想化支援機構に対応しているかどうかを確認するコマンド：<ul><li><code>lscpu | grep Virtualization</code></li><li><code>grep -E &#39;vmx|svm&#39; /proc/cpuinfo</code></li></ul></li></ul></li></ul><h3 id="5-2-仮想マシンの作成と管理"><a href="#5-2-仮想マシンの作成と管理" class="headerlink" title="5.2　仮想マシンの作成と管理"></a>5.2　仮想マシンの作成と管理</h3><ul><li><p>KVM環境の構築</p><ul><li>手順<ul><li>KVMと関連ツールおよびQEMU(ハードウェアエミュレータ)をインストール<ul><li><code>yum install libvirt bridge-utils qemu-kvm virt-manager virt-install</code></li><li><code>systemctl start libvirt</code></li><li><code>systemctl enable libvirt</code></li></ul></li><li>ブリッジネットワークを設定する<ul><li><code>nmcli con add type bridge con-name br0 ifname br0</code></li><li><code>nmcli con mod br0 ipv4.method manual ipv4.addresses &quot;192.168.1.80/24&quot; ipv4.gateway &quot;192.168.1.1&quot; ipv4.dns &quot;192.168.1.1&quot;</code></li></ul></li><li>仮想マシンを作成する</li></ul></li></ul></li><li><p>実際にvirshを使った操作が紹介されているが試す環境ないので割愛</p></li></ul><h3 id="練習問題-4"><a href="#練習問題-4" class="headerlink" title="練習問題"></a>練習問題</h3><ul><li>5.1 ホスト型とハイパーバイザ型の問題</li><li>5.2 <code>cat /proc/cpuinfo | grep flags | uniq</code><ul><li>KVMを利用するには、CPUが仮想化支援機能に対応している必要がある（IntelのVT-xかAMDのAMD-V）</li><li>中の文字列に、「vmx」か「svm」がなければ対応しない</li></ul></li><li>5.3 CUI環境でKVM観葉マシンを作成してゲストOSをインストールするには<ul><li><code>virt-install</code>コマンドを使う</li></ul></li><li>5.4 KVMを使って仮想マシンを運用したい<ul><li><code>systemctl enamble libvirt</code><ul><li>libvirtは仮想マシンの制御を抽象化したライブラリ</li><li>KVMを使って仮想マシンを運用するには、libvirtサービスを起動しておく必要がある</li></ul></li></ul></li><li>5.5 KVM仮想マシンを作成してCentOS7をインストールしたい<ul><li><code>virt-install</code>コマンド</li></ul></li><li>5.6 コマンドラインからKVM仮想マシン「vm01」に接続してコマンド操作をしようとしています。<ul><li><code>virsh console vm01</code></li></ul></li></ul><h2 id="第6章-コンテナ"><a href="#第6章-コンテナ" class="headerlink" title="第6章　コンテナ"></a>第6章　コンテナ</h2><h3 id="6-1-コンテナの仕組み"><a href="#6-1-コンテナの仕組み" class="headerlink" title="6.1　コンテナの仕組み"></a>6.1　コンテナの仕組み</h3><p>仮想マシンと並んでよく使われる仮想化技術</p><ul><li><p>コンテナ型仮想化</p><ul><li>仮想マシンを動かす技術ではなく、独立下環境でアプリケーションを動かす技術</li><li>コンテナ型仮想化ではホストOSとカーネルを共有するので仮想マシンよりもコンテナのほうがシステムリソースの消費が少なくて済む</li></ul></li><li><p>参考</p><ul><li>特定のサーバープロセスなどアプリケーションのみを実行するコンテナをアプリケーションコンテナ</li><li>一連のシステムプロセス群を実行し仮想マシンに近いコンテナをシステムコンテナということがあります。</li></ul></li><li><p>名前空間とcgroup</p><ul><li>名前空間<ul><li>コンテナの隔離に使われているカーネルの機能のこと</li></ul></li><li>cgroup<ul><li>プロセスをグループ化して管理する仕組み</li><li>グループごとにシステムリソースの利用に制限をかけることができる</li><li>管理できるシステムリソースは<code>ls /sys/fs/cgroup/</code>で確認できる</li></ul></li></ul></li><li><p>Docker</p><ul><li>コンテナ化する仕組みをDockerエンジンといいます。</li></ul></li></ul><h3 id="6-2-Dockerコンテナとコンテナイメージの管理"><a href="#6-2-Dockerコンテナとコンテナイメージの管理" class="headerlink" title="6.2　Dockerコンテナとコンテナイメージの管理"></a>6.2　Dockerコンテナとコンテナイメージの管理</h3><ul><li><p>Dockerの導入</p><ul><li><code>yum install docker</code></li><li><code>systemctl start docker.service</code></li><li><code>docker version</code></li></ul></li><li><p>dockerコマンド</p><ul><li>実行するにはroot権限が必要</li><li>一般ユーザでも実行させるにはdockerグループに所属させる必要がある</li><li><code>groupadd docker</code></li><li><code>usermod -aG docker linucuser</code></li></ul></li><li><p>dockerの基本操作</p><ul><li>コンテナイメージの取得<ul><li><code>docker pull centos:8</code></li></ul></li></ul></li><li><p>ディスク容量不足になったのでvirtualboxの容量増やす</p><ul><li><a href="https://cream-worker.blog.jp/archives/1077340749.html">https://cream-worker.blog.jp/archives/1077340749.html</a></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos:8</span><br><span class="line">docker images</span><br><span class="line">docker create --name mycentos8 centos:8</span><br><span class="line">docker start mycentos8</span><br><span class="line"><span class="comment"># dokcer pull/create/start をあわせた動きが docekr runコマンド</span></span><br><span class="line">docker run centos:8 cat /etc/redhat-release</span><br><span class="line">docker ps</span><br><span class="line">docker ps -a</span><br><span class="line">docker rm [コンテナIDorコンテナ名]</span><br><span class="line"></span><br><span class="line"><span class="comment"># コンテナへのログイン</span></span><br><span class="line"><span class="comment"># docker run -it --name コンテナ名 イメージ名:タグ名 シェル</span></span><br><span class="line">docker run -it --name mucentos centos:8 /bin/bash</span><br><span class="line">uname -a <span class="comment"># あくまでホストOSのカーネル情報が見える</span></span><br><span class="line">Ctrl + p, Ctrl + q で抜ける</span><br><span class="line">docker ps <span class="comment"># プロセスが立ち上がっていることを確認</span></span><br><span class="line">docker attach mycentos</span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># exitで抜けるとcontainerが落ちる</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><ul><li>仮想ネットワークの利用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name centosA cenots:8 /bin/bash</span><br><span class="line">docker run -itd --name centosB cenots:8 /bin/bash</span><br><span class="line">docker ps</span><br><span class="line">docker <span class="built_in">exec</span> centosA /sbin/ip a</span><br><span class="line">docker <span class="built_in">exec</span> centosB /sbin/ip a</span><br><span class="line"></span><br><span class="line"><span class="comment"># ホストOS側にdocker0というネットワークインターフェースが作成されているのがわかる</span></span><br><span class="line">ip a show docker0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仮想ネットワークを新しく作成することもできる</span></span><br><span class="line">docker network create mynetwork</span><br><span class="line">docker network connect mynetwork centosA</span><br><span class="line">docker network connect mynetwork centosB</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> centosA /sbin/ip a</span><br><span class="line">docker <span class="built_in">exec</span> centosB /sbin/ip a</span><br></pre></td></tr></table></figure><ul><li>dockerイメージの作成</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -it centos:8 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"My Docker Image"</span> &gt;&gt; /root/docker.txt</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">docker commit [コンテナID/コンテナ名] <span class="built_in">test</span>/centos</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">docker run <span class="built_in">test</span>/centos cat /root/docker.txt</span><br><span class="line">docker rmi <span class="built_in">test</span>/centos</span><br></pre></td></tr></table></figure><ul><li>ポート変換</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginxtest -d -p 8080:80 nginx</span><br><span class="line"></span><br><span class="line">docker run --name nginxtest2 -v /home/tomo/html:/usr/share/nginx/html -d -p 8080:80 nginx</span><br><span class="line"><span class="comment"># 権限が足りずうまく行かなかった</span></span><br></pre></td></tr></table></figure><ul><li>Dcokerfile<ul><li>既存のDockerイメージに操作を加えて、新しいDockerイメージを作ることができる</li><li>Dockerfileに記述して独自のイメージを作成する</li></ul></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">8</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> testimage &lt;linucuser@example.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install httpd</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">EXPOSE 80</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"/usr/sbin/httpd"</span>,<span class="string">"-DFOREGROUND"</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker build -t <span class="built_in">local</span>/centos:apache .</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作成したDockerイメージからコンテナ名「apachetest」としてコンテナを作成、起動</span></span><br><span class="line">docker run --name apachetest -d -p 8080:80 <span class="built_in">local</span>/centos:apache</span><br></pre></td></tr></table></figure><ul><li>コンテナの運用・管理コマンド</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># コンテナの状態を詳しく確認できる</span></span><br><span class="line">docker stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 圧縮アーカイブファイルを取得してDockerイメージを生成</span></span><br><span class="line">docker import http://example.com/exampleimage.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># コンテナ内のすべてのプロセスを一時停止/再開</span></span><br><span class="line">docker pause</span><br><span class="line">docker unpause</span><br><span class="line"></span><br><span class="line"><span class="comment"># コンテナ終了</span></span><br><span class="line">docker stop</span><br><span class="line"><span class="comment"># docker stopコマンドで終了できない場合に利用 メインプロセスに対してKILLシグナルを送信してコンテナを終了します。</span></span><br><span class="line">docker <span class="built_in">kill</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># プライベートレジストリの構築</span></span><br><span class="line">docker run -d -p 5000:5000 --name registry registry:2</span><br><span class="line">docker pull ubuntu</span><br><span class="line">docker tag ubuntu:latest localhost:5000/ubuntu</span><br><span class="line">docker push localhost:5000/ubuntu</span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">docker pull localhost:5000/ubuntu</span><br><span class="line"><span class="comment"># ローカルレジストリ削除</span></span><br><span class="line">docker stop registry &amp;&amp; docker rm -v registry</span><br></pre></td></tr></table></figure><h3 id="練習問題-5"><a href="#練習問題-5" class="headerlink" title="練習問題"></a>練習問題</h3><ul><li>6.1 仮想マシンと比較した際、コンテナにはどういうメリットがあるか<ul><li>カーネルはホストOSのものを利用するのでシステムリソースの消費が少なくて済む</li></ul></li><li>6.2 dockerコマンド<ul><li><code>docker pull centos:8</code></li><li><code>docker create --name testctl centos:8</code></li><li><code>dokcer start testctl</code></li></ul></li><li>6.3 起動中コンテナのシェルに接続<ul><li><code>docker attach testct2</code></li></ul></li><li>6.4 改変を加えたコンテナから新しいDockerイメージを作成する際のコマンド<ul><li>docker commit</li></ul></li><li>6.5 Dockerfile</li></ul><h2 id="第7章-201模擬試験"><a href="#第7章-201模擬試験" class="headerlink" title="第7章　201模擬試験"></a>第7章　201模擬試験</h2><ul><li>TODO: Q1.<ul><li>EFIシステムパーティションはFAT（またはVFAT）でフォーマットされる</li><li>BIOSはマザーボード上のフラッシュメモリに保存される</li></ul></li><li>TODO: Q2.GRUB2の設定ファイル<code>/etc/default/grub</code>の変更後は、<code>grub-mkconfig</code>コマンドを実行して<code>/boot/grub/grub.cfg</code>ファイルを生成する必要がある</li><li>TODO: Q3.GRUB2ブートローダ</li><li>TODO: Q4.GRUBを再インストールするには<ul><li><code>grub2-install /dev/sda</code></li></ul></li><li>TODO: Q5.systemdについて<ul><li><code>/usr/lib/systemd/system</code>ディレクトリ：デフォルトのUnitファイル</li><li><code>/etc/systemd/system</code>ディレクトリ：管理者がカスタマイズするUnitファイル</li></ul></li><li>Q6.systemd postfix.serviceが自動起動するように設定<ul><li><code>systemctl enable postfix.service</code></li></ul></li><li>TODO: Q7.システムメンテナンスを行うためレスキューモードに移行<ul><li><code>systemctl isolate rescue.target</code></li></ul></li><li>TODO: Q8.<code>/boot</code>ディレクトリ以下にあるファイルのうち、カーネルイメージを選択<ul><li><code>/boot/vmlinuz-カーネルバージョン</code>という名前のファイル</li><li>自己解凍される圧縮ファイルとなっている</li><li><code>/boot/initamfs</code>や<code>/boot/initrd</code>は初期RAMディスクファイル</li><li><code>/boot/System.map</code>はシンボルのマッピングファイル</li><li>configはカーネルコンフィギュレーションファイル</li></ul></li><li>TODO: Q9.現在利用中のカーネルバージョンを表示することができるコマンド<ul><li><code>uname -r</code></li><li><code>cat /proc/version</code></li></ul></li><li>TODO: Q10.カーネルのコンフィギュレーションが保存されるファイルのファイル名<ul><li><code>/usr/src/linux/.config</code></li></ul></li><li>TODO: Q11.初期RAMディスクの作成ができるコマンド<ul><li><code>mkinitrd</code>,<code>mkinitramfs</code>,<code>dracut</code></li></ul></li><li>Q12.systemdを採用したシステムでsshdサービスのログを取得<ul><li><code>journalctl -u sshd.service</code></li></ul></li><li>TODO: Q13. udevを使用している場合、<code>.rules</code>ファイルが格納されているデフォルトのディレクトリ<ul><li><code>/etc/udev/udev.conf</code></li><li><code>/etc/udev/rules.d</code>ディレクトリ</li></ul></li><li>TODO: Q14.PCIデバイスの情報を集めている。1番目のバス、8番目のスロットに関する詳細な情報を表示<ul><li><code>lspci -vv -s 0:8</code></li></ul></li><li>TODO: Q15.<code>/etc/fstab</code>ファイルの書式<ul><li>ファイルシステムの情報が記載されたファイル</li><li>デバイスファイル名またはUUIDまたはラベル　マウントポイント　ファイルシステムの種類　マウントオプション　dumpフラグ　fsckのチェック順</li></ul></li><li>TODO: Q16.現在マウントされているファイルシステムとそのマウントオプションを確認<ul><li><code>/etc/mtab</code></li><li><code>/proc/mounts</code></li></ul></li><li>TODO: Q17.有効になっているスワップ領域を確認するコマンド<ul><li><code>cat /proc/swaps</code></li><li><code>swapon -s</code></li></ul></li><li>Q18.ext4ファイルシステムをブロクサイズ4096バイトで作成したい場合<ul><li><code>mke2fs -b 4096 -t ext4 /dev/sdb1</code></li></ul></li><li>TODO: Q19.Btrfsを使っている。&#x2F;mntにマウントしているトップレベルのサブボリュームの下に、&#x2F;mnt&#x2F;sub1というボリュームを作ろうとしている。<ul><li><code>btrfs subvolume create /mnt/sub1</code></li></ul></li><li>TODO: Q20.&#x2F;dev&#x2F;sda5にはext2ファイルシステムが格納されている。このファイルシステム内のデータに影響を与えずに、ext3ファイルシステムに変換したい場合<ul><li><code>tune2fs -j /dev/sda5</code></li><li>既存のext2ファイルシステムに影響を与えずにext3ファイルシステムに変換できる<ul><li>他のオプションも含めて確認する</li></ul></li></ul></li><li>Q21.LVMの論理ボリューム&#x2F;dev&#x2F;centos&#x2F;rootｎ構築されたXFSファイルシステムの情報を確認<ul><li><code>xfs_info</code>: XFSファイルシステムの情報を確認できる</li></ul></li><li>Q22.パーティションやディスクに対してLVMの物理ボリュームを作成するコマンド<ul><li><code>pvcreate</code>:物理ボリュームを作成</li><li><code>vgcreate</code>:ボリュームグループを作成</li><li><code>lvcreate</code>:論理ボリュームを作成</li></ul></li><li>Q23.ボリュームグループvolgroup1の空き容量が不足してきたので、物理ボリューム&#x2F;dev&#x2F;sdd1をvolgroup1に追加したい<ul><li><code>vgextend volgroup1 /dev/sdd1</code></li></ul></li><li>Q24.&#x2F;dev&#x2F;vg01&#x2F;lv01のスナップショットをlv01_snapという名前で作成しようとしている<ul><li><code>lvcreate -s -L 500m -n lv01_snap /dev/vg01/lv01</code></li><li>スナップショットを作成するには、lvcreateに-sオプションをつける</li><li>-Lはサイズの指定、-nはスナップショットの名称を指定</li></ul></li><li>Q25.LAN内に存在するホストをしるために、IPアドレスとMACアドレスとの対応テーブルを作成したい場合実行すべきこと<ul><li>LAN内のブロードキャストアドレスに対してpingコマンドを実行し、次にarpコマンドを実行する</li></ul></li><li>Q26.デフォルトゲートウェイを192.168.1.1に設定しようとしている<ul><li><code>ip route add default via 192.168.1.1</code></li><li><code>route add default gw 192.168.1.1</code></li></ul></li><li>Q27.無線ネットワークに関わるコマンドや説明で適切なもの<ul><li>iwconfigコマンドで無線LANインターフェースの状態を表示できる</li><li>無線LANのアクセスポイントを識別するIDとしてSSID・ESSIDがある</li></ul></li><li>Q28.ルーティングテーブル系問題</li><li>Q29.tcpdumpコマンドの出力結果読み解き問題 クライアントのIPアドレスはどれか</li><li>Q30.ルーティングテーブル系問題</li><li>Q31.ネットワークに異常がみられるので、ルーティングテーブルを表示しようとしている。<ul><li>DNSの問題と切り離すため、名前解決せずに表示させたい場合、routeコマンドにどのオプションをつければよいか<ul><li><code>route -n</code></li><li><code>netstat -rn</code>でも同じ</li></ul></li></ul></li><li>Q32.パケットの受信および転送におけるエラーや取りこぼしの状況をネットワークインターフェースごとに表示することができるコマンド<ul><li><code>netstat -i</code></li></ul></li><li>Q33.ターゲットホストまでのネットワーク経路を確認<ul><li><code>mtr</code></li><li><code>traceroute</code></li><li><code>tracepath</code></li></ul></li><li>Q34.gitコマンド系<ul><li><code>git clone https://github.com/xxxxxx</code></li></ul></li><li>Q35.ソフトウェアをソースコードからコンパイルしてインストールするときの説明<ul><li>makeコマンドを利用してもソフトウェア間の依存関係を解消できない</li></ul></li><li>Q36.gccコンパイラがなくてconfigureとmakeでエラー</li><li>Q37.ソースコードに適用したパッチを取り消したい場合、patchコマンドでは何というオプションを指定すればいいか<ul><li><code>patch -R p0 &lt; patch-2.3.4</code></li></ul></li><li>Q38.バックアップメディアの必要本数問題</li><li>Q39.dumpコマンド<ul><li>ファイルシステム単位でext2&#x2F;ext3&#x2F;ext4ファイルシステムをバックアップ</li></ul></li><li>Q40.ログインプロンプトの上方に表示されるディストリビューション情報などを編集したい<ul><li>編集すべきファイル「<code>/etc/issue</code>」</li></ul></li><li>Q41.ファイルシステムやディスクのI&#x2F;Oを計測できるコマンドを2つ選択してください<ul><li><code>iostat</code></li><li><code>iotop</code></li></ul></li><li>Q42.vmstatの出力結果<ul><li>bi:block in ブロックデバイスから受け取ったブロック数(ブロック数&#x2F;秒)</li><li>r: 実行待ちプロセス数</li><li>bo: ブロックデバイスに送られたブロック数(ブロック数&#x2F;秒)</li><li>wa: 入出力待ち時間</li><li>b: 割り込み不可能なスリープ状態にあるプロセス数</li></ul></li><li>Q43.freeコマンドからメモリとスワップ領域の状態について読み取る問題</li><li>Q44.vmstatコマンドの実行結果から読み取る問題</li><li>Q45.Webブラウザ経由でサーバーのCPU利用率やネットワークのトラフィックを監視したいときに導入すべきソフトウェア<ul><li>collectd,Nagios,MRTG,Cacti,Icinga2</li></ul></li><li>Q46.SNMPに関する説明<ul><li>SNMPマネージャからSNMPエージェント側に情報を求めることをポーリングという</li><li>障害発生時にSNMPマネージャへ通知する異常通知データをTRAPという</li><li>SNMPではUDPの161と162が使われる</li></ul></li><li>Q47.Ansibleに関する説明<ul><li>インベントリにはシステム構成処理が実行されるホストのリストが記述されている</li><li>AnsibleのターゲットノードはLinuxホスト以外にも対応</li><li>冪等性とはある操作を何度行っても同じ結果になること</li></ul></li><li>Q48.Ansibleの導入目的として不適切なものを１つ<ul><li>サーバーのセキュリティを高める</li></ul></li><li>Q49.playbookを実行するコマンド<ul><li><code>ansilbe-playbook -i server.hosts sample_playbook.yml</code></li></ul></li><li>Q50.ハイパーバイザ型仮想化の説明<ul><li>1つのハードウェア上で複数のOSを仮想マシン上で実行できる</li><li>ホストOSのハードウェア障害は仮想マシンから特定しづらい</li><li>CPUの仮想化支援機能を利用できる</li></ul></li><li>Q51.サーバーのCPUがKVMに対応しているかどうかを調べる<ul><li><code>cat /proc/cpuinfo | grep flags | uniq</code><ul><li>根拠となるフラグ：vmx or svm</li></ul></li></ul></li><li>Q52.仮想マシンのネットワークインターフェースをホストOSのネットワークインターフェースと同じネットワークに配置する仕組みをなんと呼ぶか？<ul><li>ブリッジネットワーク</li></ul></li><li>Q53.GUI環境で仮想マシンを管理：virt-manager</li><li>Q54.virsh は仮想マシン操作のためのコマンドラインインターフェース<ul><li><code>virsh shutdown vm_centos7</code></li></ul></li><li>Q55.コマンドラインで仮想マシンを作成してOSをインストールするためのコマンド<ul><li><code>virt-install</code></li></ul></li><li><h2 id="Q56-コンテナに関する説明で誤っているもの"><a href="#Q56-コンテナに関する説明で誤っているもの" class="headerlink" title="Q56.コンテナに関する説明で誤っているもの"></a>Q56.コンテナに関する説明で誤っているもの</h2></li><li>Q57.Dockerの説明としてただしいもの<ul><li>ホストOSのディレクトリをコンテナ内からアクセスできるように設定できる</li><li>DockerレジストリでDockerイメージを入手できる</li><li>DockerではLinuxカーネルの機能であるcgroupが使われる</li></ul></li><li>Q58.<ul><li><code>docker run -it alpine:latest /bin/sh</code></li></ul></li><li>Q59.<ul><li><code>docker attach [id]</code><ul><li>バックグラウンドで起動中のコンテナに入るにはattachを使う</li></ul></li></ul></li><li>Q60.<ul><li><code>docker images</code></li></ul></li></ul><h2 id="模擬試験-問題"><a href="#模擬試験-問題" class="headerlink" title="模擬試験 問題"></a>模擬試験 問題</h2><h2 id="模擬試験-解答・解説"><a href="#模擬試験-解答・解説" class="headerlink" title="模擬試験 解答・解説"></a>模擬試験 解答・解説</h2><h2 id="■第2部-202試験（LinuC-Level2-Exam-202）"><a href="#■第2部-202試験（LinuC-Level2-Exam-202）" class="headerlink" title="■第2部　202試験（LinuC Level2 Exam 202）"></a>■第2部　202試験（LinuC Level2 Exam 202）</h2><h2 id="第8章-ネットワーククライアントの管理"><a href="#第8章-ネットワーククライアントの管理" class="headerlink" title="第8章　ネットワーククライアントの管理"></a>第8章　ネットワーククライアントの管理</h2><h3 id="8-1-DHCPの設定"><a href="#8-1-DHCPの設定" class="headerlink" title="8.1　DHCPの設定"></a>8.1　DHCPの設定</h3><h3 id="8-2-PAM認証"><a href="#8-2-PAM認証" class="headerlink" title="8.2　PAM認証"></a>8.2　PAM認証</h3><h3 id="8-3-LDAP"><a href="#8-3-LDAP" class="headerlink" title="8.3　LDAP"></a>8.3　LDAP</h3><h2 id="第9章-ドメインネームサーバー"><a href="#第9章-ドメインネームサーバー" class="headerlink" title="第9章　ドメインネームサーバー"></a>第9章　ドメインネームサーバー</h2><h3 id="9-1-DNSの基本"><a href="#9-1-DNSの基本" class="headerlink" title="9.1　DNSの基本"></a>9.1　DNSの基本</h3><h3 id="9-2-BINDの基本設定"><a href="#9-2-BINDの基本設定" class="headerlink" title="9.2　BINDの基本設定"></a>9.2　BINDの基本設定</h3><h3 id="9-3-ゾーンファイルの管理"><a href="#9-3-ゾーンファイルの管理" class="headerlink" title="9.3　ゾーンファイルの管理"></a>9.3　ゾーンファイルの管理</h3><h3 id="9-4-DNSサーバーのセキュリティ"><a href="#9-4-DNSサーバーのセキュリティ" class="headerlink" title="9.4　DNSサーバーのセキュリティ"></a>9.4　DNSサーバーのセキュリティ</h3><h2 id="第10章-HTTPサーバーとプロキシサーバー"><a href="#第10章-HTTPサーバーとプロキシサーバー" class="headerlink" title="第10章　HTTPサーバーとプロキシサーバー"></a>第10章　HTTPサーバーとプロキシサーバー</h2><h3 id="10-1-Webサーバーの設定"><a href="#10-1-Webサーバーの設定" class="headerlink" title="10.1　Webサーバーの設定"></a>10.1　Webサーバーの設定</h3><h3 id="10-2-Nginx"><a href="#10-2-Nginx" class="headerlink" title="10.2　Nginx"></a>10.2　Nginx</h3><h3 id="10-3-プロキシサーバーの設定"><a href="#10-3-プロキシサーバーの設定" class="headerlink" title="10.3　プロキシサーバーの設定"></a>10.3　プロキシサーバーの設定</h3><h2 id="第11章-電子メールサービス"><a href="#第11章-電子メールサービス" class="headerlink" title="第11章　電子メールサービス"></a>第11章　電子メールサービス</h2><h3 id="11-1-SMTPサーバーの構築"><a href="#11-1-SMTPサーバーの構築" class="headerlink" title="11.1　SMTPサーバーの構築"></a>11.1　SMTPサーバーの構築</h3><h3 id="11-2-Dovecotの利用"><a href="#11-2-Dovecotの利用" class="headerlink" title="11.2　Dovecotの利用"></a>11.2　Dovecotの利用</h3><h2 id="第12章-ファイル共有サービス"><a href="#第12章-ファイル共有サービス" class="headerlink" title="第12章　ファイル共有サービス"></a>第12章　ファイル共有サービス</h2><h3 id="12-1-Microsoftネットワーク"><a href="#12-1-Microsoftネットワーク" class="headerlink" title="12.1　Microsoftネットワーク"></a>12.1　Microsoftネットワーク</h3><h3 id="12-2-Sambaサーバーの構築"><a href="#12-2-Sambaサーバーの構築" class="headerlink" title="12.2　Sambaサーバーの構築"></a>12.2　Sambaサーバーの構築</h3><h3 id="12-3-NFSサーバーの構築"><a href="#12-3-NFSサーバーの構築" class="headerlink" title="12.3　NFSサーバーの構築"></a>12.3　NFSサーバーの構築</h3><h2 id="第13章-システムのセキュリティ"><a href="#第13章-システムのセキュリティ" class="headerlink" title="第13章　システムのセキュリティ"></a>第13章　システムのセキュリティ</h2><h3 id="13-1-パケットフィルタリング"><a href="#13-1-パケットフィルタリング" class="headerlink" title="13.1　パケットフィルタリング"></a>13.1　パケットフィルタリング</h3><h3 id="13-2-OpenSSH"><a href="#13-2-OpenSSH" class="headerlink" title="13.2　OpenSSH"></a>13.2　OpenSSH</h3><h3 id="13-3-OpenVPN"><a href="#13-3-OpenVPN" class="headerlink" title="13.3　OpenVPN"></a>13.3　OpenVPN</h3><h3 id="13-4-セキュリティ業務"><a href="#13-4-セキュリティ業務" class="headerlink" title="13.4　セキュリティ業務"></a>13.4　セキュリティ業務</h3><h2 id="第14章-システムアーキテクチャ"><a href="#第14章-システムアーキテクチャ" class="headerlink" title="第14章　システムアーキテクチャ"></a>第14章　システムアーキテクチャ</h2><h3 id="14-1-高可用システムの実現方法"><a href="#14-1-高可用システムの実現方法" class="headerlink" title="14.1　高可用システムの実現方法"></a>14.1　高可用システムの実現方法</h3><h3 id="14-2-キャパシティプランニングとスケーラビリティの確保"><a href="#14-2-キャパシティプランニングとスケーラビリティの確保" class="headerlink" title="14.2　キャパシティプランニングとスケーラビリティの確保"></a>14.2　キャパシティプランニングとスケーラビリティの確保</h3><h3 id="14-3-クラウドサービス上のシステム構成"><a href="#14-3-クラウドサービス上のシステム構成" class="headerlink" title="14.3　クラウドサービス上のシステム構成"></a>14.3　クラウドサービス上のシステム構成</h3><h3 id="14-4-典型的なシステムアーキテクチャ"><a href="#14-4-典型的なシステムアーキテクチャ" class="headerlink" title="14.4　典型的なシステムアーキテクチャ"></a>14.4　典型的なシステムアーキテクチャ</h3><h2 id="第15章-202模擬試験"><a href="#第15章-202模擬試験" class="headerlink" title="第15章　202模擬試験"></a>第15章　202模擬試験</h2><h2 id="模擬試験-問題-1"><a href="#模擬試験-問題-1" class="headerlink" title="模擬試験 問題"></a>模擬試験 問題</h2><h2 id="模擬試験-解答・解説-1"><a href="#模擬試験-解答・解説-1" class="headerlink" title="模擬試験 解答・解説"></a>模擬試験 解答・解説</h2><h2 id="付録-Linux実習環境の使い方"><a href="#付録-Linux実習環境の使い方" class="headerlink" title="付録　Linux実習環境の使い方"></a>付録　Linux実習環境の使い方</h2><h2 id="Linux実習環境の利用について"><a href="#Linux実習環境の利用について" class="headerlink" title="Linux実習環境の利用について"></a>Linux実習環境の利用について</h2><h2 id="VirtualBoxのインストール"><a href="#VirtualBoxのインストール" class="headerlink" title="VirtualBoxのインストール"></a>VirtualBoxのインストール</h2><h2 id="仮想マシンの使い方"><a href="#仮想マシンの使い方" class="headerlink" title="仮想マシンの使い方"></a>仮想マシンの使い方</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux教科書-LinuCレベル2Version10-0対応&quot;&gt;&lt;a href=&quot;#Linux教科書-LinuCレベル2Version10-0対応&quot; class=&quot;headerlink&quot; title=&quot;Linux教科書_LinuCレベル2Version10.0対</summary>
      
    
    
    
    <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>現場で使える Ruby on Rails 5速習実践ガイド</title>
    <link href="http://yoursite.com/Ruby/2021-03_%E7%8F%BE%E5%A0%B4%E3%81%A7%E4%BD%BF%E3%81%88%E3%82%8B%20Ruby%20on%20Rails%205%E9%80%9F%E7%BF%92%E5%AE%9F%E8%B7%B5%E3%82%AC%E3%82%A4%E3%83%89/"/>
    <id>http://yoursite.com/Ruby/2021-03_%E7%8F%BE%E5%A0%B4%E3%81%A7%E4%BD%BF%E3%81%88%E3%82%8B%20Ruby%20on%20Rails%205%E9%80%9F%E7%BF%92%E5%AE%9F%E8%B7%B5%E3%82%AC%E3%82%A4%E3%83%89/</id>
    <published>2020-08-19T15:00:00.000Z</published>
    <updated>2021-03-28T16:08:23.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="現場で使える-Ruby-on-Rails-5速習実践ガイド（ISBN978-4-8399-6222-7）"><a href="#現場で使える-Ruby-on-Rails-5速習実践ガイド（ISBN978-4-8399-6222-7）" class="headerlink" title="現場で使える Ruby on Rails 5速習実践ガイド（ISBN978-4-8399-6222-7）"></a>現場で使える Ruby on Rails 5速習実践ガイド（ISBN978-4-8399-6222-7）</h1><h2 id="理解したこと"><a href="#理解したこと" class="headerlink" title="理解したこと"></a>理解したこと</h2><h2 id="書籍サイト"><a href="#書籍サイト" class="headerlink" title="書籍サイト"></a>書籍サイト</h2><p><a href="https://book.mynavi.jp/ec/products/detail/id=93905">https://book.mynavi.jp/ec/products/detail/id=93905</a></p><h2 id="サポートサイト"><a href="#サポートサイト" class="headerlink" title="サポートサイト"></a>サポートサイト</h2><p><a href="https://book.mynavi.jp/supportsite/detail/9784839962227.html">https://book.mynavi.jp/supportsite/detail/9784839962227.html</a></p><h2 id="書籍情報"><a href="#書籍情報" class="headerlink" title="書籍情報"></a>書籍情報</h2><p>Railsアプリの基本から実践的なノウハウまでこの1冊で！本書は、Ruby on Rails（以下Rails）を使ってWebアプリケーションを開発するための解説書です。</p><p>RailsでどのようにWebアプリケーションを作るのかという基本的なところから、現場のニーズに合わせてどのように機能を追加していくのか、テストはどのように行うのか、複数人で開発していく場合の方法といった実践的なトピックまで、幅広くカバーしています。</p><p>本書を読んだ方が単にRailsでWebアプリケーションを作れるようになるだけでなく、「Railsらしいアプリケーションコード」を書けるようになり、そして開発チームの仲間とともに実現したいことを実現できるように、という視点で必要な情報をまとめた1冊です。</p><p>なお、本書の対応バージョンはRuby 2.5／Rails5.2です。Rails5.2から導入されたActive Storageやcredentials.yml.encについても解説しています。macOS／Windows 10（64ビット版）対応。</p><p>■読者対象について</p><p>Ruby以外の言語でのWebアプリケーションの開発や、オブジェクト指向プログラミングについては知識・経験があるものの、RubyやRailsについては初めて学ぶ方を主な対象にしています。</p><p>ただし、Webアプリケーションやオブジェクト指向が初めての方にも理解しやすいように説明するように努めています。</p><p>■構成と内容について</p><p>本書の構成は以下の通りです。</p><p>＜入門編＞<br>Chapter 1 RailsのためのRuby入門<br>Chapter 2 Railsアプリケーションをのぞいてみよう<br>Chapter 3 タスク管理アプリケーションを作ろう</p><p>＜レベルアップ編＞<br>Chapter 4 現実の複雑さに対応する<br>Chapter 5 テストをはじめよう<br>Chapter 6 Railsの全体像を理解する<br>Chapter 7 機能を追加してみよう</p><p>＜発展編＞<br>Chapter 8 RailsとJavaScript<br>Chapter 9 複数人でRailsアプリケーションを開発する<br>Chapter 10 Railsアプリケーションと長く付き合うために</p><p>章ごとの内容は以下の通りです。</p><p>Chapter1では、Railsのアプリケーションのコードを読み書きするために最低限必要となるようなRubyの基礎知識を解説していきます。</p><p>Chapter2では、RubyやRailsが動作する環境を構築するとともに、簡単なサンプルアプリケーションを作成し、中身の構成を解説していきます。</p><p>Chapter3では、シンプルなタスク管理アプリケーションの作成を通じて、CRUDと呼ばれるソフトウェアの基本的な機能をRailsで実装する方法について学んでいきます。</p><p>Chapter4では、Chapter3で作成したアプリケーションに、いくつかの機能を追加していきます。具体的には「データ内容の制限」「検証」「コールバック」「フィルタ」「ログイン機能の追加」「関連」「検索」について解説していきます。</p><p>Chapter5では、Railsにあらかじめ用意されている「自動テスト」という仕組みについて、利用方法や注意事項を解説します。</p><p>Chapter6では、Railsの備える機能や、Railsを取り巻く世界の全体像を改めて一望し、これまで取り上げる機会のなかったいくつかの重要な要素について解説していきます。</p><p>Chapter7では、Railsアプリケーションで比較的よくある具体的な機能を実現するやり方を、Chapter4までで作成したアプリケーションへの機能追加という形で紹介していきます。</p><p>Chapter8では、Railsを利用する際のJavaScriptの扱い方について解説していきます。モダンなJavaScriptについても扱っています。</p><p>Chapter9では、複数人で開発を行う場合に重要になってくる知識や、注意すべきポイントについて解説していきます。</p><p>Chapter10では、Railsアプリケーションと長く付き合っていくために特に重要なテーマとして、「バージョンアップに対してどのように取り組むべきか」「Railsアプリケーションコードが複雑になっていくことにどうに立ち向かい、メンテナンスしやすい状態の維持を図るのか」について扱います。</p><h2 id="＜入門編＞"><a href="#＜入門編＞" class="headerlink" title="＜入門編＞"></a>＜入門編＞</h2><h2 id="Chapter-1-RailsのためのRuby入門"><a href="#Chapter-1-RailsのためのRuby入門" class="headerlink" title="Chapter 1 RailsのためのRuby入門"></a>Chapter 1 RailsのためのRuby入門</h2><h2 id="1-1-オブジェクトを理解しよう"><a href="#1-1-オブジェクトを理解しよう" class="headerlink" title="1-1 オブジェクトを理解しよう"></a>1-1 オブジェクトを理解しよう</h2><h3 id="1-1-1-万物がオブジェクト"><a href="#1-1-1-万物がオブジェクト" class="headerlink" title="1-1-1 万物がオブジェクト"></a>1-1-1 万物がオブジェクト</h3><ul><li>オブジェクトという存在になれましょう<ul><li>※詳細割愛</li></ul></li></ul><h3 id="1-1-2-irb"><a href="#1-1-2-irb" class="headerlink" title="1-1-2 irb"></a>1-1-2 irb</h3><ul><li><p>Rubyには、<code>irb(アイアールビー)</code>という、対話的な実行環境が付属している</p></li><li><p>オブジェクトがどういうものかを体験していただくために操作しながら読みすすめる</p></li><li><p>以下から実行環境を取得しておいた</p><ul><li><a href="https://rubyinstaller.org/">https://rubyinstaller.org/</a></li></ul></li></ul><h3 id="1-1-3-文字列"><a href="#1-1-3-文字列" class="headerlink" title="1-1-3 文字列"></a>1-1-3 文字列</h3><ul><li>ダウブルクォーテーションかシングルクォーテーションで文字列を囲む<ul><li>違い：<a href="https://qiita.com/ryosuketter/items/ddad508cb0124e4fe378">https://qiita.com/ryosuketter/items/ddad508cb0124e4fe378</a></li></ul></li></ul><h3 id="1-1-4-数値"><a href="#1-1-4-数値" class="headerlink" title="1-1-4 数値"></a>1-1-4 数値</h3><h3 id="1-1-5-オブジェクトに、自分が何者かを聞いてみる"><a href="#1-1-5-オブジェクトに、自分が何者かを聞いてみる" class="headerlink" title="1-1-5 オブジェクトに、自分が何者かを聞いてみる"></a>1-1-5 オブジェクトに、自分が何者かを聞いてみる</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">irb(main):006:0&gt;</span> <span class="string">"氏名"</span>.class</span><br><span class="line">=&gt; String</span><br><span class="line"><span class="meta">irb(main):007:0&gt;</span> <span class="number">1</span>.class</span><br><span class="line">=&gt; Integer</span><br><span class="line"><span class="meta">irb(main):008:0&gt;</span> <span class="number">1.1</span>.class</span><br><span class="line">=&gt; Float</span><br><span class="line"><span class="meta">irb(main):009:0&gt;</span> true.class</span><br><span class="line">=&gt; TrueClass</span><br><span class="line"><span class="meta">irb(main):010:0&gt;</span> false.class</span><br><span class="line">=&gt; FalseClass</span><br><span class="line"><span class="meta">irb(main):013:0&gt;</span> <span class="string">"氏名"</span>.object_id</span><br><span class="line">=&gt; <span class="number">300</span></span><br><span class="line"><span class="meta">irb(main):014:0&gt;</span> <span class="string">"氏名"</span>.object_id</span><br><span class="line">=&gt; <span class="number">320</span></span><br><span class="line"><span class="meta">irb(main):015:0&gt;</span> <span class="string">"氏名"</span>.object_id</span><br><span class="line">=&gt; <span class="number">340</span></span><br><span class="line"><span class="meta">irb(main):016:0&gt;</span> <span class="number">1</span>.object_id</span><br><span class="line">=&gt; <span class="number">3</span></span><br><span class="line"><span class="meta">irb(main):017:0&gt;</span> <span class="number">1</span>.object_id</span><br><span class="line">=&gt; <span class="number">3</span></span><br><span class="line">/<span class="regexp">/ 数値は同じオブジェクトIDを取るが、文字列は異なるオブジェクトIDを取る</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ この辺はJavaのプリミティブ型、参照型と同じ概念のよう</span></span><br></pre></td></tr></table></figure><h3 id="1-1-6-クラスとインスタンス"><a href="#1-1-6-クラスとインスタンス" class="headerlink" title="1-1-6 クラスとインスタンス"></a>1-1-6 クラスとインスタンス</h3><ul><li>「オブジェクトXのクラスがAであるとき、XはAのインスタンス（オブジェクト）である」といいます。</li></ul><h3 id="1-1-7-オブジェクトの機能はクラスで決まる"><a href="#1-1-7-オブジェクトの機能はクラスで決まる" class="headerlink" title="1-1-7 オブジェクトの機能はクラスで決まる"></a>1-1-7 オブジェクトの機能はクラスで決まる</h3><ul><li>オブジェクトの種類により、プロパティなどが異なりますよという説明</li></ul><h3 id="1-1-8-変数"><a href="#1-1-8-変数" class="headerlink" title="1-1-8 変数"></a>1-1-8 変数</h3><ul><li><p>ローカル変数の記載</p><ul><li>スネークケースで先頭は小文字か<code>_(アンダースコア)</code>で記載されるのでこれに習おう<ul><li>sample_message</li><li>part2</li><li>_user</li></ul></li></ul></li><li><p>定数は大文字で始まる名前にすること。</p></li></ul><h3 id="1-1-9-コメント"><a href="#1-1-9-コメント" class="headerlink" title="1-1-9 コメント"></a>1-1-9 コメント</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># １行をコメントアウト</span></span><br><span class="line">name = <span class="string">"氏名"</span> <span class="comment"># 途中からも可能</span></span><br></pre></td></tr></table></figure><h3 id="1-1-10-メソッド"><a href="#1-1-10-メソッド" class="headerlink" title="1-1-10 メソッド"></a>1-1-10 メソッド</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(ネズミ)</span></span></span><br><span class="line">    puts <span class="string">"一生懸命 <span class="subst">#&#123;ネズミ&#125;</span> を追いかけた..."</span> <span class="comment"># 画面にメッセージを出力します</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">タマ = cat.new</span><br></pre></td></tr></table></figure><ul><li>メソッドの基本的な説明</li><li>メソッドを呼び出すときにかっこを省略できる</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">irb(main):066:0&gt;</span> message1 = <span class="string">"こんにちは"</span></span><br><span class="line">=&gt; <span class="string">"こんにちは"</span></span><br><span class="line"><span class="meta">irb(main):067:0&gt;</span> message2 = <span class="string">"こんばんは"</span></span><br><span class="line">=&gt; <span class="string">"こんばんは"</span></span><br><span class="line">irb(main)<span class="symbol">:</span><span class="number">06</span>8<span class="symbol">:</span><span class="number">0</span>* split = ^C</span><br><span class="line"><span class="meta">irb(main):068:0&gt;</span> split = <span class="string">"｜"</span></span><br><span class="line">=&gt; <span class="string">"｜"</span></span><br><span class="line"><span class="meta">irb(main):069:0&gt;</span> message3 = <span class="string">"あいさつ！"</span></span><br><span class="line">=&gt; <span class="string">"あいさつ！"</span></span><br><span class="line"><span class="meta">irb(main):070:0&gt;</span> message3.concat message1, message2</span><br><span class="line">=&gt; <span class="string">"あいさつ！こんにちはこんばんは"</span></span><br></pre></td></tr></table></figure><h2 id="1-2-自分でクラスを作ってみよう"><a href="#1-2-自分でクラスを作ってみよう" class="headerlink" title="1-2 自分でクラスを作ってみよう"></a>1-2 自分でクラスを作ってみよう</h2><h3 id="1-2-1-クラスを作る"><a href="#1-2-1-クラスを作る" class="headerlink" title="1-2-1 クラスを作る"></a>1-2-1 クラスを作る</h3><h3 id="1-2-2-Userクラスを作る"><a href="#1-2-2-Userクラスを作る" class="headerlink" title="1-2-2 Userクラスを作る"></a>1-2-2 Userクラスを作る</h3><h3 id="1-2-3-Userクラスにメソッドを定義する"><a href="#1-2-3-Userクラスにメソッドを定義する" class="headerlink" title="1-2-3 Userクラスにメソッドを定義する"></a>1-2-3 Userクラスにメソッドを定義する</h3><h3 id="1-2-4-インスタンス変数"><a href="#1-2-4-インスタンス変数" class="headerlink" title="1-2-4 インスタンス変数"></a>1-2-4 インスタンス変数</h3><ul><li>インスタンス変数：オブジェクトが抱えている変数</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">name=</span><span class="params">(name)</span></span></span><br><span class="line">    @name = name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">name</span></span></span><br><span class="line">    @name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="1-2-5-ローカル変数とインスタンス変数の違い"><a href="#1-2-5-ローカル変数とインスタンス変数の違い" class="headerlink" title="1-2-5 ローカル変数とインスタンス変数の違い"></a>1-2-5 ローカル変数とインスタンス変数の違い</h3><h3 id="1-2-6-属性"><a href="#1-2-6-属性" class="headerlink" title="1-2-6 属性"></a>1-2-6 属性</h3><ul><li>一般的にオブジェクトが抱えるデータのことを「属性（Attribute）」</li><li>属性とインスタンス変数はよく似た概念と言える</li></ul><h3 id="1-2-7-ゲッターやセッターを簡単に定義する"><a href="#1-2-7-ゲッターやセッターを簡単に定義する" class="headerlink" title="1-2-7 ゲッターやセッターを簡単に定義する"></a>1-2-7 ゲッターやセッターを簡単に定義する</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="comment">#attr_accessor :name</span></span><br><span class="line">  <span class="comment">#attr_reader :name</span></span><br><span class="line">  <span class="comment">#attr_writer :name</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="1-2-8-住んでいる場所やEメールアドレスを持たせる"><a href="#1-2-8-住んでいる場所やEメールアドレスを持たせる" class="headerlink" title="1-2-8 住んでいる場所やEメールアドレスを持たせる"></a>1-2-8 住んでいる場所やEメールアドレスを持たせる</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:name</span>, <span class="symbol">:address</span>, <span class="symbol">:email</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="1-2-9-メソッドからメソッドを使う"><a href="#1-2-9-メソッドからメソッドを使う" class="headerlink" title="1-2-9 メソッドからメソッドを使う"></a>1-2-9 メソッドからメソッドを使う</h3><h3 id="1-2-10-まとめ-オブジェクトの振る舞いとデータ"><a href="#1-2-10-まとめ-オブジェクトの振る舞いとデータ" class="headerlink" title="1-2-10 まとめ - オブジェクトの振る舞いとデータ"></a>1-2-10 まとめ - オブジェクトの振る舞いとデータ</h3><h2 id="1-3-Rubyプログラムの基礎知識"><a href="#1-3-Rubyプログラムの基礎知識" class="headerlink" title="1-3 Rubyプログラムの基礎知識"></a>1-3 Rubyプログラムの基礎知識</h2><h3 id="1-3-1-演算子"><a href="#1-3-1-演算子" class="headerlink" title="1-3-1 演算子"></a>1-3-1 演算子</h3><ul><li>目新しい演算子はないので割愛</li></ul><h3 id="1-3-2-nil"><a href="#1-3-2-nil" class="headerlink" title="1-3-2 nil"></a>1-3-2 nil</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nilにする</span></span><br><span class="line">value = <span class="literal">nil</span></span><br><span class="line"><span class="comment"># nilかどうか確かめる</span></span><br><span class="line">value.<span class="literal">nil</span>?</span><br></pre></td></tr></table></figure><h3 id="1-3-3-真偽"><a href="#1-3-3-真偽" class="headerlink" title="1-3-3 真偽"></a>1-3-3 真偽</h3><ul><li>Rubyでは0も真になるので注意！</li></ul><h3 id="1-3-4-条件分岐"><a href="#1-3-4-条件分岐" class="headerlink" title="1-3-4 条件分岐"></a>1-3-4 条件分岐</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> number == <span class="number">1</span></span><br><span class="line">  puts <span class="string">'数値は1です'</span></span><br><span class="line"><span class="keyword">elsif</span> number == <span class="number">2</span></span><br><span class="line">  puts <span class="string">'数値は2です'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">'数値は1や2以外です'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ifは評価結果を返すことを抑えておく</span></span><br><span class="line">number = <span class="number">100</span></span><br><span class="line">message = <span class="keyword">if</span> number &gt; <span class="number">50</span></span><br><span class="line">            <span class="string">"numberは50より大きいです"</span></span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="string">"numberは50以下です"</span></span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line"><span class="comment"># elseがなくどのオブジェクトにも当てはまらない場合はnilオブジェクト</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当てはまらない場合に分岐する unless</span></span><br><span class="line"><span class="comment"># ifの裏返しを表現する方法</span></span><br><span class="line"><span class="comment"># これは使わなくても良さそう わかりにくくなる</span></span><br><span class="line">age = <span class="number">16</span></span><br><span class="line"><span class="keyword">unless</span> age &gt;= <span class="number">20</span></span><br><span class="line">  puts <span class="string">"未成年者には酒類を提供できません！"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 後置if</span></span><br><span class="line">puts <span class="string">'おはようございます'</span> <span class="keyword">if</span> <span class="literal">true</span></span><br><span class="line">puts <span class="string">'お疲れ様でした'</span> <span class="keyword">if</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="1-3-5-配列"><a href="#1-3-5-配列" class="headerlink" title="1-3-5 配列"></a>1-3-5 配列</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eachメソッド</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a.each <span class="keyword">do</span> <span class="params">|element|</span></span><br><span class="line">  puts element</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># forでもかける</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> a</span><br><span class="line">  puts element</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>Rubyに慣れている人は、<strong>For文よりもeachを好んで使うとのこと</strong></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配列に要素を追加する場合は&lt;&lt;を使う</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a &lt;&lt; <span class="number">4</span></span><br></pre></td></tr></table></figure><p><a href="https://qiita.com/may88seiji/items/ce9396a4c267a3d449ae">https://qiita.com/may88seiji/items/ce9396a4c267a3d449ae</a></p><h3 id="1-3-6-ハッシュ"><a href="#1-3-6-ハッシュ" class="headerlink" title="1-3-6 ハッシュ"></a>1-3-6 ハッシュ</h3><ul><li>内部的にデータをキーと対応づけて格納しておくデータ構造</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pref = &#123; <span class="symbol">tokyo:</span> <span class="number">13636222</span>, <span class="symbol">kanagawa:</span> <span class="number">9144572</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">irb(main):060:0&gt;</span> pref</span><br><span class="line">=&gt; &#123;<span class="symbol">:tokyo=&gt;</span><span class="number">13636222</span>, <span class="symbol">:kanagawa=&gt;</span><span class="number">9144572</span>&#125;</span><br><span class="line"><span class="meta">irb(main):061:0&gt;</span> pref[<span class="symbol">:tokyo</span>]</span><br><span class="line">=&gt; <span class="number">13636222</span></span><br></pre></td></tr></table></figure><h2 id="1-4-少し高度なテクニック"><a href="#1-4-少し高度なテクニック" class="headerlink" title="1-4 少し高度なテクニック"></a>1-4 少し高度なテクニック</h2><h3 id="1-4-1-initialize"><a href="#1-4-1-initialize" class="headerlink" title="1-4-1 initialize"></a>1-4-1 initialize</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:name</span>, <span class="symbol">:address</span>, <span class="symbol">:email</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(name, address, email)</span></span></span><br><span class="line">    @name = name</span><br><span class="line">    @address = address</span><br><span class="line">    @email = email</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">user = User.new(<span class="string">"田中太郎"</span>,<span class="string">"東京都"</span>,<span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><h3 id="1-4-2-メソッドの呼び出しに制限をかける"><a href="#1-4-2-メソッドの呼び出しに制限をかける" class="headerlink" title="1-4-2 メソッドの呼び出しに制限をかける"></a>1-4-2 メソッドの呼び出しに制限をかける</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(money)</span></span></span><br><span class="line">    @money = money</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">billionaire?</span></span></span><br><span class="line">    money &gt;= <span class="number">1000000000</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># privateキーワード以降のメソッドはプライベートメソッドとなる</span></span><br><span class="line">  <span class="comment"># initializeメソッドはprivate指定しなくても自動的にプライベートになる</span></span><br><span class="line">  private</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">money</span></span></span><br><span class="line">    @money</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">person = Person.new(<span class="number">1000000000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># privateなのでエラーになる！</span></span><br><span class="line">person.money</span><br></pre></td></tr></table></figure><h3 id="1-4-3-引数にデフォルト値を指定する"><a href="#1-4-3-引数にデフォルト値を指定する" class="headerlink" title="1-4-3 引数にデフォルト値を指定する"></a>1-4-3 引数にデフォルト値を指定する</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># デフォルト値を指定することができる</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(full = <span class="literal">true</span>, with_age = <span class="literal">true</span>)</span></span></span><br><span class="line">  n = <span class="keyword">if</span> full</span><br><span class="line">        <span class="string">"<span class="subst">#&#123;given_name&#125;</span> <span class="subst">#&#123;family_name&#125;</span>"</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        given_name</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">  n &lt;&lt; <span class="string">"(<span class="subst">#&#123;age&#125;</span>)"</span> <span class="keyword">if</span> with_age</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="1-4-4-キーワード引数"><a href="#1-4-4-キーワード引数" class="headerlink" title="1-4-4 キーワード引数"></a>1-4-4 キーワード引数</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># キーワード引数の定義</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(<span class="symbol">full:</span> <span class="literal">true</span>, <span class="symbol">with_age:</span> <span class="literal">true</span>)</span></span></span><br><span class="line">  n = <span class="keyword">if</span> full</span><br><span class="line">        <span class="string">"<span class="subst">#&#123;given_name&#125;</span> <span class="subst">#&#123;family_name&#125;</span>"</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        given_name</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">  n &lt;&lt; <span class="string">"(<span class="subst">#&#123;age&#125;</span>)"</span> <span class="keyword">if</span> with_age</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># デフォルト値の省略も可能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(<span class="symbol">full:</span> <span class="literal">true</span>, <span class="symbol">with_age:</span>)</span></span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># どんな順序で呼び出してもいい</span></span><br><span class="line">person.name(<span class="symbol">full:</span> <span class="literal">true</span>, <span class="symbol">with_age:</span> <span class="literal">false</span>)</span><br><span class="line">person.name(<span class="symbol">with_age:</span> <span class="literal">false</span>, <span class="symbol">full:</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h2 id="1-5-似たところのあるクラスを作りたいとき"><a href="#1-5-似たところのあるクラスを作りたいとき" class="headerlink" title="1-5 似たところのあるクラスを作りたいとき"></a>1-5 似たところのあるクラスを作りたいとき</h2><h3 id="1-5-1-継承"><a href="#1-5-1-継承" class="headerlink" title="1-5-1 継承"></a>1-5-1 継承</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt; で継承ができる</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">title</span></span></span><br><span class="line">    <span class="string">'本のタイトル'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Magazine</span> &lt; Book</span></span><br><span class="line">  <span class="comment"># オーバーライド</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">title</span></span></span><br><span class="line">    <span class="string">'雑誌のタイトル'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="1-5-2-モジュールによる共通化（Mix-in）"><a href="#1-5-2-モジュールによる共通化（Mix-in）" class="headerlink" title="1-5-2 モジュールによる共通化（Mix-in）"></a>1-5-2 モジュールによる共通化（Mix-in）</h3><ul><li>Rubyの基本単位のオブジェクトであり、オブジェクトの設計図としてクラスがある</li><li>ある一連の振る舞いの設計図を一箇所にまとめた存在として「モジュール(Module)」という概念がある</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Chatting</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">chat</span></span></span><br><span class="line">    <span class="string">"hello"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line">  <span class="keyword">include</span> Chatting</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>モジュールをクラスに取り込んで振る舞いを追加することをRubyでは、「Mix-in」(ミックスイン)と呼びます</p><h2 id="Column-クラスメソッド"><a href="#Column-クラスメソッド" class="headerlink" title="Column クラスメソッド"></a>Column クラスメソッド</h2><ul><li>クラスに対して呼び出せるクラスメソッドという概念が存在する</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tax</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">rate</span></span></span><br><span class="line">    <span class="number">1.08</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="1-6-プログラムの異常を検知しよう（例外捕捉）"><a href="#1-6-プログラムの異常を検知しよう（例外捕捉）" class="headerlink" title="1-6 プログラムの異常を検知しよう（例外捕捉）"></a>1-6 プログラムの異常を検知しよう（例外捕捉）</h2><ul><li>独自例外を作成するときはStandardErrorを継承して作成する</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">rescue</span></span><br><span class="line"><span class="keyword">ensure</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># メソッド内の例外処理なら以下のようにかける</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">method</span></span></span><br><span class="line">  <span class="keyword">rescue</span></span><br><span class="line">  <span class="comment"># 例外に対応するコード</span></span><br><span class="line">  <span class="keyword">ensure</span></span><br><span class="line">  <span class="comment"># 例外が発生してもしなくても必ず実行したいコード</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  do_something</span><br><span class="line"><span class="keyword">rescue</span> SomeSpecialError =&gt; e</span><br><span class="line">  <span class="comment"># エラーオブジェクトを変数として受け取る方法</span></span><br><span class="line">  puts <span class="string">"<span class="subst">#&#123;e.<span class="keyword">class</span>&#125;</span> (<span class="subst">#&#123;e.message&#125;</span>)が発生しました。処理を続行します。"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="1-7-読めると便利！Rubyっぽい書き方"><a href="#1-7-読めると便利！Rubyっぽい書き方" class="headerlink" title="1-7 読めると便利！Rubyっぽい書き方"></a>1-7 読めると便利！Rubyっぽい書き方</h2><h3 id="1-7-1-nil-ガード"><a href="#1-7-1-nil-ガード" class="headerlink" title="1-7-1 nil ガード"></a>1-7-1 nil ガード</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">number <span class="params">||</span>= <span class="number">10</span></span><br><span class="line">number <span class="params">||</span> (number = <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">children</span></span></span><br><span class="line">  @children <span class="params">||</span>= []</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># childrenがnilの状態であっても必ず配列で初期化されるので安心</span></span><br></pre></td></tr></table></figure><h3 id="1-7-2-ぼっち演算子-amp"><a href="#1-7-2-ぼっち演算子-amp" class="headerlink" title="1-7-2 ぼっち演算子 &amp;."></a>1-7-2 ぼっち演算子 &amp;.</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user = User.new</span><br><span class="line">user.name</span><br><span class="line"></span><br><span class="line">object = <span class="literal">nil</span></span><br><span class="line">object&amp;.name</span><br><span class="line"><span class="comment"># =&gt; ここでエラーにならない</span></span><br></pre></td></tr></table></figure><h3 id="1-7-3-記法"><a href="#1-7-3-記法" class="headerlink" title="1-7-3 %記法"></a>1-7-3 %記法</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># すべての要素が文字列である配列は、通常の配列記法の他に、「%w」というキーワードを使って書くことができる</span></span><br><span class="line">ary1 = [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>]</span><br><span class="line">puts ary1</span><br><span class="line"><span class="comment"># irb(main):001:0&gt; ary1 = ['apple','banana','orange']</span></span><br><span class="line"><span class="comment"># =&gt; ["apple", "banana", "orange"]</span></span><br><span class="line"><span class="comment"># irb(main):002:0&gt; puts ary1</span></span><br><span class="line"><span class="comment"># apple</span></span><br><span class="line"><span class="comment"># banana</span></span><br><span class="line"><span class="comment"># orange</span></span><br><span class="line"><span class="comment"># =&gt; nil</span></span><br><span class="line"></span><br><span class="line"><span class="meta">irb(main):003:0&gt;</span> ary2 = <span class="string">%w(apple banana orange)</span></span><br><span class="line">=&gt; [<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"orange"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># すべての要素がシンボルの場合は、「%i」というキーワードを使ってかける</span></span><br><span class="line"><span class="meta">irb(main):004:0&gt;</span> ary2 = %i(apple banana orange)</span><br><span class="line">=&gt; [<span class="symbol">:apple</span>, <span class="symbol">:banana</span>, <span class="symbol">:orange</span>]</span><br></pre></td></tr></table></figure><h3 id="1-7-4-配列の各要素から特定の属性だけを取り出す"><a href="#1-7-4-配列の各要素から特定の属性だけを取り出す" class="headerlink" title="1-7-4 配列の各要素から特定の属性だけを取り出す"></a>1-7-4 配列の各要素から特定の属性だけを取り出す</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:name</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">user1 = User.new</span><br><span class="line">user1.name = <span class="string">'テスト１'</span></span><br><span class="line">user2 = User.new</span><br><span class="line">user2.name = <span class="string">'テスト２'</span></span><br><span class="line">user3 = User.new</span><br><span class="line">user3.name = <span class="string">'テスト３'</span></span><br><span class="line"></span><br><span class="line">users = [user1, user2, user3]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------ 名前だけが入った配列を求める方法１ --------</span></span><br><span class="line"></span><br><span class="line">names = []</span><br><span class="line">user.each <span class="keyword">do</span> <span class="params">|user|</span></span><br><span class="line">  names &lt;&lt; user.name</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p names</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------ 名前だけが入った配列を求める方法２ --------</span></span><br><span class="line"></span><br><span class="line">names = users.map <span class="keyword">do</span> <span class="params">|user|</span></span><br><span class="line">  user.name</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------ 名前だけが入った配列を求める方法３ --------</span></span><br><span class="line"></span><br><span class="line">names = users.map &#123; <span class="params">|user|</span> user.name &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------ 名前だけが入った配列を求める方４ -------- ※これが一番簡潔！</span></span><br><span class="line"></span><br><span class="line">nemes = users.map(&amp;<span class="symbol">:name</span>)</span><br></pre></td></tr></table></figure><ul><li>※なれないとわからない書き方だと思った</li></ul><h2 id="Chapter2-Railsアプリケーションをのぞいてみよう"><a href="#Chapter2-Railsアプリケーションをのぞいてみよう" class="headerlink" title="Chapter2 Railsアプリケーションをのぞいてみよう"></a>Chapter2 Railsアプリケーションをのぞいてみよう</h2><h2 id="2-1-コマンド実行環境を準備しよう"><a href="#2-1-コマンド実行環境を準備しよう" class="headerlink" title="2-1 コマンド実行環境を準備しよう"></a>2-1 コマンド実行環境を準備しよう</h2><h3 id="2-1-1-Windowsでコマンド実行環境を用意する"><a href="#2-1-1-Windowsでコマンド実行環境を用意する" class="headerlink" title="2-1-1 Windowsでコマンド実行環境を用意する"></a>2-1-1 Windowsでコマンド実行環境を用意する</h3><p>windows環境のWSLでubuntuを動かしてそこにRubyを入れる<br><code>wsl -u root</code><br>wslにログインしてupdate打つ際に管理者権限が必要なのだが、<br>Windowsユーザだとパスワード通らなかったのでrootではいって更新コマンド売った</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cドライブ直下</span></span><br><span class="line">ls /mnt/c</span><br></pre></td></tr></table></figure><h2 id="2-2-rbenvをインストールしよう"><a href="#2-2-rbenvをインストールしよう" class="headerlink" title="2-2 rbenvをインストールしよう"></a>2-2 rbenvをインストールしよう</h2><h3 id="2-2-1-macOSでrbnevをインストール"><a href="#2-2-1-macOSでrbnevをインストール" class="headerlink" title="2-2-1 macOSでrbnevをインストール"></a>2-2-1 macOSでrbnevをインストール</h3><h3 id="2-2-2-Windows（WSL）でrbenvをインストール"><a href="#2-2-2-Windows（WSL）でrbenvをインストール" class="headerlink" title="2-2-2 Windows（WSL）でrbenvをインストール"></a>2-2-2 Windows（WSL）でrbenvをインストール</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rbenv.git ~/.rbenv</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH="$HOME/.rbenv/bin:$PATH"'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'eval "$&#123;rbenv init -&#125;"'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再度ログイン</span></span><br><span class="line">wsl -u root</span><br><span class="line"></span><br><span class="line">rbenv -v</span><br><span class="line"><span class="comment"># =&gt; バージョンが表示されること</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># rbenvでのRubyのインストールを簡単にするプラグイン、ruby-buildをセットアップ</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/rbenv/ruby-build.git <span class="string">"<span class="variable">$(rbenv root)</span>"</span>/plugins/ruby-build</span><br><span class="line"></span><br><span class="line"><span class="comment"># こちらのコマンドはhttps://github.com/rbenv/ruby-build/wiki を参照</span></span><br><span class="line">sudo apt-get install autoconf bison build-essential libssl-dev libyaml-dev libreadline-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm-dev libdb-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># libgdbm6 このパッケージが見つからなかった</span></span><br><span class="line"><span class="comment"># sudo apt-get install autoconf bison build-essential libssl-dev libyaml-dev libreadline-dev # zlib1g-dev libncurses5-dev libffi-dev libgdbm libgdbm-dev libdb-dev</span></span><br><span class="line"><span class="comment"># Reading package lists... Done</span></span><br><span class="line"><span class="comment"># Building dependency tree</span></span><br><span class="line"><span class="comment"># Reading state information... Done</span></span><br><span class="line"><span class="comment"># E: Unable to locate package libgdbm</span></span><br></pre></td></tr></table></figure><h2 id="2-3-Rubyのインストール"><a href="#2-3-Rubyのインストール" class="headerlink" title="2-3 Rubyのインストール"></a>2-3 Rubyのインストール</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rbenv install <span class="number">2.5</span>.<span class="number">1</span></span><br><span class="line">rbenv global <span class="number">2.5</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">ruby -v</span><br><span class="line">which ruby</span><br><span class="line"></span><br><span class="line"><span class="comment"># うまく行かなかったので以下を参照して設定した</span></span><br><span class="line"><span class="comment"># &lt;https://qiita.com/yuma-ito-bd/items/00f89ca0c04909c7c467&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-1-Rubyのパッケージ管理ツール「RubyGems」"><a href="#2-3-1-Rubyのパッケージ管理ツール「RubyGems」" class="headerlink" title="2-3-1 Rubyのパッケージ管理ツール「RubyGems」"></a>2-3-1 Rubyのパッケージ管理ツール「RubyGems」</h3><ul><li>Rubyは本体だけでも動作するが、公開されているサードパーティのライブラリを利用することで素早く生産的にプログラミング可能</li><li>これらのライブラリは「gem」という形式でパッケージ化されている</li><li>本書で取り扱っていくRailsもgemの１つ</li><li>Rubygemsと呼ばれるパッケージ管理ツールがgemのインストールや管理を簡単にしてくれる</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gem update --system</span><br><span class="line"></span><br><span class="line">gem -v</span><br><span class="line"></span><br><span class="line">gem list</span><br></pre></td></tr></table></figure><h3 id="2-3-2-Bundlerのインストール"><a href="#2-3-2-Bundlerのインストール" class="headerlink" title="2-3-2 Bundlerのインストール"></a>2-3-2 Bundlerのインストール</h3><ul><li>Bundler：gemをどのバージョンで利用するのかを管理する仕組み</li><li>プロジェクトのディレクトリに<code>Gemfile</code>という名前のファイルを作成し、gemの名前を記載しておくとそのとおりにインストールしたり、それらのgemをRubyから利用したりすることができるようになる</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install bundler</span><br></pre></td></tr></table></figure><ul><li><code>bundle install</code>: Gemfileに記述したgemをインストールする</li><li><code>bundle exec [コマンド]</code>: Bundlerが管理するgemを利用できる状態でコマンドを実行する</li><li><code>bundle init</code></li><li><code>bundle update</code></li></ul><h2 id="2-4-Railsのインストール"><a href="#2-4-Railsのインストール" class="headerlink" title="2-4 Railsのインストール"></a>2-4 Railsのインストール</h2><ul><li><code>gem install rails -v 5.2.1</code></li><li><code>rails -v</code></li></ul><h3 id="2-4-1-Node-jsのインストール"><a href="#2-4-1-Node-jsのインストール" class="headerlink" title="2-4-1 Node.jsのインストール"></a>2-4-1 Node.jsのインストール</h3><p>Javascriptランタイムとしてnodejsをインストールする</p><p><code>curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -</code><br>sudo apt install nodejs</p><p>nodebrewインストール参考<br><code>&lt;https://www.kimoton.com/entry/20190215/1550166179&gt;</code></p><h2 id="2-5-データベースのインストールとセットアップ"><a href="#2-5-データベースのインストールとセットアップ" class="headerlink" title="2-5 データベースのインストールとセットアップ"></a>2-5 データベースのインストールとセットアップ</h2><h3 id="2-5-1-macOSの場合"><a href="#2-5-1-macOSの場合" class="headerlink" title="2-5-1 macOSの場合"></a>2-5-1 macOSの場合</h3><h3 id="2-5-2-Windows（WSL）の場合"><a href="#2-5-2-Windows（WSL）の場合" class="headerlink" title="2-5-2 Windows（WSL）の場合"></a>2-5-2 Windows（WSL）の場合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">'echo "deb http://apt.postgresql.org/pub/repos/apt/$&#123;lsb_release -cs&#125;-pgdg main" &gt; /etc/apt/sources.list.d/pgdg.list'</span></span><br><span class="line">wget --quiet -P - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install postgresql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 資料に記載の手順でpostgresqlインストールできなさそうだったので以下の手順で実施</span></span><br><span class="line"><span class="comment"># 参考）&lt;https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart-ja&gt;</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install postgresql postgresql-contrib</span><br><span class="line"><span class="comment"># サービスが起動しているか確認し起動していなければ立ち上げる</span></span><br><span class="line">service postgresql status</span><br><span class="line">service postgresql start</span><br></pre></td></tr></table></figure><h3 id="2-5-3-トラブルシューティング：RailsでPG-ConnectionBadというエラーになるとき"><a href="#2-5-3-トラブルシューティング：RailsでPG-ConnectionBadというエラーになるとき" class="headerlink" title="2-5-3 トラブルシューティング：RailsでPG::ConnectionBadというエラーになるとき"></a>2-5-3 トラブルシューティング：RailsでPG::ConnectionBadというエラーになるとき</h3><h2 id="2-6-Railsに触れてみよう"><a href="#2-6-Railsに触れてみよう" class="headerlink" title="2-6 Railsに触れてみよう"></a>2-6 Railsに触れてみよう</h2><h3 id="2-6-1-実際にアプリケーションを動かしてみよう"><a href="#2-6-1-実際にアプリケーションを動かしてみよう" class="headerlink" title="2-6-1 実際にアプリケーションを動かしてみよう"></a>2-6-1 実際にアプリケーションを動かしてみよう</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 雛形生成</span></span><br><span class="line">rails new scaffold_app -d postgresql</span><br><span class="line"><span class="comment"># 確認</span></span><br><span class="line"><span class="built_in">cd</span> scaffold_app</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># データベース作成</span></span><br><span class="line"><span class="comment"># railsコマンドではなく、bin/railsコマンドを利用する</span></span><br><span class="line"><span class="comment"># このスクリプトだと、bundle exec railsとして実行したときと同様に、Gemfile通りのgemを利用できる環境上でrailsコマンドを実行することができる</span></span><br><span class="line">bin/rails db:create</span><br><span class="line"></span><br><span class="line"><span class="comment"># サーバー起動</span></span><br><span class="line">bin/rails s</span><br></pre></td></tr></table></figure><ul><li>うまくRails立ち上がらないので、書籍とは別のバージョンを入れる</li><li><a href="https://qiita.com/Gushi_maru/items/f3b5cc43e135e678085f">https://qiita.com/Gushi_maru/items/f3b5cc43e135e678085f</a></li><li><code>apt-get install libpq-dev</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 問題：postgresqlが5432portで立ち上がらない問題</span></span><br><span class="line"><span class="comment"># 原因：Windows側でインストールしているPostgresqlがすでに5432ポートで立ち上がっていたため</span></span><br><span class="line"><span class="comment"># 対策：Windows側で立ち上がっていたサービスを停止した上で起動</span></span><br><span class="line">root@DORAEMON:/etc/postgresql/10/main<span class="comment"># service postgresql start</span></span><br><span class="line"> * Starting PostgreSQL 10 database server                                                                                                                                                     * Removed stale pid file.</span><br><span class="line">Error: /usr/lib/postgresql/10/bin/pg_ctl /usr/lib/postgresql/10/bin/pg_ctl start -D /var/lib/postgresql/10/main -l /var/<span class="built_in">log</span>/postgresql/postgresql-10-main.log -s -o  -c config_file=<span class="string">"/etc/postgresql/10/main/postgresql.conf"</span>  exited with status 1:</span><br><span class="line">2021-03-28 04:08:07.395 JST [210] LOG:  could not <span class="built_in">bind</span> IPv4 address <span class="string">"127.0.0.1"</span>: Permission denied</span><br><span class="line">2021-03-28 04:08:07.395 JST [210] HINT:  Is another postmaster already running on port 5432? If not, <span class="built_in">wait</span> a few seconds and retry.</span><br><span class="line">2021-03-28 04:08:07.395 JST [210] WARNING:  could not create listen socket <span class="keyword">for</span> <span class="string">"localhost"</span></span><br><span class="line">2021-03-28 04:08:07.395 JST [210] FATAL:  could not create any TCP/IP sockets</span><br><span class="line">2021-03-28 04:08:07.396 JST [210] LOG:  database system is shut down</span><br><span class="line">pg_ctl: could not start server</span><br><span class="line">Examine the <span class="built_in">log</span> output.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 問題：DB作成ができない問題</span></span><br><span class="line">root@DORAEMON:/mnt/c/users/Tomo/ruby-work/scaffold-app<span class="comment"># bin/rails db:create</span></span><br><span class="line">FATAL:  role <span class="string">"root"</span> does not exist</span><br><span class="line">Couldn<span class="string">'t create '</span>scaffold_app_development<span class="string">' database. Please check your configuration.</span></span><br><span class="line"><span class="string">rails aborted!</span></span><br><span class="line"><span class="string">PG::ConnectionBad: FATAL:  role "root" does not exist</span></span><br><span class="line"><span class="string">/mnt/c/users/Tomo/ruby-work/scaffold-app/bin/rails:9:in `&lt;top (required)&gt;'</span></span><br><span class="line">/mnt/c/users/Tomo/ruby-work/scaffold-app/bin/spring:15:<span class="keyword">in</span> `&lt;top (required)&gt;<span class="string">'</span></span><br><span class="line"><span class="string">bin/rails:3:in `load'</span></span><br><span class="line">bin/rails:3:<span class="keyword">in</span> `&lt;main&gt;<span class="string">'</span></span><br><span class="line"><span class="string">Tasks: TOP =&gt; db:create</span></span><br><span class="line"><span class="string">(See full trace by running task with --trace)</span></span><br></pre></td></tr></table></figure><ul><li><p>そもそもPostgresqlにユーザ作成しておく必要がありそうなので対応</p></li><li><p>Postgresqlにユーザを作成する手順</p><ul><li><a href="https://qiita.com/krtsato/items/4565051608a63f11b316">https://qiita.com/krtsato/items/4565051608a63f11b316</a></li></ul></li><li><p>パスワードは環境変数に設定しておき読み込む</p><ul><li><a href="https://www.techscore.com/blog/2012/10/26/how-to-manage-database-yml/">https://www.techscore.com/blog/2012/10/26/how-to-manage-database-yml/</a></li></ul></li><li><p>ユーザ作成</p><ul><li><a href="https://qiita.com/sibakenY/items/407b721ad1bd0975bd00">https://qiita.com/sibakenY/items/407b721ad1bd0975bd00</a></li></ul></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/hexo/source/img/2021-03-28-15-05-16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>railsはHTTPサーバとしてpumaを使用している</li><li>Pumaは広く使用されており、Railsの機能を利用する上で不足はありません。</li></ul><h4 id="2-6-1-2-ユーザ管理画面の雛形を作る"><a href="#2-6-1-2-ユーザ管理画面の雛形を作る" class="headerlink" title="2-6-1-2 ユーザ管理画面の雛形を作る"></a>2-6-1-2 ユーザ管理画面の雛形を作る</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ユーザーに関するscaffoldを自動生成する</span></span><br><span class="line">bin/rails generate scaffold user name:string address:string age:<span class="built_in">integer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ユーザ管理機能に使うデータベースを作成する</span></span><br><span class="line">bin/rails db:migrate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 準備が整ったところで再度アプリケーションを起動する</span></span><br><span class="line">bin/rails s</span><br></pre></td></tr></table></figure><h4 id="2-6-1-4-コードの通り道"><a href="#2-6-1-4-コードの通り道" class="headerlink" title="2-6-1-4 コードの通り道"></a>2-6-1-4 コードの通り道</h4><ul><li>Controllerからページテンプレート周りの簡単な説明</li></ul><h4 id="2-6-1-5-ディレクトリ構成"><a href="#2-6-1-5-ディレクトリ構成" class="headerlink" title="2-6-1-5 ディレクトリ構成"></a>2-6-1-5 ディレクトリ構成</h4><ul><li><p>ディレクトリ構成（割愛）</p></li><li><p><code>database.yml</code></p><ul><li>データベースと接続するための設定ファイル</li><li>development,test,productionという環境用にそれぞれ作成</li></ul></li></ul><table><thead><tr><th>項目名</th><th>説明</th></tr></thead><tbody><tr><td>adapter</td><td>データベースの接続に使用するアダプタの名前を指定します。アダプタには各データベースに対応するsqlite3,postgresql,mysql2,oracle_enhancedなどがある</td></tr><tr><td>encoding</td><td>文字コード</td></tr><tr><td>pool</td><td>コネクション数の上限</td></tr><tr><td>database</td><td>データベース名</td></tr><tr><td>username</td><td>データベースに接続するユーザ名</td></tr><tr><td>password</td><td>データベースに接続するユーザのパスワード</td></tr><tr><td>host</td><td>データベースが動作しているホスト名またはipアドレス</td></tr></tbody></table><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PostgreSQL. Versions 9.3 and up are supported.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Install the pg driver:</span></span><br><span class="line"><span class="comment">#   gem install pg</span></span><br><span class="line"><span class="comment"># On macOS with Homebrew:</span></span><br><span class="line"><span class="comment">#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config</span></span><br><span class="line"><span class="comment"># On macOS with MacPorts:</span></span><br><span class="line"><span class="comment">#   gem install pg -- --with-pg-config=/opt/local/lib/postgresql84/bin/pg_config</span></span><br><span class="line"><span class="comment"># On Windows:</span></span><br><span class="line"><span class="comment">#   gem install pg</span></span><br><span class="line"><span class="comment">#       Choose the win32 build.</span></span><br><span class="line"><span class="comment">#       Install PostgreSQL and put its /bin directory on your path.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Configure Using Gemfile</span></span><br><span class="line"><span class="comment"># gem 'pg'</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">default:</span> <span class="meta">&amp;default</span></span><br><span class="line"><span class="attr">  adapter:</span> <span class="string">postgresql</span></span><br><span class="line"><span class="attr">  encoding:</span> <span class="string">unicode</span></span><br><span class="line">  <span class="comment"># For details on connection pooling, see Rails configuration guide</span></span><br><span class="line">  <span class="comment"># https://guides.rubyonrails.org/configuring.html#database-pooling</span></span><br><span class="line"><span class="attr">  pool:</span> &lt;%=<span class="ruby"> ENV.fetch(<span class="string">"RAILS_MAX_THREADS"</span>) &#123; <span class="number">5</span> &#125; </span>%&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line"><span class="attr">  database:</span> <span class="string">scaffold_app_development</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The specified database role being used to connect to postgres.</span></span><br><span class="line">  <span class="comment"># To create additional roles in postgres see `$ createuser --help`.</span></span><br><span class="line">  <span class="comment"># When left blank, postgres will use the default role. This is</span></span><br><span class="line">  <span class="comment"># the same name as the operating system user that initialized the database.</span></span><br><span class="line">  <span class="comment">#username: scaffold_app</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The password associated with the postgres role (username).</span></span><br><span class="line">  <span class="comment">#password:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Connect on a TCP socket. Omitted by default since the client uses a</span></span><br><span class="line">  <span class="comment"># domain socket that doesn't need configuration. Windows does not have</span></span><br><span class="line">  <span class="comment"># domain sockets, so uncomment these lines.</span></span><br><span class="line">  <span class="comment">#host: localhost</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The TCP port the server listens on. Defaults to 5432.</span></span><br><span class="line">  <span class="comment"># If your server runs on a different port number, change accordingly.</span></span><br><span class="line">  <span class="comment">#port: 5432</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Schema search path. The server defaults to $user,public</span></span><br><span class="line">  <span class="comment">#schema_search_path: myapp,sharedapp,public</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Minimum log levels, in increasing order:</span></span><br><span class="line">  <span class="comment">#   debug5, debug4, debug3, debug2, debug1,</span></span><br><span class="line">  <span class="comment">#   log, notice, warning, error, fatal, and panic</span></span><br><span class="line">  <span class="comment"># Defaults to warning.</span></span><br><span class="line">  <span class="comment">#min_messages: notice</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Warning: The database defined as "test" will be erased and</span></span><br><span class="line"><span class="comment"># re-generated from your development database when you run "rake".</span></span><br><span class="line"><span class="comment"># Do not set this db to the same as development or production.</span></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line"><span class="attr">  database:</span> <span class="string">scaffold_app_test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># As with config/credentials.yml, you never want to store sensitive information,</span></span><br><span class="line"><span class="comment"># like your database password, in your source code. If your source code is</span></span><br><span class="line"><span class="comment"># ever seen by anyone, they now have access to your database.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Instead, provide the password as a unix environment variable when you boot</span></span><br><span class="line"><span class="comment"># the app. Read https://guides.rubyonrails.org/configuring.html#configuring-a-database</span></span><br><span class="line"><span class="comment"># for a full rundown on how to provide these environment variables in a</span></span><br><span class="line"><span class="comment"># production deployment.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># On Heroku and other platform providers, you may have a full connection URL</span></span><br><span class="line"><span class="comment"># available as an environment variable. For example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   DATABASE_URL="postgres://myuser:mypass@localhost/somedatabase"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can use this database configuration with:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   production:</span></span><br><span class="line"><span class="comment">#     url: &lt;%= ENV['DATABASE_URL'] %&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">production:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*default</span></span><br><span class="line"><span class="attr">  database:</span> <span class="string">scaffold_app_production</span></span><br><span class="line"><span class="attr">  username:</span> <span class="string">scaffold_app</span></span><br><span class="line"><span class="attr">  password:</span> &lt;%=<span class="ruby"> ENV[<span class="string">'SCAFFOLD_APP_DATABASE_PASSWORD'</span>] </span>%&gt;</span><br></pre></td></tr></table></figure><h2 id="Column-YAMLの基本"><a href="#Column-YAMLの基本" class="headerlink" title="Column YAMLの基本"></a>Column YAMLの基本</h2><ul><li>エイリアスとアンカー問機能</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">animal:</span> <span class="meta">&amp;animal</span></span><br><span class="line"><span class="attr">  cat:</span> <span class="string">'ネコ'</span></span><br><span class="line"><span class="attr">  dog:</span> <span class="string">'イヌ'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">animal_shop_1:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*animal</span></span><br><span class="line"><span class="attr">  hamster:</span> <span class="string">'ハムスター'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">animal_shop_2:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*animal</span></span><br><span class="line"><span class="attr">  parrot:</span> <span class="string">'オウム'</span></span><br></pre></td></tr></table></figure><ul><li><code>routes.rb</code><ul><li>アプリケーションのルーティングを定義するファイル</li><li>リクエストに対応するレスポンスを作るためにどの処理を実行するかを定義したもの</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># すべてのルーティングを確認できる</span></span><br><span class="line">bin/rails routes</span><br></pre></td></tr></table></figure><h3 id="2-6-2-RailsのMVC"><a href="#2-6-2-RailsのMVC" class="headerlink" title="2-6-2 RailsのMVC"></a>2-6-2 RailsのMVC</h3><h2 id="Chapter3-タスク管理アプリケーションを作ろう"><a href="#Chapter3-タスク管理アプリケーションを作ろう" class="headerlink" title="Chapter3 タスク管理アプリケーションを作ろう"></a>Chapter3 タスク管理アプリケーションを作ろう</h2><h2 id="3-1-アプリケーション作成の準備をしよう"><a href="#3-1-アプリケーション作成の準備をしよう" class="headerlink" title="3-1 アプリケーション作成の準備をしよう"></a>3-1 アプリケーション作成の準備をしよう</h2><h3 id="3-1-1-作成するアプリケーションの内容を考える"><a href="#3-1-1-作成するアプリケーションの内容を考える" class="headerlink" title="3-1-1 作成するアプリケーションの内容を考える"></a>3-1-1 作成するアプリケーションの内容を考える</h3><h3 id="3-1-2-アプリケーションの名前を決める"><a href="#3-1-2-アプリケーションの名前を決める" class="headerlink" title="3-1-2 アプリケーションの名前を決める"></a>3-1-2 アプリケーションの名前を決める</h3><h3 id="3-1-3-アプリケーションのひな形を作成する"><a href="#3-1-3-アプリケーションのひな形を作成する" class="headerlink" title="3-1-3 アプリケーションのひな形を作成する"></a>3-1-3 アプリケーションのひな形を作成する</h3><h3 id="3-1-4-データベースの環境ごとの使い分け"><a href="#3-1-4-データベースの環境ごとの使い分け" class="headerlink" title="3-1-4 データベースの環境ごとの使い分け"></a>3-1-4 データベースの環境ごとの使い分け</h3><h3 id="3-1-5-ビュー層を効率良く書くためにSlimを使えるようにする"><a href="#3-1-5-ビュー層を効率良く書くためにSlimを使えるようにする" class="headerlink" title="3-1-5 ビュー層を効率良く書くためにSlimを使えるようにする"></a>3-1-5 ビュー層を効率良く書くためにSlimを使えるようにする</h3><h3 id="3-1-6-アプリケーションの見栄えを良くするためにBootstrapを導入する"><a href="#3-1-6-アプリケーションの見栄えを良くするためにBootstrapを導入する" class="headerlink" title="3-1-6 アプリケーションの見栄えを良くするためにBootstrapを導入する"></a>3-1-6 アプリケーションの見栄えを良くするためにBootstrapを導入する</h3><h3 id="3-1-7-Railsのエラーメッセージなどを日本語で出せるようにする"><a href="#3-1-7-Railsのエラーメッセージなどを日本語で出せるようにする" class="headerlink" title="3-1-7 Railsのエラーメッセージなどを日本語で出せるようにする"></a>3-1-7 Railsのエラーメッセージなどを日本語で出せるようにする</h3><h2 id="3-2-タスクモデルを作成する"><a href="#3-2-タスクモデルを作成する" class="headerlink" title="3-2 タスクモデルを作成する"></a>3-2 タスクモデルを作成する</h2><h3 id="3-2-1-タスクモデルの属性を設計する"><a href="#3-2-1-タスクモデルの属性を設計する" class="headerlink" title="3-2-1 タスクモデルの属性を設計する"></a>3-2-1 タスクモデルの属性を設計する</h3><h3 id="3-2-2-タスクモデルのひな形を作成する"><a href="#3-2-2-タスクモデルのひな形を作成する" class="headerlink" title="3-2-2 タスクモデルのひな形を作成する"></a>3-2-2 タスクモデルのひな形を作成する</h3><h3 id="3-2-3-マイグレーションでデータベースにテーブルを追加する"><a href="#3-2-3-マイグレーションでデータベースにテーブルを追加する" class="headerlink" title="3-2-3 マイグレーションでデータベースにテーブルを追加する"></a>3-2-3 マイグレーションでデータベースにテーブルを追加する</h3><h2 id="3-3-コントローラとビュー"><a href="#3-3-コントローラとビュー" class="headerlink" title="3-3 コントローラとビュー"></a>3-3 コントローラとビュー</h2><h3 id="3-3-1-新規登録機能を実装する"><a href="#3-3-1-新規登録機能を実装する" class="headerlink" title="3-3-1 新規登録機能を実装する"></a>3-3-1 新規登録機能を実装する</h3><h3 id="3-3-2-一覧表示機能を実装する"><a href="#3-3-2-一覧表示機能を実装する" class="headerlink" title="3-3-2 一覧表示機能を実装する"></a>3-3-2 一覧表示機能を実装する</h3><h3 id="3-3-3-詳細表示機能を実装する"><a href="#3-3-3-詳細表示機能を実装する" class="headerlink" title="3-3-3 詳細表示機能を実装する"></a>3-3-3 詳細表示機能を実装する</h3><h3 id="3-3-4-編集機能を実装する"><a href="#3-3-4-編集機能を実装する" class="headerlink" title="3-3-4 編集機能を実装する"></a>3-3-4 編集機能を実装する</h3><h3 id="3-3-5-削除機能を実装する"><a href="#3-3-5-削除機能を実装する" class="headerlink" title="3-3-5 削除機能を実装する"></a>3-3-5 削除機能を実装する</h3><h3 id="3-3-6-シンプルなCRUD機能の完成"><a href="#3-3-6-シンプルなCRUD機能の完成" class="headerlink" title="3-3-6 シンプルなCRUD機能の完成"></a>3-3-6 シンプルなCRUD機能の完成</h3><h2 id="＜レベルアップ編＞"><a href="#＜レベルアップ編＞" class="headerlink" title="＜レベルアップ編＞"></a>＜レベルアップ編＞</h2><h2 id="Chapter4-現実の複雑さに対応する"><a href="#Chapter4-現実の複雑さに対応する" class="headerlink" title="Chapter4 現実の複雑さに対応する"></a>Chapter4 現実の複雑さに対応する</h2><h2 id="4-1-さまざまなマイグレーション操作を使いこなす"><a href="#4-1-さまざまなマイグレーション操作を使いこなす" class="headerlink" title="4-1 さまざまなマイグレーション操作を使いこなす"></a>4-1 さまざまなマイグレーション操作を使いこなす</h2><h3 id="4-1-1-マイグレーションの適用を理解しよう"><a href="#4-1-1-マイグレーションの適用を理解しよう" class="headerlink" title="4-1-1 マイグレーションの適用を理解しよう"></a>4-1-1 マイグレーションの適用を理解しよう</h3><h3 id="4-1-2-マイグレーションではバージョンの上げ下げ両方を意識しよう"><a href="#4-1-2-マイグレーションではバージョンの上げ下げ両方を意識しよう" class="headerlink" title="4-1-2 マイグレーションではバージョンの上げ下げ両方を意識しよう"></a>4-1-2 マイグレーションではバージョンの上げ下げ両方を意識しよう</h3><h3 id="4-1-3-マイグレーションの名前の付け方に注意する"><a href="#4-1-3-マイグレーションの名前の付け方に注意する" class="headerlink" title="4-1-3 マイグレーションの名前の付け方に注意する"></a>4-1-3 マイグレーションの名前の付け方に注意する</h3><h3 id="4-1-4-schema-rb"><a href="#4-1-4-schema-rb" class="headerlink" title="4-1-4 schema.rb"></a>4-1-4 schema.rb</h3><h3 id="4-1-5-マイグレーションに関する主なコマンド"><a href="#4-1-5-マイグレーションに関する主なコマンド" class="headerlink" title="4-1-5 マイグレーションに関する主なコマンド"></a>4-1-5 マイグレーションに関する主なコマンド</h3><h3 id="4-1-6-マイグレーションの適用中にエラーが出たときは"><a href="#4-1-6-マイグレーションの適用中にエラーが出たときは" class="headerlink" title="4-1-6 マイグレーションの適用中にエラーが出たときは"></a>4-1-6 マイグレーションの適用中にエラーが出たときは</h3><h2 id="4-2-データの内容を制限する"><a href="#4-2-データの内容を制限する" class="headerlink" title="4-2 データの内容を制限する"></a>4-2 データの内容を制限する</h2><h3 id="4-2-1-データ型"><a href="#4-2-1-データ型" class="headerlink" title="4-2-1 データ型"></a>4-2-1 データ型</h3><h3 id="4-2-2-NOT-NULL制約"><a href="#4-2-2-NOT-NULL制約" class="headerlink" title="4-2-2 NOT NULL制約"></a>4-2-2 NOT NULL制約</h3><h3 id="4-2-3-文字列カラムの長さを指定する"><a href="#4-2-3-文字列カラムの長さを指定する" class="headerlink" title="4-2-3 文字列カラムの長さを指定する"></a>4-2-3 文字列カラムの長さを指定する</h3><h3 id="4-2-4-ユニークインデックスを作成する"><a href="#4-2-4-ユニークインデックスを作成する" class="headerlink" title="4-2-4 ユニークインデックスを作成する"></a>4-2-4 ユニークインデックスを作成する</h3><h2 id="4-3-モデルの「検証」を使う"><a href="#4-3-モデルの「検証」を使う" class="headerlink" title="4-3 モデルの「検証」を使う"></a>4-3 モデルの「検証」を使う</h2><h3 id="4-3-1-モデルの検証の仕組み"><a href="#4-3-1-モデルの検証の仕組み" class="headerlink" title="4-3-1 モデルの検証の仕組み"></a>4-3-1 モデルの検証の仕組み</h3><h3 id="4-3-2-検証の書き方"><a href="#4-3-2-検証の書き方" class="headerlink" title="4-3-2 検証の書き方"></a>4-3-2 検証の書き方</h3><h3 id="4-3-3-必須かどうかの検証を追加する"><a href="#4-3-3-必須かどうかの検証を追加する" class="headerlink" title="4-3-3 必須かどうかの検証を追加する"></a>4-3-3 必須かどうかの検証を追加する</h3><h3 id="4-3-4-コントローラとビューで検証エラーに対応する"><a href="#4-3-4-コントローラとビューで検証エラーに対応する" class="headerlink" title="4-3-4 コントローラとビューで検証エラーに対応する"></a>4-3-4 コントローラとビューで検証エラーに対応する</h3><h3 id="4-3-5-文字列長の検証を追加する"><a href="#4-3-5-文字列長の検証を追加する" class="headerlink" title="4-3-5 文字列長の検証を追加する"></a>4-3-5 文字列長の検証を追加する</h3><h3 id="4-3-6-オリジナルの検証コードを書く"><a href="#4-3-6-オリジナルの検証コードを書く" class="headerlink" title="4-3-6 オリジナルの検証コードを書く"></a>4-3-6 オリジナルの検証コードを書く</h3><h3 id="4-3-7-検証が行われない登録・更新操作もある"><a href="#4-3-7-検証が行われない登録・更新操作もある" class="headerlink" title="4-3-7 検証が行われない登録・更新操作もある"></a>4-3-7 検証が行われない登録・更新操作もある</h3><h2 id="4-4-モデルの状態を自動的に制御する―「コールバック」"><a href="#4-4-モデルの状態を自動的に制御する―「コールバック」" class="headerlink" title="4-4 モデルの状態を自動的に制御する―「コールバック」"></a>4-4 モデルの状態を自動的に制御する―「コールバック」</h2><h3 id="4-4-1-コールバックの仕組み"><a href="#4-4-1-コールバックの仕組み" class="headerlink" title="4-4-1 コールバックの仕組み"></a>4-4-1 コールバックの仕組み</h3><h3 id="4-4-2-コールバックの実装"><a href="#4-4-2-コールバックの実装" class="headerlink" title="4-4-2 コールバックの実装"></a>4-4-2 コールバックの実装</h3><h3 id="4-4-3-トランザクション"><a href="#4-4-3-トランザクション" class="headerlink" title="4-4-3 トランザクション"></a>4-4-3 トランザクション</h3><h2 id="4-5-ログイン機能を作る"><a href="#4-5-ログイン機能を作る" class="headerlink" title="4-5 ログイン機能を作る"></a>4-5 ログイン機能を作る</h2><h3 id="4-5-1-セッションとCookie"><a href="#4-5-1-セッションとCookie" class="headerlink" title="4-5-1 セッションとCookie"></a>4-5-1 セッションとCookie</h3><h3 id="4-5-2-User-モデルを作る"><a href="#4-5-2-User-モデルを作る" class="headerlink" title="4-5-2 User モデルを作る"></a>4-5-2 User モデルを作る</h3><h3 id="4-5-3-パスワードを受け付けてdigestを保存する"><a href="#4-5-3-パスワードを受け付けてdigestを保存する" class="headerlink" title="4-5-3 パスワードを受け付けてdigestを保存する"></a>4-5-3 パスワードを受け付けてdigestを保存する</h3><h3 id="4-5-4-ユーザー管理機能一式を追加する"><a href="#4-5-4-ユーザー管理機能一式を追加する" class="headerlink" title="4-5-4 ユーザー管理機能一式を追加する"></a>4-5-4 ユーザー管理機能一式を追加する</h3><h3 id="4-5-5-ログイン機能を実装する"><a href="#4-5-5-ログイン機能を実装する" class="headerlink" title="4-5-5 ログイン機能を実装する"></a>4-5-5 ログイン機能を実装する</h3><h3 id="4-5-6-ログインのフォームを表示する"><a href="#4-5-6-ログインのフォームを表示する" class="headerlink" title="4-5-6 ログインのフォームを表示する"></a>4-5-6 ログインのフォームを表示する</h3><h3 id="4-5-7-ログインの実行"><a href="#4-5-7-ログインの実行" class="headerlink" title="4-5-7 ログインの実行"></a>4-5-7 ログインの実行</h3><h3 id="4-5-8-ログイン状態の取得を簡単にする"><a href="#4-5-8-ログイン状態の取得を簡単にする" class="headerlink" title="4-5-8 ログイン状態の取得を簡単にする"></a>4-5-8 ログイン状態の取得を簡単にする</h3><h3 id="4-5-9-ログアウト機能を実装する"><a href="#4-5-9-ログアウト機能を実装する" class="headerlink" title="4-5-9 ログアウト機能を実装する"></a>4-5-9 ログアウト機能を実装する</h3><h3 id="4-5-10-ログインしていなければタスク管理を利用できなくする"><a href="#4-5-10-ログインしていなければタスク管理を利用できなくする" class="headerlink" title="4-5-10 ログインしていなければタスク管理を利用できなくする"></a>4-5-10 ログインしていなければタスク管理を利用できなくする</h3><h3 id="4-5-11-ログインしているユーザーのデータだけを扱えるようにする"><a href="#4-5-11-ログインしているユーザーのデータだけを扱えるようにする" class="headerlink" title="4-5-11 ログインしているユーザーのデータだけを扱えるようにする"></a>4-5-11 ログインしているユーザーのデータだけを扱えるようにする</h3><h3 id="4-5-12-管理機能を管理者ユーザーだけに利用させるようにする"><a href="#4-5-12-管理機能を管理者ユーザーだけに利用させるようにする" class="headerlink" title="4-5-12 管理機能を管理者ユーザーだけに利用させるようにする"></a>4-5-12 管理機能を管理者ユーザーだけに利用させるようにする</h3><h3 id="4-5-13-最初の管理者ユーザーを作る"><a href="#4-5-13-最初の管理者ユーザーを作る" class="headerlink" title="4-5-13 最初の管理者ユーザーを作る"></a>4-5-13 最初の管理者ユーザーを作る</h3><h2 id="4-6-データを絞り込む"><a href="#4-6-データを絞り込む" class="headerlink" title="4-6 データを絞り込む"></a>4-6 データを絞り込む</h2><h3 id="4-6-1-絞り込みの起点"><a href="#4-6-1-絞り込みの起点" class="headerlink" title="4-6-1 絞り込みの起点"></a>4-6-1 絞り込みの起点</h3><h3 id="4-6-2-絞り込み条件"><a href="#4-6-2-絞り込み条件" class="headerlink" title="4-6-2 絞り込み条件"></a>4-6-2 絞り込み条件</h3><h3 id="4-6-3-実行部分"><a href="#4-6-3-実行部分" class="headerlink" title="4-6-3 実行部分"></a>4-6-3 実行部分</h3><h2 id="4-7-タスク一覧を作成日時の新しい順に表示する"><a href="#4-7-タスク一覧を作成日時の新しい順に表示する" class="headerlink" title="4-7 タスク一覧を作成日時の新しい順に表示する"></a>4-7 タスク一覧を作成日時の新しい順に表示する</h2><h2 id="4-8-scopeを活用する"><a href="#4-8-scopeを活用する" class="headerlink" title="4-8 scopeを活用する"></a>4-8 scopeを活用する</h2><h2 id="4-9-フィルタを使い重複を避ける"><a href="#4-9-フィルタを使い重複を避ける" class="headerlink" title="4-9 フィルタを使い重複を避ける"></a>4-9 フィルタを使い重複を避ける</h2><h3 id="4-10-詳しい説明に含まれるURLをリンクとして表示する"><a href="#4-10-詳しい説明に含まれるURLをリンクとして表示する" class="headerlink" title="4-10 詳しい説明に含まれるURLをリンクとして表示する"></a>4-10 詳しい説明に含まれるURLをリンクとして表示する</h3><h3 id="4-10-1-まとめ"><a href="#4-10-1-まとめ" class="headerlink" title="4-10-1 まとめ"></a>4-10-1 まとめ</h3><h2 id="Chapter5-テストをはじめよう"><a href="#Chapter5-テストをはじめよう" class="headerlink" title="Chapter5 テストをはじめよう"></a>Chapter5 テストをはじめよう</h2><h2 id="5-1-テストについて"><a href="#5-1-テストについて" class="headerlink" title="5-1 テストについて"></a>5-1 テストについて</h2><h2 id="5-2-テストを書くことのメリット"><a href="#5-2-テストを書くことのメリット" class="headerlink" title="5-2 テストを書くことのメリット"></a>5-2 テストを書くことのメリット</h2><h3 id="5-2-1-テスト全体にかかるコストの削減"><a href="#5-2-1-テスト全体にかかるコストの削減" class="headerlink" title="5-2-1 テスト全体にかかるコストの削減"></a>5-2-1 テスト全体にかかるコストの削減</h3><h3 id="5-2-2-変更をフットワーク軽く行えるようになる"><a href="#5-2-2-変更をフットワーク軽く行えるようになる" class="headerlink" title="5-2-2 変更をフットワーク軽く行えるようになる"></a>5-2-2 変更をフットワーク軽く行えるようになる</h3><h3 id="5-2-3-環境のバージョンアップやリファクタリングの必須条件"><a href="#5-2-3-環境のバージョンアップやリファクタリングの必須条件" class="headerlink" title="5-2-3 環境のバージョンアップやリファクタリングの必須条件"></a>5-2-3 環境のバージョンアップやリファクタリングの必須条件</h3><h3 id="5-2-4-仕様変更の影響の大きさを簡単に把握することができる"><a href="#5-2-4-仕様変更の影響の大きさを簡単に把握することができる" class="headerlink" title="5-2-4 仕様変更の影響の大きさを簡単に把握することができる"></a>5-2-4 仕様変更の影響の大きさを簡単に把握することができる</h3><h3 id="5-2-5-仕様を記述したドキュメントとしても機能する"><a href="#5-2-5-仕様を記述したドキュメントとしても機能する" class="headerlink" title="5-2-5 仕様を記述したドキュメントとしても機能する"></a>5-2-5 仕様を記述したドキュメントとしても機能する</h3><h3 id="5-2-6-仕様やインターフェイスを深く考えるきっかけとして役立つ"><a href="#5-2-6-仕様やインターフェイスを深く考えるきっかけとして役立つ" class="headerlink" title="5-2-6 仕様やインターフェイスを深く考えるきっかけとして役立つ"></a>5-2-6 仕様やインターフェイスを深く考えるきっかけとして役立つ</h3><h3 id="5-2-7-適切な粒度のコードになりやすい"><a href="#5-2-7-適切な粒度のコードになりやすい" class="headerlink" title="5-2-7 適切な粒度のコードになりやすい"></a>5-2-7 適切な粒度のコードになりやすい</h3><h3 id="5-2-8-確実性を高めることで開発効率を上げる"><a href="#5-2-8-確実性を高めることで開発効率を上げる" class="headerlink" title="5-2-8 確実性を高めることで開発効率を上げる"></a>5-2-8 確実性を高めることで開発効率を上げる</h3><h2 id="5-3-本章で利用するテスト用ライブラリ"><a href="#5-3-本章で利用するテスト用ライブラリ" class="headerlink" title="5-3 本章で利用するテスト用ライブラリ"></a>5-3 本章で利用するテスト用ライブラリ</h2><h3 id="5-3-1-RSpec"><a href="#5-3-1-RSpec" class="headerlink" title="5-3-1 RSpec"></a>5-3-1 RSpec</h3><h3 id="5-3-2-Capybara"><a href="#5-3-2-Capybara" class="headerlink" title="5-3-2 Capybara"></a>5-3-2 Capybara</h3><h3 id="5-3-3-FactoryBot"><a href="#5-3-3-FactoryBot" class="headerlink" title="5-3-3 FactoryBot"></a>5-3-3 FactoryBot</h3><h2 id="5-4-本章で記述するテストの種類"><a href="#5-4-本章で記述するテストの種類" class="headerlink" title="5-4 本章で記述するテストの種類"></a>5-4 本章で記述するテストの種類</h2><h3 id="5-4-1-モデルのテスト"><a href="#5-4-1-モデルのテスト" class="headerlink" title="5-4-1 モデルのテスト"></a>5-4-1 モデルのテスト</h3><h3 id="5-4-2-結合テスト"><a href="#5-4-2-結合テスト" class="headerlink" title="5-4-2 結合テスト"></a>5-4-2 結合テスト</h3><h3 id="5-4-3-ルーティング、メーラー、ジョブのテスト"><a href="#5-4-3-ルーティング、メーラー、ジョブのテスト" class="headerlink" title="5-4-3 ルーティング、メーラー、ジョブのテスト"></a>5-4-3 ルーティング、メーラー、ジョブのテスト</h3><h3 id="5-4-4-あまり利用しないテスト"><a href="#5-4-4-あまり利用しないテスト" class="headerlink" title="5-4-4 あまり利用しないテスト"></a>5-4-4 あまり利用しないテスト</h3><h2 id="Column-System-Specとは？"><a href="#Column-System-Specとは？" class="headerlink" title="Column System Specとは？"></a>Column System Specとは？</h2><h2 id="5-5-System-Specを書くための準備"><a href="#5-5-System-Specを書くための準備" class="headerlink" title="5-5 System Specを書くための準備"></a>5-5 System Specを書くための準備</h2><h3 id="5-5-1-RSpecのインストールと初期準備"><a href="#5-5-1-RSpecのインストールと初期準備" class="headerlink" title="5-5-1 RSpecのインストールと初期準備"></a>5-5-1 RSpecのインストールと初期準備</h3><h3 id="5-5-2-Capybaraの初期準備"><a href="#5-5-2-Capybaraの初期準備" class="headerlink" title="5-5-2 Capybaraの初期準備"></a>5-5-2 Capybaraの初期準備</h3><h3 id="5-5-3-FactoryBotのインストール"><a href="#5-5-3-FactoryBotのインストール" class="headerlink" title="5-5-3 FactoryBotのインストール"></a>5-5-3 FactoryBotのインストール</h3><h2 id="5-6-RSpecの基本形"><a href="#5-6-RSpecの基本形" class="headerlink" title="5-6 RSpecの基本形"></a>5-6 RSpecの基本形</h2><h2 id="5-7-FactoryBotでテストデータを作成できるように準備する"><a href="#5-7-FactoryBotでテストデータを作成できるように準備する" class="headerlink" title="5-7 FactoryBotでテストデータを作成できるように準備する"></a>5-7 FactoryBotでテストデータを作成できるように準備する</h2><h2 id="5-8-タスクの一覧表示機能のSystem-Spec"><a href="#5-8-タスクの一覧表示機能のSystem-Spec" class="headerlink" title="5-8 タスクの一覧表示機能のSystem Spec"></a>5-8 タスクの一覧表示機能のSystem Spec</h2><h3 id="5-8-1-ユーザーAを作成しておく"><a href="#5-8-1-ユーザーAを作成しておく" class="headerlink" title="5-8-1 ユーザーAを作成しておく"></a>5-8-1 ユーザーAを作成しておく</h3><h3 id="5-8-2-作成者がユーザーAであるタスクを作成しておく"><a href="#5-8-2-作成者がユーザーAであるタスクを作成しておく" class="headerlink" title="5-8-2 作成者がユーザーAであるタスクを作成しておく"></a>5-8-2 作成者がユーザーAであるタスクを作成しておく</h3><h3 id="5-8-3-ユーザーAでログインする"><a href="#5-8-3-ユーザーAでログインする" class="headerlink" title="5-8-3 ユーザーAでログインする"></a>5-8-3 ユーザーAでログインする</h3><h3 id="5-8-4-作成済みのタスクの名称が画面上に表示されていることを確認"><a href="#5-8-4-作成済みのタスクの名称が画面上に表示されていることを確認" class="headerlink" title="5-8-4 作成済みのタスクの名称が画面上に表示されていることを確認"></a>5-8-4 作成済みのタスクの名称が画面上に表示されていることを確認</h3><h2 id="5-9-他のユーザーが作成したタスクが表示されないことの確認"><a href="#5-9-他のユーザーが作成したタスクが表示されないことの確認" class="headerlink" title="5-9 他のユーザーが作成したタスクが表示されないことの確認"></a>5-9 他のユーザーが作成したタスクが表示されないことの確認</h2><h3 id="5-10-beforeを利用した共通化"><a href="#5-10-beforeを利用した共通化" class="headerlink" title="5-10 beforeを利用した共通化"></a>5-10 beforeを利用した共通化</h3><h3 id="5-11-letを利用した共通化"><a href="#5-11-letを利用した共通化" class="headerlink" title="5-11 letを利用した共通化"></a>5-11 letを利用した共通化</h3><h2 id="Column-letとlet"><a href="#Column-letとlet" class="headerlink" title="Column letとlet!"></a>Column letとlet!</h2><h3 id="5-12-詳細表示機能のSpecを追加する"><a href="#5-12-詳細表示機能のSpecを追加する" class="headerlink" title="5-12 詳細表示機能のSpecを追加する"></a>5-12 詳細表示機能のSpecを追加する</h3><h3 id="5-13-shared-examplesを利用する"><a href="#5-13-shared-examplesを利用する" class="headerlink" title="5-13 shared_examplesを利用する"></a>5-13 shared_examplesを利用する</h3><h3 id="5-14-新規作成機能のSystem-Spec"><a href="#5-14-新規作成機能のSystem-Spec" class="headerlink" title="5-14 新規作成機能のSystem Spec"></a>5-14 新規作成機能のSystem Spec</h3><h3 id="5-15-letの上書き"><a href="#5-15-letの上書き" class="headerlink" title="5-15 letの上書き"></a>5-15 letの上書き</h3><h3 id="5-16-Specが失敗したときの調査方法"><a href="#5-16-Specが失敗したときの調査方法" class="headerlink" title="5-16 Specが失敗したときの調査方法"></a>5-16 Specが失敗したときの調査方法</h3><h3 id="5-16-1-Specが失敗するとき"><a href="#5-16-1-Specが失敗するとき" class="headerlink" title="5-16-1 Specが失敗するとき"></a>5-16-1 Specが失敗するとき</h3><h3 id="5-16-2-Specが失敗したときに確認すべき情報"><a href="#5-16-2-Specが失敗したときに確認すべき情報" class="headerlink" title="5-16-2 Specが失敗したときに確認すべき情報"></a>5-16-2 Specが失敗したときに確認すべき情報</h3><h3 id="5-16-3-失敗場所とエラーメッセージを手がかりに原因を探す"><a href="#5-16-3-失敗場所とエラーメッセージを手がかりに原因を探す" class="headerlink" title="5-16-3 失敗場所とエラーメッセージを手がかりに原因を探す"></a>5-16-3 失敗場所とエラーメッセージを手がかりに原因を探す</h3><h3 id="5-16-4-コンソールを使って調査する"><a href="#5-16-4-コンソールを使って調査する" class="headerlink" title="5-16-4 コンソールを使って調査する"></a>5-16-4 コンソールを使って調査する</h3><h3 id="5-16-5-スクリーンショットを活用する"><a href="#5-16-5-スクリーンショットを活用する" class="headerlink" title="5-16-5 スクリーンショットを活用する"></a>5-16-5 スクリーンショットを活用する</h3><h2 id="Chapter6-Railsの全体像を理解する"><a href="#Chapter6-Railsの全体像を理解する" class="headerlink" title="Chapter6 Railsの全体像を理解する"></a>Chapter6 Railsの全体像を理解する</h2><h2 id="6-1-Railsを取り巻く世界"><a href="#6-1-Railsを取り巻く世界" class="headerlink" title="6-1 Railsを取り巻く世界"></a>6-1 Railsを取り巻く世界</h2><h2 id="6-2-ルーティング"><a href="#6-2-ルーティング" class="headerlink" title="6-2 ルーティング"></a>6-2 ルーティング</h2><h3 id="6-2-1-「-ルート」を構成する5つの要素"><a href="#6-2-1-「-ルート」を構成する5つの要素" class="headerlink" title="6-2-1 「 ルート」を構成する5つの要素"></a>6-2-1 「 ルート」を構成する5つの要素</h3><h3 id="6-2-2-1つのルートを定義する"><a href="#6-2-2-1つのルートを定義する" class="headerlink" title="6-2-2 1つのルートを定義する"></a>6-2-2 1つのルートを定義する</h3><h2 id="Column-URLヘルパーメソッドは使わなくてはダメ？"><a href="#Column-URLヘルパーメソッドは使わなくてはダメ？" class="headerlink" title="Column URLヘルパーメソッドは使わなくてはダメ？"></a>Column URLヘルパーメソッドは使わなくてはダメ？</h2><h3 id="6-2-3-「-RESTful」の概要をつかんでおこう"><a href="#6-2-3-「-RESTful」の概要をつかんでおこう" class="headerlink" title="6-2-3 「 RESTful」の概要をつかんでおこう"></a>6-2-3 「 RESTful」の概要をつかんでおこう</h3><h3 id="6-2-4-RESTfulにするための-Railsの流儀"><a href="#6-2-4-RESTfulにするための-Railsの流儀" class="headerlink" title="6-2-4 RESTfulにするための Railsの流儀"></a>6-2-4 RESTfulにするための Railsの流儀</h3><h2 id="Column-RESTfulはどの程度追求すべき？"><a href="#Column-RESTfulはどの程度追求すべき？" class="headerlink" title="Column RESTfulはどの程度追求すべき？"></a>Column RESTfulはどの程度追求すべき？</h2><h3 id="6-2-5-resourcesでCRUDのルート一式を定義する"><a href="#6-2-5-resourcesでCRUDのルート一式を定義する" class="headerlink" title="6-2-5 resourcesでCRUDのルート一式を定義する"></a>6-2-5 resourcesでCRUDのルート一式を定義する</h3><h3 id="6-2-6-routes-rbの構造化"><a href="#6-2-6-routes-rbの構造化" class="headerlink" title="6-2-6 routes.rbの構造化"></a>6-2-6 routes.rbの構造化</h3><h2 id="Column-routes-rbの整理のコツ"><a href="#Column-routes-rbの整理のコツ" class="headerlink" title="Column routes.rbの整理のコツ"></a>Column routes.rbの整理のコツ</h2><h2 id="6-3-国際化"><a href="#6-3-国際化" class="headerlink" title="6-3 国際化"></a>6-3 国際化</h2><h3 id="6-3-1-ユーザーごとに言語を切り替える"><a href="#6-3-1-ユーザーごとに言語を切り替える" class="headerlink" title="6-3-1 ユーザーごとに言語を切り替える"></a>6-3-1 ユーザーごとに言語を切り替える</h3><h3 id="6-3-2-翻訳ファイルの扱い方"><a href="#6-3-2-翻訳ファイルの扱い方" class="headerlink" title="6-3-2 翻訳ファイルの扱い方"></a>6-3-2 翻訳ファイルの扱い方</h3><h2 id="6-4-日時の扱い方"><a href="#6-4-日時の扱い方" class="headerlink" title="6-4 日時の扱い方"></a>6-4 日時の扱い方</h2><h3 id="6-4-1-日時の扱い方に関する設定"><a href="#6-4-1-日時の扱い方に関する設定" class="headerlink" title="6-4-1 日時の扱い方に関する設定"></a>6-4-1 日時の扱い方に関する設定</h3><h3 id="6-4-2-taskleafアプリケーションのデフォルトのタイムゾーンを日本時間にする"><a href="#6-4-2-taskleafアプリケーションのデフォルトのタイムゾーンを日本時間にする" class="headerlink" title="6-4-2 taskleafアプリケーションのデフォルトのタイムゾーンを日本時間にする"></a>6-4-2 taskleafアプリケーションのデフォルトのタイムゾーンを日本時間にする</h3><h3 id="6-4-3-Time-currentやDate-currentを利用する"><a href="#6-4-3-Time-currentやDate-currentを利用する" class="headerlink" title="6-4-3 Time.currentやDate.currentを利用する"></a>6-4-3 Time.currentやDate.currentを利用する</h3><h2 id="6-5-エラー処理のカスタマイズ"><a href="#6-5-エラー処理のカスタマイズ" class="headerlink" title="6-5 エラー処理のカスタマイズ"></a>6-5 エラー処理のカスタマイズ</h2><h3 id="6-5-1-Railsのエラー処理の概要"><a href="#6-5-1-Railsのエラー処理の概要" class="headerlink" title="6-5-1 Railsのエラー処理の概要"></a>6-5-1 Railsのエラー処理の概要</h3><h3 id="6-5-2-デバッグ用-x2F-本番用のエラー画面の切り分け"><a href="#6-5-2-デバッグ用-x2F-本番用のエラー画面の切り分け" class="headerlink" title="6-5-2 デバッグ用&#x2F;本番用のエラー画面の切り分け"></a>6-5-2 デバッグ用&#x2F;本番用のエラー画面の切り分け</h3><h3 id="6-5-3-Railsの本番用エラー画面のカスタマイズ"><a href="#6-5-3-Railsの本番用エラー画面のカスタマイズ" class="headerlink" title="6-5-3 Railsの本番用エラー画面のカスタマイズ"></a>6-5-3 Railsの本番用エラー画面のカスタマイズ</h3><h3 id="6-5-4-アプリケーション固有のエラー処理の追加"><a href="#6-5-4-アプリケーション固有のエラー処理の追加" class="headerlink" title="6-5-4 アプリケーション固有のエラー処理の追加"></a>6-5-4 アプリケーション固有のエラー処理の追加</h3><h2 id="6-6-Railsのログ"><a href="#6-6-Railsのログ" class="headerlink" title="6-6 Railsのログ"></a>6-6 Railsのログ</h2><h3 id="6-6-1-ログの利用方法"><a href="#6-6-1-ログの利用方法" class="headerlink" title="6-6-1 ログの利用方法"></a>6-6-1 ログの利用方法</h3><h3 id="6-6-2-ログ（ロガー）の設定"><a href="#6-6-2-ログ（ロガー）の設定" class="headerlink" title="6-6-2 ログ（ロガー）の設定"></a>6-6-2 ログ（ロガー）の設定</h3><h2 id="6-7-セキュリティを強化する"><a href="#6-7-セキュリティを強化する" class="headerlink" title="6-7 セキュリティを強化する"></a>6-7 セキュリティを強化する</h2><h3 id="6-7-1-意図しないパラメータを弾く「Strong-Parameters」"><a href="#6-7-1-意図しないパラメータを弾く「Strong-Parameters」" class="headerlink" title="6-7-1 意図しないパラメータを弾く「Strong Parameters」"></a>6-7-1 意図しないパラメータを弾く「Strong Parameters」</h3><h3 id="6-7-2-CSRF対策を利用する"><a href="#6-7-2-CSRF対策を利用する" class="headerlink" title="6-7-2 CSRF対策を利用する"></a>6-7-2 CSRF対策を利用する</h3><h3 id="6-7-3-インジェクションに注意する"><a href="#6-7-3-インジェクションに注意する" class="headerlink" title="6-7-3 インジェクションに注意する"></a>6-7-3 インジェクションに注意する</h3><h3 id="6-7-4-Content-Security-Policy（CSP）を設定する"><a href="#6-7-4-Content-Security-Policy（CSP）を設定する" class="headerlink" title="6-7-4 Content Security Policy（CSP）を設定する"></a>6-7-4 Content Security Policy（CSP）を設定する</h3><h2 id="6-8-アセットパイプライン"><a href="#6-8-アセットパイプライン" class="headerlink" title="6-8 アセットパイプライン"></a>6-8 アセットパイプライン</h2><h3 id="6-8-1-環境による挙動の違い"><a href="#6-8-1-環境による挙動の違い" class="headerlink" title="6-8-1 環境による挙動の違い"></a>6-8-1 環境による挙動の違い</h3><h3 id="6-8-2-ブラウザにアセットを読み込ませる"><a href="#6-8-2-ブラウザにアセットを読み込ませる" class="headerlink" title="6-8-2 ブラウザにアセットを読み込ませる"></a>6-8-2 ブラウザにアセットを読み込ませる</h3><h3 id="6-8-3-連結結果のファイルをどうやって生成するか"><a href="#6-8-3-連結結果のファイルをどうやって生成するか" class="headerlink" title="6-8-3 連結結果のファイルをどうやって生成するか"></a>6-8-3 連結結果のファイルをどうやって生成するか</h3><h3 id="6-8-4-マニフェストファイルを記述する"><a href="#6-8-4-マニフェストファイルを記述する" class="headerlink" title="6-8-4 マニフェストファイルを記述する"></a>6-8-4 マニフェストファイルを記述する</h3><h3 id="6-8-5-アセットの探索パス"><a href="#6-8-5-アセットの探索パス" class="headerlink" title="6-8-5 アセットの探索パス"></a>6-8-5 アセットの探索パス</h3><h3 id="6-8-6-アセット関連の設定"><a href="#6-8-6-アセット関連の設定" class="headerlink" title="6-8-6 アセット関連の設定"></a>6-8-6 アセット関連の設定</h3><h2 id="6-9-production環境でアプリケーションを立ち上げる"><a href="#6-9-production環境でアプリケーションを立ち上げる" class="headerlink" title="6-9 production環境でアプリケーションを立ち上げる"></a>6-9 production環境でアプリケーションを立ち上げる</h2><h3 id="6-9-1-アセットのプリコンパイル"><a href="#6-9-1-アセットのプリコンパイル" class="headerlink" title="6-9-1 アセットのプリコンパイル"></a>6-9-1 アセットのプリコンパイル</h3><h3 id="6-9-2-静的ファイルの配信サーバを設定する"><a href="#6-9-2-静的ファイルの配信サーバを設定する" class="headerlink" title="6-9-2 静的ファイルの配信サーバを設定する"></a>6-9-2 静的ファイルの配信サーバを設定する</h3><h3 id="6-9-3-production環境用のデータベースを作成する"><a href="#6-9-3-production環境用のデータベースを作成する" class="headerlink" title="6-9-3 production環境用のデータベースを作成する"></a>6-9-3 production環境用のデータベースを作成する</h3><h3 id="6-9-4-config-x2F-master-key-が存在することを確認する"><a href="#6-9-4-config-x2F-master-key-が存在することを確認する" class="headerlink" title="6-9-4 config&#x2F;master.key が存在することを確認する"></a>6-9-4 config&#x2F;master.key が存在することを確認する</h3><h3 id="6-9-5-productionモードでサーバを起動する"><a href="#6-9-5-productionモードでサーバを起動する" class="headerlink" title="6-9-5 productionモードでサーバを起動する"></a>6-9-5 productionモードでサーバを起動する</h3><h3 id="6-9-6-production環境用の秘密情報の管理"><a href="#6-9-6-production環境用の秘密情報の管理" class="headerlink" title="6-9-6 production環境用の秘密情報の管理"></a>6-9-6 production環境用の秘密情報の管理</h3><h3 id="6-9-7-秘密情報の暗号化・復号"><a href="#6-9-7-秘密情報の暗号化・復号" class="headerlink" title="6-9-7 秘密情報の暗号化・復号"></a>6-9-7 秘密情報の暗号化・復号</h3><h2 id="Column-secret-key-base"><a href="#Column-secret-key-base" class="headerlink" title="Column secret_key_base"></a>Column secret_key_base</h2><h2 id="Column-カスタム暗号化ファイル（Encrypted）"><a href="#Column-カスタム暗号化ファイル（Encrypted）" class="headerlink" title="Column カスタム暗号化ファイル（Encrypted）"></a>Column カスタム暗号化ファイル（Encrypted）</h2><h2 id="Chapter7-機能を追加してみよう"><a href="#Chapter7-機能を追加してみよう" class="headerlink" title="Chapter7 機能を追加してみよう"></a>Chapter7 機能を追加してみよう</h2><h2 id="7-1-登録や編集の実行前に確認画面をはさむ"><a href="#7-1-登録や編集の実行前に確認画面をはさむ" class="headerlink" title="7-1 登録や編集の実行前に確認画面をはさむ"></a>7-1 登録や編集の実行前に確認画面をはさむ</h2><h3 id="7-1-1-確認画面を表示するアクションを追加する"><a href="#7-1-1-確認画面を表示するアクションを追加する" class="headerlink" title="7-1-1 確認画面を表示するアクションを追加する"></a>7-1-1 確認画面を表示するアクションを追加する</h3><h3 id="7-1-2-新規登録画面からの遷移先を変える"><a href="#7-1-2-新規登録画面からの遷移先を変える" class="headerlink" title="7-1-2 新規登録画面からの遷移先を変える"></a>7-1-2 新規登録画面からの遷移先を変える</h3><h3 id="7-1-3-登録アクションで「戻る」ボタンからの遷移に対応する"><a href="#7-1-3-登録アクションで「戻る」ボタンからの遷移に対応する" class="headerlink" title="7-1-3 登録アクションで「戻る」ボタンからの遷移に対応する"></a>7-1-3 登録アクションで「戻る」ボタンからの遷移に対応する</h3><h2 id="Column-確認画面があるほうが良いとは限らない"><a href="#Column-確認画面があるほうが良いとは限らない" class="headerlink" title="Column 確認画面があるほうが良いとは限らない"></a>Column 確認画面があるほうが良いとは限らない</h2><h2 id="7-2-一覧画面に検索機能を追加する"><a href="#7-2-一覧画面に検索機能を追加する" class="headerlink" title="7-2 一覧画面に検索機能を追加する"></a>7-2 一覧画面に検索機能を追加する</h2><h3 id="7-2-1-Ransackのインストール"><a href="#7-2-1-Ransackのインストール" class="headerlink" title="7-2-1 Ransackのインストール"></a>7-2-1 Ransackのインストール</h3><h3 id="7-2-2-名称による検索"><a href="#7-2-2-名称による検索" class="headerlink" title="7-2-2 名称による検索"></a>7-2-2 名称による検索</h3><h3 id="7-2-3-検索時のSQLの確認と検索マッチャー"><a href="#7-2-3-検索時のSQLの確認と検索マッチャー" class="headerlink" title="7-2-3 検索時のSQLの確認と検索マッチャー"></a>7-2-3 検索時のSQLの確認と検索マッチャー</h3><h3 id="7-2-4-登録日時による検索"><a href="#7-2-4-登録日時による検索" class="headerlink" title="7-2-4 登録日時による検索"></a>7-2-4 登録日時による検索</h3><h3 id="7-2-5-検索条件を絞る"><a href="#7-2-5-検索条件を絞る" class="headerlink" title="7-2-5 検索条件を絞る"></a>7-2-5 検索条件を絞る</h3><h2 id="7-3-一覧画面にソート機能を追加する"><a href="#7-3-一覧画面にソート機能を追加する" class="headerlink" title="7-3 一覧画面にソート機能を追加する"></a>7-3 一覧画面にソート機能を追加する</h2><h2 id="7-4-メールを送る"><a href="#7-4-メールを送る" class="headerlink" title="7-4 メールを送る"></a>7-4 メールを送る</h2><h3 id="7-4-1-メイラーの実装"><a href="#7-4-1-メイラーの実装" class="headerlink" title="7-4-1 メイラーの実装"></a>7-4-1 メイラーの実装</h3><h3 id="7-4-2-テンプレートの実装"><a href="#7-4-2-テンプレートの実装" class="headerlink" title="7-4-2 テンプレートの実装"></a>7-4-2 テンプレートの実装</h3><h3 id="7-4-3-メール送信処理"><a href="#7-4-3-メール送信処理" class="headerlink" title="7-4-3 メール送信処理"></a>7-4-3 メール送信処理</h3><h3 id="7-4-4-動作確認"><a href="#7-4-4-動作確認" class="headerlink" title="7-4-4 動作確認"></a>7-4-4 動作確認</h3><h3 id="7-4-5-メイラーのテスト"><a href="#7-4-5-メイラーのテスト" class="headerlink" title="7-4-5 メイラーのテスト"></a>7-4-5 メイラーのテスト</h3><h2 id="7-5-ファイルをアップロードしてモデルに添付する"><a href="#7-5-ファイルをアップロードしてモデルに添付する" class="headerlink" title="7-5 ファイルをアップロードしてモデルに添付する"></a>7-5 ファイルをアップロードしてモデルに添付する</h2><h3 id="7-5-1-タスクに画像ファイルを添付する"><a href="#7-5-1-タスクに画像ファイルを添付する" class="headerlink" title="7-5-1 タスクに画像ファイルを添付する"></a>7-5-1 タスクに画像ファイルを添付する</h3><h3 id="7-5-2-Active-Storage"><a href="#7-5-2-Active-Storage" class="headerlink" title="7-5-2 Active Storage"></a>7-5-2 Active Storage</h3><h3 id="7-5-3-Active-Storageの準備"><a href="#7-5-3-Active-Storageの準備" class="headerlink" title="7-5-3 Active Storageの準備"></a>7-5-3 Active Storageの準備</h3><h3 id="7-5-4-タスクモデルに画像を添付できるようにする"><a href="#7-5-4-タスクモデルに画像を添付できるようにする" class="headerlink" title="7-5-4 タスクモデルに画像を添付できるようにする"></a>7-5-4 タスクモデルに画像を添付できるようにする</h3><h2 id="7-6-CSV形式のファイルのインポート-x2F-エクスポート"><a href="#7-6-CSV形式のファイルのインポート-x2F-エクスポート" class="headerlink" title="7-6 CSV形式のファイルのインポート&#x2F;エクスポート"></a>7-6 CSV形式のファイルのインポート&#x2F;エクスポート</h2><h3 id="7-6-1-タスクをCSV出力（エクスポート）する"><a href="#7-6-1-タスクをCSV出力（エクスポート）する" class="headerlink" title="7-6-1 タスクをCSV出力（エクスポート）する"></a>7-6-1 タスクをCSV出力（エクスポート）する</h3><h3 id="7-6-2-CSVデータを入力（インポート）する"><a href="#7-6-2-CSVデータを入力（インポート）する" class="headerlink" title="7-6-2 CSVデータを入力（インポート）する"></a>7-6-2 CSVデータを入力（インポート）する</h3><h2 id="7-7-ページネーション"><a href="#7-7-ページネーション" class="headerlink" title="7-7 ページネーション"></a>7-7 ページネーション</h2><h3 id="7-7-1-kaminariのインストール"><a href="#7-7-1-kaminariのインストール" class="headerlink" title="7-7-1 kaminariのインストール"></a>7-7-1 kaminariのインストール</h3><h3 id="7-7-2-ページ番号に対応する範囲のデータを検索するようにする"><a href="#7-7-2-ページ番号に対応する範囲のデータを検索するようにする" class="headerlink" title="7-7-2 ページ番号に対応する範囲のデータを検索するようにする"></a>7-7-2 ページ番号に対応する範囲のデータを検索するようにする</h3><h3 id="7-7-3-ビューにページネーションのための情報を表示する"><a href="#7-7-3-ビューにページネーションのための情報を表示する" class="headerlink" title="7-7-3 ビューにページネーションのための情報を表示する"></a>7-7-3 ビューにページネーションのための情報を表示する</h3><h3 id="7-7-4-動作確認"><a href="#7-7-4-動作確認" class="headerlink" title="7-7-4 動作確認"></a>7-7-4 動作確認</h3><h3 id="7-7-5-デザインの調整"><a href="#7-7-5-デザインの調整" class="headerlink" title="7-7-5 デザインの調整"></a>7-7-5 デザインの調整</h3><h3 id="7-7-6-表示件数を変更したいとき"><a href="#7-7-6-表示件数を変更したいとき" class="headerlink" title="7-7-6 表示件数を変更したいとき"></a>7-7-6 表示件数を変更したいとき</h3><h2 id="7-8-非同期処理や定期実行を行う（Jobスケジューリング）"><a href="#7-8-非同期処理や定期実行を行う（Jobスケジューリング）" class="headerlink" title="7-8 非同期処理や定期実行を行う（Jobスケジューリング）"></a>7-8 非同期処理や定期実行を行う（Jobスケジューリング）</h2><h3 id="7-8-1-非同期処理ツールの導入"><a href="#7-8-1-非同期処理ツールの導入" class="headerlink" title="7-8-1 非同期処理ツールの導入"></a>7-8-1 非同期処理ツールの導入</h3><h3 id="7-8-2-ジョブの作成、実行"><a href="#7-8-2-ジョブの作成、実行" class="headerlink" title="7-8-2 ジョブの作成、実行"></a>7-8-2 ジョブの作成、実行</h3><h3 id="7-8-3-実行日時指定"><a href="#7-8-3-実行日時指定" class="headerlink" title="7-8-3 実行日時指定"></a>7-8-3 実行日時指定</h3><h3 id="7-8-4-７章の終わりに"><a href="#7-8-4-７章の終わりに" class="headerlink" title="7-8-4 ７章の終わりに"></a>7-8-4 ７章の終わりに</h3><h2 id="＜発展編＞"><a href="#＜発展編＞" class="headerlink" title="＜発展編＞"></a>＜発展編＞</h2><h2 id="Chapter8-RailsとJavaScript"><a href="#Chapter8-RailsとJavaScript" class="headerlink" title="Chapter8 RailsとJavaScript"></a>Chapter8 RailsとJavaScript</h2><h2 id="8-1-JavaScriptでページに変化をつける"><a href="#8-1-JavaScriptでページに変化をつける" class="headerlink" title="8-1 JavaScriptでページに変化をつける"></a>8-1 JavaScriptでページに変化をつける</h2><h2 id="8-2-AjaxでRailsサーバと通信する"><a href="#8-2-AjaxでRailsサーバと通信する" class="headerlink" title="8-2 AjaxでRailsサーバと通信する"></a>8-2 AjaxでRailsサーバと通信する</h2><h3 id="8-2-1-Ajaxでタスクを削除する"><a href="#8-2-1-Ajaxでタスクを削除する" class="headerlink" title="8-2-1 Ajaxでタスクを削除する"></a>8-2-1 Ajaxでタスクを削除する</h3><h3 id="8-2-2-rails-ujsの果たしている役割"><a href="#8-2-2-rails-ujsの果たしている役割" class="headerlink" title="8-2-2 rails-ujsの果たしている役割"></a>8-2-2 rails-ujsの果たしている役割</h3><h3 id="8-2-3-コントローラからJavaScriptを返して実行する（SJR）"><a href="#8-2-3-コントローラからJavaScriptを返して実行する（SJR）" class="headerlink" title="8-2-3 コントローラからJavaScriptを返して実行する（SJR）"></a>8-2-3 コントローラからJavaScriptを返して実行する（SJR）</h3><h2 id="Column-CoffeeScriptは使わないことも検討する"><a href="#Column-CoffeeScriptは使わないことも検討する" class="headerlink" title="Column CoffeeScriptは使わないことも検討する"></a>Column CoffeeScriptは使わないことも検討する</h2><h2 id="Column-jQuery"><a href="#Column-jQuery" class="headerlink" title="Column jQuery"></a>Column jQuery</h2><h2 id="8-3-Turbolinks"><a href="#8-3-Turbolinks" class="headerlink" title="8-3 Turbolinks"></a>8-3 Turbolinks</h2><h3 id="8-3-1-Turbolinksの発行するイベント"><a href="#8-3-1-Turbolinksの発行するイベント" class="headerlink" title="8-3-1 Turbolinksの発行するイベント"></a>8-3-1 Turbolinksの発行するイベント</h3><h3 id="8-3-3-Turbolinksが有効な環境での注意点"><a href="#8-3-3-Turbolinksが有効な環境での注意点" class="headerlink" title="8-3-3 Turbolinksが有効な環境での注意点"></a>8-3-3 Turbolinksが有効な環境での注意点</h3><h3 id="8-3-4-Turbolinksを無効化するには"><a href="#8-3-4-Turbolinksを無効化するには" class="headerlink" title="8-3-4 Turbolinksを無効化するには"></a>8-3-4 Turbolinksを無効化するには</h3><h2 id="8-4-モダンなJavaScript管理を行う"><a href="#8-4-モダンなJavaScript管理を行う" class="headerlink" title="8-4 モダンなJavaScript管理を行う"></a>8-4 モダンなJavaScript管理を行う</h2><h3 id="8-4-1-Yarn"><a href="#8-4-1-Yarn" class="headerlink" title="8-4-1 Yarn"></a>8-4-1 Yarn</h3><h3 id="8-4-2-Webpacker"><a href="#8-4-2-Webpacker" class="headerlink" title="8-4-2 Webpacker"></a>8-4-2 Webpacker</h3><h2 id="8-5-taskleafにReactを導入してみる"><a href="#8-5-taskleafにReactを導入してみる" class="headerlink" title="8-5 taskleafにReactを導入してみる"></a>8-5 taskleafにReactを導入してみる</h2><h2 id="Column-Webpackerのメリット・デメリット"><a href="#Column-Webpackerのメリット・デメリット" class="headerlink" title="Column Webpackerのメリット・デメリット"></a>Column Webpackerのメリット・デメリット</h2><h2 id="Chapter9-複数人でRailsアプリケーションを開発する"><a href="#Chapter9-複数人でRailsアプリケーションを開発する" class="headerlink" title="Chapter9 複数人でRailsアプリケーションを開発する"></a>Chapter9 複数人でRailsアプリケーションを開発する</h2><h2 id="9-1-チーム開発の風景（導入編）"><a href="#9-1-チーム開発の風景（導入編）" class="headerlink" title="9-1 チーム開発の風景（導入編）"></a>9-1 チーム開発の風景（導入編）</h2><h3 id="9-1-1-ソースコードの変更を管理する"><a href="#9-1-1-ソースコードの変更を管理する" class="headerlink" title="9-1-1 ソースコードの変更を管理する"></a>9-1-1 ソースコードの変更を管理する</h3><h3 id="9-1-2-GitHubなどの開発プラットフォームを使う"><a href="#9-1-2-GitHubなどの開発プラットフォームを使う" class="headerlink" title="9-1-2 GitHubなどの開発プラットフォームを使う"></a>9-1-2 GitHubなどの開発プラットフォームを使う</h3><h3 id="9-1-3-GitHubを使うには？"><a href="#9-1-3-GitHubを使うには？" class="headerlink" title="9-1-3 GitHubを使うには？"></a>9-1-3 GitHubを使うには？</h3><h3 id="9-1-4-Pull-Requestベースの開発"><a href="#9-1-4-Pull-Requestベースの開発" class="headerlink" title="9-1-4 Pull Requestベースの開発"></a>9-1-4 Pull Requestベースの開発</h3><h3 id="9-1-5-Gitに入れるファイル、入れないファイル"><a href="#9-1-5-Gitに入れるファイル、入れないファイル" class="headerlink" title="9-1-5 Gitに入れるファイル、入れないファイル"></a>9-1-5 Gitに入れるファイル、入れないファイル</h3><h2 id="Column-database-ymlとセキュリティ"><a href="#Column-database-ymlとセキュリティ" class="headerlink" title="Column database.ymlとセキュリティ"></a>Column database.ymlとセキュリティ</h2><h3 id="9-1-6-Pull-Requestの変更差分を最新状態との比較にする"><a href="#9-1-6-Pull-Requestの変更差分を最新状態との比較にする" class="headerlink" title="9-1-6 Pull Requestの変更差分を最新状態との比較にする"></a>9-1-6 Pull Requestの変更差分を最新状態との比較にする</h3><h3 id="9-1-7-Gitのpush-fに気をつける"><a href="#9-1-7-Gitのpush-fに気をつける" class="headerlink" title="9-1-7 Gitのpush -fに気をつける"></a>9-1-7 Gitのpush -fに気をつける</h3><h3 id="9-1-8-GitHubとチャットツールを連携させる"><a href="#9-1-8-GitHubとチャットツールを連携させる" class="headerlink" title="9-1-8 GitHubとチャットツールを連携させる"></a>9-1-8 GitHubとチャットツールを連携させる</h3><h2 id="9-2-チーム開発の風景（コードレビュー編）"><a href="#9-2-チーム開発の風景（コードレビュー編）" class="headerlink" title="9-2 チーム開発の風景（コードレビュー編）"></a>9-2 チーム開発の風景（コードレビュー編）</h2><h3 id="9-2-1-コードレビューではどんな点を見て、何をコメントする？"><a href="#9-2-1-コードレビューではどんな点を見て、何をコメントする？" class="headerlink" title="9-2-1 コードレビューではどんな点を見て、何をコメントする？"></a>9-2-1 コードレビューではどんな点を見て、何をコメントする？</h3><h3 id="9-2-2-コーディング規約"><a href="#9-2-2-コーディング規約" class="headerlink" title="9-2-2 コーディング規約"></a>9-2-2 コーディング規約</h3><h2 id="Column-コーディング規約との付き合い方"><a href="#Column-コーディング規約との付き合い方" class="headerlink" title="Column コーディング規約との付き合い方"></a>Column コーディング規約との付き合い方</h2><h3 id="9-2-3-Lintツールの活用"><a href="#9-2-3-Lintツールの活用" class="headerlink" title="9-2-3 Lintツールの活用"></a>9-2-3 Lintツールの活用</h3><h2 id="Column-コードレビューは素晴らしい、だが万能ではない"><a href="#Column-コードレビューは素晴らしい、だが万能ではない" class="headerlink" title="Column コードレビューは素晴らしい、だが万能ではない"></a>Column コードレビューは素晴らしい、だが万能ではない</h2><h3 id="9-2-4-CIツールとGitHubを連動させる"><a href="#9-2-4-CIツールとGitHubを連動させる" class="headerlink" title="9-2-4 CIツールとGitHubを連動させる"></a>9-2-4 CIツールとGitHubを連動させる</h3><h2 id="9-3-チーム開発の風景（分担編）"><a href="#9-3-チーム開発の風景（分担編）" class="headerlink" title="9-3 チーム開発の風景（分担編）"></a>9-3 チーム開発の風景（分担編）</h2><h3 id="9-3-1-チームで開発するときの分担の仕方"><a href="#9-3-1-チームで開発するときの分担の仕方" class="headerlink" title="9-3-1 チームで開発するときの分担の仕方"></a>9-3-1 チームで開発するときの分担の仕方</h3><h2 id="9-4-開発環境の構築方法をわかりやすくしておく"><a href="#9-4-開発環境の構築方法をわかりやすくしておく" class="headerlink" title="9-4 開発環境の構築方法をわかりやすくしておく"></a>9-4 開発環境の構築方法をわかりやすくしておく</h2><h3 id="9-4-1-誰でも簡単にセットアップできるようにする"><a href="#9-4-1-誰でも簡単にセットアップできるようにする" class="headerlink" title="9-4-1 誰でも簡単にセットアップできるようにする"></a>9-4-1 誰でも簡単にセットアップできるようにする</h3><h3 id="9-4-2-仮想化環境を利用する"><a href="#9-4-2-仮想化環境を利用する" class="headerlink" title="9-4-2 仮想化環境を利用する"></a>9-4-2 仮想化環境を利用する</h3><h3 id="9-4-3-初期データ・テスト用データの共有"><a href="#9-4-3-初期データ・テスト用データの共有" class="headerlink" title="9-4-3 初期データ・テスト用データの共有"></a>9-4-3 初期データ・テスト用データの共有</h3><h2 id="9-5-マイグレーションに注意する"><a href="#9-5-マイグレーションに注意する" class="headerlink" title="9-5 マイグレーションに注意する"></a>9-5 マイグレーションに注意する</h2><h3 id="9-5-1-ロールバックできることを確認しよう"><a href="#9-5-1-ロールバックできることを確認しよう" class="headerlink" title="9-5-1 ロールバックできることを確認しよう"></a>9-5-1 ロールバックできることを確認しよう</h3><h3 id="9-5-2-「redo」を習慣にしよう"><a href="#9-5-2-「redo」を習慣にしよう" class="headerlink" title="9-5-2 「redo」を習慣にしよう"></a>9-5-2 「redo」を習慣にしよう</h3><h3 id="9-5-3-完全なロールバックができないとき"><a href="#9-5-3-完全なロールバックができないとき" class="headerlink" title="9-5-3 完全なロールバックができないとき"></a>9-5-3 完全なロールバックができないとき</h3><h3 id="9-5-4-過去のマイグレーションファイルの変更には慎重になろう"><a href="#9-5-4-過去のマイグレーションファイルの変更には慎重になろう" class="headerlink" title="9-5-4 過去のマイグレーションファイルの変更には慎重になろう"></a>9-5-4 過去のマイグレーションファイルの変更には慎重になろう</h3><h2 id="Column-「きれいなマイグレーション」を追求しない"><a href="#Column-「きれいなマイグレーション」を追求しない" class="headerlink" title="Column 「きれいなマイグレーション」を追求しない"></a>Column 「きれいなマイグレーション」を追求しない</h2><h3 id="9-5-5-マイグレーションファイルが多くなってきたら"><a href="#9-5-5-マイグレーションファイルが多くなってきたら" class="headerlink" title="9-5-5 マイグレーションファイルが多くなってきたら"></a>9-5-5 マイグレーションファイルが多くなってきたら</h3><h3 id="9-5-6-直接DBを変更したら必ずマイグレーションファイルも追加しておこう"><a href="#9-5-6-直接DBを変更したら必ずマイグレーションファイルも追加しておこう" class="headerlink" title="9-5-6 直接DBを変更したら必ずマイグレーションファイルも追加しておこう"></a>9-5-6 直接DBを変更したら必ずマイグレーションファイルも追加しておこう</h3><h3 id="9-5-7-データメンテナンス"><a href="#9-5-7-データメンテナンス" class="headerlink" title="9-5-7 データメンテナンス"></a>9-5-7 データメンテナンス</h3><h2 id="Column-Rakeタスクでのデータメンテナンス"><a href="#Column-Rakeタスクでのデータメンテナンス" class="headerlink" title="Column Rakeタスクでのデータメンテナンス"></a>Column Rakeタスクでのデータメンテナンス</h2><h2 id="Chapter10-Railsアプリケーションと長く付き合うために"><a href="#Chapter10-Railsアプリケーションと長く付き合うために" class="headerlink" title="Chapter10 Railsアプリケーションと長く付き合うために"></a>Chapter10 Railsアプリケーションと長く付き合うために</h2><h3 id="10-1-バージョンアップにどう取り組むか"><a href="#10-1-バージョンアップにどう取り組むか" class="headerlink" title="10-1 バージョンアップにどう取り組むか"></a>10-1 バージョンアップにどう取り組むか</h3><h3 id="10-2-小さなバージョンアップ"><a href="#10-2-小さなバージョンアップ" class="headerlink" title="10-2 小さなバージョンアップ"></a>10-2 小さなバージョンアップ</h3><h3 id="10-2-1-bundle-updateとは"><a href="#10-2-1-bundle-updateとは" class="headerlink" title="10-2-1 bundle updateとは"></a>10-2-1 bundle updateとは</h3><h3 id="10-2-2-bundle-updateの際に行うべきこと"><a href="#10-2-2-bundle-updateの際に行うべきこと" class="headerlink" title="10-2-2 bundle updateの際に行うべきこと"></a>10-2-2 bundle updateの際に行うべきこと</h3><h3 id="10-3-bundle-update-はチーム全体で行う"><a href="#10-3-bundle-update-はチーム全体で行う" class="headerlink" title="10-3 bundle update はチーム全体で行う"></a>10-3 bundle update はチーム全体で行う</h3><h3 id="10-4-bundle-updateを自動化でサポートする"><a href="#10-4-bundle-updateを自動化でサポートする" class="headerlink" title="10-4 bundle updateを自動化でサポートする"></a>10-4 bundle updateを自動化でサポートする</h3><h3 id="10-5-大きなバージョンアップを行う際に気をつけること"><a href="#10-5-大きなバージョンアップを行う際に気をつけること" class="headerlink" title="10-5 大きなバージョンアップを行う際に気をつけること"></a>10-5 大きなバージョンアップを行う際に気をつけること</h3><h3 id="10-6-アプリケーションの複雑性に立ち向かう"><a href="#10-6-アプリケーションの複雑性に立ち向かう" class="headerlink" title="10-6 アプリケーションの複雑性に立ち向かう"></a>10-6 アプリケーションの複雑性に立ち向かう</h3><h3 id="10-7-第一の鍵─しかるべきところにコードを書く"><a href="#10-7-第一の鍵─しかるべきところにコードを書く" class="headerlink" title="10-7 第一の鍵─しかるべきところにコードを書く"></a>10-7 第一の鍵─しかるべきところにコードを書く</h3><h3 id="10-7-1-コントローラに入り込む複雑さ"><a href="#10-7-1-コントローラに入り込む複雑さ" class="headerlink" title="10-7-1 コントローラに入り込む複雑さ"></a>10-7-1 コントローラに入り込む複雑さ</h3><h3 id="10-7-2-モデルに書くべきコードをモデルに寄せる"><a href="#10-7-2-モデルに書くべきコードをモデルに寄せる" class="headerlink" title="10-7-2 モデルに書くべきコードをモデルに寄せる"></a>10-7-2 モデルに書くべきコードをモデルに寄せる</h3><h3 id="10-7-3-ビューに入り込んだビジネスロジックをモデルに寄せる"><a href="#10-7-3-ビューに入り込んだビジネスロジックをモデルに寄せる" class="headerlink" title="10-7-3 ビューに入り込んだビジネスロジックをモデルに寄せる"></a>10-7-3 ビューに入り込んだビジネスロジックをモデルに寄せる</h3><h3 id="10-7-4-Decoratorパターンでモデル固有の表示ロジックを分離する"><a href="#10-7-4-Decoratorパターンでモデル固有の表示ロジックを分離する" class="headerlink" title="10-7-4 Decoratorパターンでモデル固有の表示ロジックを分離する"></a>10-7-4 Decoratorパターンでモデル固有の表示ロジックを分離する</h3><h3 id="10-8-第二の鍵─上手に共通化する"><a href="#10-8-第二の鍵─上手に共通化する" class="headerlink" title="10-8 第二の鍵─上手に共通化する"></a>10-8 第二の鍵─上手に共通化する</h3><h3 id="10-9-モデルの共通化"><a href="#10-9-モデルの共通化" class="headerlink" title="10-9 モデルの共通化"></a>10-9 モデルの共通化</h3><h3 id="10-9-1-共通機能のモジュールを複数のモデルクラスにMix-inする"><a href="#10-9-1-共通機能のモジュールを複数のモデルクラスにMix-inする" class="headerlink" title="10-9-1 共通機能のモジュールを複数のモデルクラスにMix-inする"></a>10-9-1 共通機能のモジュールを複数のモデルクラスにMix-inする</h3><h3 id="10-9-2-STI（単一テーブル継承）で共通機能を基底クラスに持たせる"><a href="#10-9-2-STI（単一テーブル継承）で共通機能を基底クラスに持たせる" class="headerlink" title="10-9-2 STI（単一テーブル継承）で共通機能を基底クラスに持たせる"></a>10-9-2 STI（単一テーブル継承）で共通機能を基底クラスに持たせる</h3><h3 id="10-9-3-全モデルクラスに共通の処理をApplicationRecordに書く"><a href="#10-9-3-全モデルクラスに共通の処理をApplicationRecordに書く" class="headerlink" title="10-9-3 全モデルクラスに共通の処理をApplicationRecordに書く"></a>10-9-3 全モデルクラスに共通の処理をApplicationRecordに書く</h3><h3 id="10-9-3-ApplicationRecordとモデルクラスの間に抽象的なクラスを挟む"><a href="#10-9-3-ApplicationRecordとモデルクラスの間に抽象的なクラスを挟む" class="headerlink" title="10-9-3 ApplicationRecordとモデルクラスの間に抽象的なクラスを挟む"></a>10-9-3 ApplicationRecordとモデルクラスの間に抽象的なクラスを挟む</h3><h3 id="10-10-コントローラの共通化"><a href="#10-10-コントローラの共通化" class="headerlink" title="10-10 コントローラの共通化"></a>10-10 コントローラの共通化</h3><h3 id="10-10-1-共通機能のモジュールを複数のコントローラクラスにMix-inする"><a href="#10-10-1-共通機能のモジュールを複数のコントローラクラスにMix-inする" class="headerlink" title="10-10-1 共通機能のモジュールを複数のコントローラクラスにMix-inする"></a>10-10-1 共通機能のモジュールを複数のコントローラクラスにMix-inする</h3><h3 id="10-10-2-基底クラスを追加して共通機能を持たせる"><a href="#10-10-2-基底クラスを追加して共通機能を持たせる" class="headerlink" title="10-10-2 基底クラスを追加して共通機能を持たせる"></a>10-10-2 基底クラスを追加して共通機能を持たせる</h3><h3 id="10-10-3-ApplicationControllerに共通機能を記述する"><a href="#10-10-3-ApplicationControllerに共通機能を記述する" class="headerlink" title="10-10-3 ApplicationControllerに共通機能を記述する"></a>10-10-3 ApplicationControllerに共通機能を記述する</h3><h3 id="10-10-4-第一の鍵を使わない状態で第二の鍵を使ってはいけない"><a href="#10-10-4-第一の鍵を使わない状態で第二の鍵を使ってはいけない" class="headerlink" title="10-10-4 第一の鍵を使わない状態で第二の鍵を使ってはいけない"></a>10-10-4 第一の鍵を使わない状態で第二の鍵を使ってはいけない</h3><h3 id="10-11-ビュー（プレゼンテーション）の共通化"><a href="#10-11-ビュー（プレゼンテーション）の共通化" class="headerlink" title="10-11 ビュー（プレゼンテーション）の共通化"></a>10-11 ビュー（プレゼンテーション）の共通化</h3><h3 id="10-11-1-パーシャルテンプレートで画面の一部を共通化する"><a href="#10-11-1-パーシャルテンプレートで画面の一部を共通化する" class="headerlink" title="10-11-1 パーシャルテンプレートで画面の一部を共通化する"></a>10-11-1 パーシャルテンプレートで画面の一部を共通化する</h3><h3 id="10-11-2-レイアウトで画面の大枠を共通化する"><a href="#10-11-2-レイアウトで画面の大枠を共通化する" class="headerlink" title="10-11-2 レイアウトで画面の大枠を共通化する"></a>10-11-2 レイアウトで画面の大枠を共通化する</h3><h3 id="10-11-3-カスタムヘルパーに共通処理を記述する"><a href="#10-11-3-カスタムヘルパーに共通処理を記述する" class="headerlink" title="10-11-3 カスタムヘルパーに共通処理を記述する"></a>10-11-3 カスタムヘルパーに共通処理を記述する</h3><h3 id="10-11-4-カスタムヘルパーは小さく作る"><a href="#10-11-4-カスタムヘルパーは小さく作る" class="headerlink" title="10-11-4 カスタムヘルパーは小さく作る"></a>10-11-4 カスタムヘルパーは小さく作る</h3><h3 id="10-11-5-特定のモデルに依存する処理をカスタムヘルパーに含めない"><a href="#10-11-5-特定のモデルに依存する処理をカスタムヘルパーに含めない" class="headerlink" title="10-11-5 特定のモデルに依存する処理をカスタムヘルパーに含めない"></a>10-11-5 特定のモデルに依存する処理をカスタムヘルパーに含めない</h3><h3 id="10-12-第三の鍵─新しい構造を追加して役割を分担する"><a href="#10-12-第三の鍵─新しい構造を追加して役割を分担する" class="headerlink" title="10-12 第三の鍵─新しい構造を追加して役割を分担する"></a>10-12 第三の鍵─新しい構造を追加して役割を分担する</h3><h3 id="10-12-1-ActiveModel"><a href="#10-12-1-ActiveModel" class="headerlink" title="10-12-1 ActiveModel"></a>10-12-1 ActiveModel</h3><h3 id="10-12-2-共通処理を担当するオブジェクトを別につくって連携させる"><a href="#10-12-2-共通処理を担当するオブジェクトを別につくって連携させる" class="headerlink" title="10-12-2 共通処理を担当するオブジェクトを別につくって連携させる"></a>10-12-2 共通処理を担当するオブジェクトを別につくって連携させる</h3><h3 id="10-12-3-意味のあるパラメータの集合からクラスを生み出す"><a href="#10-12-3-意味のあるパラメータの集合からクラスを生み出す" class="headerlink" title="10-12-3 意味のあるパラメータの集合からクラスを生み出す"></a>10-12-3 意味のあるパラメータの集合からクラスを生み出す</h3><h3 id="10-12-4-外部サービスのロジックを閉じ込める"><a href="#10-12-4-外部サービスのロジックを閉じ込める" class="headerlink" title="10-12-4 外部サービスのロジックを閉じ込める"></a>10-12-4 外部サービスのロジックを閉じ込める</h3><h3 id="10-12-5-複数のモデルが絡む特定処理の専門家を作る"><a href="#10-12-5-複数のモデルが絡む特定処理の専門家を作る" class="headerlink" title="10-12-5 複数のモデルが絡む特定処理の専門家を作る"></a>10-12-5 複数のモデルが絡む特定処理の専門家を作る</h3><h3 id="10-12-6-サブリソース単位でコントローラを分割する"><a href="#10-12-6-サブリソース単位でコントローラを分割する" class="headerlink" title="10-12-6 サブリソース単位でコントローラを分割する"></a>10-12-6 サブリソース単位でコントローラを分割する</h3><h2 id="Column-何でも屋のアクションを実装しない"><a href="#Column-何でも屋のアクションを実装しない" class="headerlink" title="Column 何でも屋のアクションを実装しない"></a>Column 何でも屋のアクションを実装しない</h2><h3 id="10-13-モジュールを上手に利用するために"><a href="#10-13-モジュールを上手に利用するために" class="headerlink" title="10-13 モジュールを上手に利用するために"></a>10-13 モジュールを上手に利用するために</h3><h3 id="10-13-1-構造として分かりやすい意味を持たせる"><a href="#10-13-1-構造として分かりやすい意味を持たせる" class="headerlink" title="10-13-1 構造として分かりやすい意味を持たせる"></a>10-13-1 構造として分かりやすい意味を持たせる</h3><h3 id="10-13-2-利用元クラスの一部として違和感がないかを検討する"><a href="#10-13-2-利用元クラスの一部として違和感がないかを検討する" class="headerlink" title="10-13-2 利用元クラスの一部として違和感がないかを検討する"></a>10-13-2 利用元クラスの一部として違和感がないかを検討する</h3><h3 id="10-13-3-利用元クラスと内部データを共有していることを意識する"><a href="#10-13-3-利用元クラスと内部データを共有していることを意識する" class="headerlink" title="10-13-3 利用元クラスと内部データを共有していることを意識する"></a>10-13-3 利用元クラスと内部データを共有していることを意識する</h3><h3 id="10-13-4-独立的にして利用条件を分かりやすくする"><a href="#10-13-4-独立的にして利用条件を分かりやすくする" class="headerlink" title="10-13-4 独立的にして利用条件を分かりやすくする"></a>10-13-4 独立的にして利用条件を分かりやすくする</h3><h3 id="10-13-5-追加部品であるという節度を守る"><a href="#10-13-5-追加部品であるという節度を守る" class="headerlink" title="10-13-5 追加部品であるという節度を守る"></a>10-13-5 追加部品であるという節度を守る</h3><h3 id="10-14-おわりに"><a href="#10-14-おわりに" class="headerlink" title="10-14 おわりに"></a>10-14 おわりに</h3><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;現場で使える-Ruby-on-Rails-5速習実践ガイド（ISBN978-4-8399-6222-7）&quot;&gt;&lt;a href=&quot;#現場で使える-Ruby-on-Rails-5速習実践ガイド（ISBN978-4-8399-6222-7）&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="Ruby" scheme="http://yoursite.com/categories/Ruby/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>安全なWebアプリケーションの作り方_脆弱性が生まれる原理と対策の実践_第2版</title>
    <link href="http://yoursite.com/Security/2020-08_%E5%AE%89%E5%85%A8%E3%81%AAWeb%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9_%E8%84%86%E5%BC%B1%E6%80%A7%E3%81%8C%E7%94%9F%E3%81%BE%E3%82%8C%E3%82%8B%E5%8E%9F%E7%90%86%E3%81%A8%E5%AF%BE%E7%AD%96%E3%81%AE%E5%AE%9F%E8%B7%B5_%E7%AC%AC2%E7%89%88/"/>
    <id>http://yoursite.com/Security/2020-08_%E5%AE%89%E5%85%A8%E3%81%AAWeb%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9_%E8%84%86%E5%BC%B1%E6%80%A7%E3%81%8C%E7%94%9F%E3%81%BE%E3%82%8C%E3%82%8B%E5%8E%9F%E7%90%86%E3%81%A8%E5%AF%BE%E7%AD%96%E3%81%AE%E5%AE%9F%E8%B7%B5_%E7%AC%AC2%E7%89%88/</id>
    <published>2020-08-19T15:00:00.000Z</published>
    <updated>2020-08-29T08:50:56.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安全なWebアプリケーションの作り方-脆弱性が生まれる原理と対策の実践-第2版"><a href="#安全なWebアプリケーションの作り方-脆弱性が生まれる原理と対策の実践-第2版" class="headerlink" title="安全なWebアプリケーションの作り方_脆弱性が生まれる原理と対策の実践_第2版"></a>安全なWebアプリケーションの作り方_脆弱性が生まれる原理と対策の実践_第2版</h1><h2 id="理解したこと"><a href="#理解したこと" class="headerlink" title="理解したこと"></a>理解したこと</h2><h2 id="書籍情報"><a href="#書籍情報" class="headerlink" title="書籍情報"></a>書籍情報</h2><ul><li><p>著者</p><ul><li>徳丸浩:ＥＧセキュアソリューションズ株式会社代表、ＯＷＡＳＰ Ｊａｐａｎアドバイザリーボード、独占行政法人情報処理推進機構（ＩＰＡ）非常勤研究員</li></ul></li><li><p>定価</p><ul><li>3,520円</li></ul></li><li><p>発売日</p><ul><li>2018&#x2F;06&#x2F;22</li></ul></li><li><p>ISBN</p><ul><li>978-4-7973-9316-3</li></ul></li></ul><p>Ｗｅｂアプリ開発者が知っておくべき攻撃と防御の知識を徹底解説。脆弱性が生まれる原理と具体的な対処法が学べる。実習用仮想マシンのダウンロードサービス付き。ＯＷＡＳＰ Ｔｏｐ１０−２０１７対応。【「TRC MARC」の商品解説】</p><p>日本中の現場で支持されたベストセラーが、最新環境にあわせて全面刷新＋大増ページ！</p><p>Webアプリケーションにはなぜ脆弱性が生まれるのか？<br>脆弱性を解消するにはどうプログラミングすればよいか？<br>PHPサンプルへの攻撃を通して脆弱性が生まれる原理と具体的な対処方法が学べる！</p><p>Webアプリ開発者の必読書、待望の改訂版！<br>OWASP Top 10 - 2017対応</p><p>&lt;主な改訂内容&gt;<br>・HTML5の普及に対応してWeb APIやJavaScriptに関する解説を新設<br>・OWASP Top 10 - 2017に対応して、XXEや安全でないデシリアライゼーションなどを解説<br>・脆弱性診断に対する関心が高まっていることから、脆弱性診断の入門の章を親設<br>・IE7のサポート終了など現在のソフトウェアの状況に対応<br>・実習環境をWindowsに加えてMacにも対応【商品解説】</p><h2 id="1章-Webアプリケーションの脆弱性とは"><a href="#1章-Webアプリケーションの脆弱性とは" class="headerlink" title="1章 Webアプリケーションの脆弱性とは"></a>1章 Webアプリケーションの脆弱性とは</h2><h3 id="1-1-脆弱性とは、「悪用できるバグ」"><a href="#1-1-脆弱性とは、「悪用できるバグ」" class="headerlink" title="1.1 脆弱性とは、「悪用できるバグ」"></a>1.1 脆弱性とは、「悪用できるバグ」</h3><p>脆弱性(vulnerability)とは：バグの中でも悪用できてしまうもの</p><h3 id="1-2-脆弱性があるとなぜ駄目なのか"><a href="#1-2-脆弱性があるとなぜ駄目なのか" class="headerlink" title="1.2 脆弱性があるとなぜ駄目なのか"></a>1.2 脆弱性があるとなぜ駄目なのか</h3><ul><li>経済的損失</li><li>法的な要求</li><li>利用者が回復不可能なダメージを受ける場合が多い</li><li>Webサイト利用者に嘘をつくことになる</li><li>攻撃インフラ（ボットネットワークなど）構築に荷担してしまう</li></ul><h3 id="1-3-脆弱性が生まれる理由"><a href="#1-3-脆弱性が生まれる理由" class="headerlink" title="1.3 脆弱性が生まれる理由"></a>1.3 脆弱性が生まれる理由</h3><ul><li>理由<ul><li>(A)バグによるもの：XSS</li><li>(B)チェック機能の不足によるもの：ディレクトリトラバーサルなど</li></ul></li></ul><h3 id="1-4-セキュリティバグとセキュリティ機能"><a href="#1-4-セキュリティバグとセキュリティ機能" class="headerlink" title="1.4 セキュリティバグとセキュリティ機能"></a>1.4 セキュリティバグとセキュリティ機能</h3><h3 id="1-5-本書の構成"><a href="#1-5-本書の構成" class="headerlink" title="1.5 本書の構成"></a>1.5 本書の構成</h3><h3 id="1-6-セキュリティガイドラインとの対応"><a href="#1-6-セキュリティガイドラインとの対応" class="headerlink" title="1.6 セキュリティガイドラインとの対応"></a>1.6 セキュリティガイドラインとの対応</h3><ul><li>ガイドライン２種類<ul><li>安全なウェブサイトの作り方</li><li>OWASP Top 10</li></ul></li></ul><p>本書の項目との対応表の説明</p><h2 id="2章-実習環境のセットアップ"><a href="#2章-実習環境のセットアップ" class="headerlink" title="2章 実習環境のセットアップ"></a>2章 実習環境のセットアップ</h2><h3 id="2-1-実習環境の概要"><a href="#2-1-実習環境の概要" class="headerlink" title="2.1 実習環境の概要"></a>2.1 実習環境の概要</h3><ul><li><p>サンプルを動かす環境</p><ul><li>Linux</li><li>nginx 1.10</li><li>Apache 2.4</li><li>PHP 5.3 &#x2F; PHP 7.0</li><li>Tomcat 8.5</li><li>MariaDB 10.1</li><li>Postfix 3.1</li></ul></li><li><p>インストールするプログラム</p><ul><li>Firefox</li><li>VirtualBox</li><li>仮想マシン</li><li>OWASP ZAP(脆弱性診断に用いるツール)</li><li>FoxyProxy-Standard(プロキシを切り替えるFirefoxアドオン)</li></ul></li><li><p>実習用仮想マシンのダウンロード</p><ul><li><a href="https://wasbook.org/download/">https://wasbook.org/download/</a></li></ul></li></ul><h3 id="2-2-Firefoxのインストール"><a href="#2-2-Firefoxのインストール" class="headerlink" title="2.2 Firefoxのインストール"></a>2.2 Firefoxのインストール</h3><ul><li>XSSフィルタが標準では実装されていないのでクロスサイトスクリプティングという脆弱性の体験がやりやすい</li><li>ダウンロードURL<ul><li><a href="https://www.mozilla.org/ja/firefox/new/">https://www.mozilla.org/ja/firefox/new/</a></li></ul></li></ul><h3 id="2-3-VirtualBoxのインストール"><a href="#2-3-VirtualBoxのインストール" class="headerlink" title="2.3 VirtualBoxのインストール"></a>2.3 VirtualBoxのインストール</h3><ul><li>ダウンロードURL<ul><li><a href="https://www.virtualbox.org/">https://www.virtualbox.org/</a></li></ul></li></ul><h3 id="2-4-仮想マシンのインストールと動作確認"><a href="#2-4-仮想マシンのインストールと動作確認" class="headerlink" title="2.4 仮想マシンのインストールと動作確認"></a>2.4 仮想マシンのインストールと動作確認</h3><p>wasbookのOSイメージをインポート<br>ホストネットワークマネージャを設定<br>ゲストOSの設定＞ネットワークより以下を確認<br>アダプター１にNATが設定されている<br>アダプター２にホストオンリーアダプター、名前に先程ホストネットワークマネージャより設定した名前が選択されていること</p><p>ゲストOSを起動してログイン<br><code>ip a</code>でアドレス確認<br>ホストOSからping疎通</p><h3 id="2-5-OWASP-ZAPのインストール"><a href="#2-5-OWASP-ZAPのインストール" class="headerlink" title="2.5 OWASP ZAPのインストール"></a>2.5 OWASP ZAPのインストール</h3><ul><li><p>OWASP ZAPとは</p><ul><li>OWASP ZAP(OWASP Zed Attack Proxy)は、OWASP(The Open Web Application Security Project)が開発・公開しているWebアプリケーション脆弱性診断用ツールで、無償で公開されている</li><li>OWASP ZAPはWindowsPC&#x2F;Mac上でプロキシとして動作し、HTTP通信を観察したり、変更したりすることができる</li><li>同種のツールに、Burp SuiteやFiddlerなどがあるが、本書では以下の理由でこちらを使う<ul><li>完全に無償で利用できる</li><li>自動の診断ツールが手軽に利用できる</li><li>WindowsとmacOSの両方で利用できる</li></ul></li></ul></li><li><p>JREのインストール</p><ul><li>OWASP ZAPはJavaで記述されているので実行環境が必要</li><li>ただしmacOS版のOWASP ZAPはJRE版が同梱されているのでJREをインストールする必要はありません</li><li>Windowsは必要があればJREをインストール<ul><li><code>java -version</code>で確認</li></ul></li></ul></li><li><p>OWASP ZAPのインストール</p><ul><li><a href="https://owasp.org/www-project-zap/">https://owasp.org/www-project-zap/</a></li><li>JRE実行環境とbit数をあわせること</li></ul></li></ul><p>オプションの設定を行っておく</p><h3 id="2-6-Firefoxの拡張FoxyProxy-Standardのインストール"><a href="#2-6-Firefoxの拡張FoxyProxy-Standardのインストール" class="headerlink" title="2.6 Firefoxの拡張FoxyProxy-Standardのインストール"></a>2.6 Firefoxの拡張FoxyProxy-Standardのインストール</h3><ul><li>ForxProxy Satandard<ul><li><a href="https://addons.mozilla.org/ja/firefox/addon/foxyproxy-standard/">https://addons.mozilla.org/ja/firefox/addon/foxyproxy-standard/</a></li></ul></li></ul><p>アドオン内のプロキシ設定を修正</p><h3 id="2-7-OWASP-ZAPを使ってみる"><a href="#2-7-OWASP-ZAPを使ってみる" class="headerlink" title="2.7 OWASP ZAPを使ってみる"></a>2.7 OWASP ZAPを使ってみる</h3><p>実際にFireFoxからアクセスして記録されるかどうかを確認する</p><h3 id="2-8-Webメールの確認"><a href="#2-8-Webメールの確認" class="headerlink" title="2.8 Webメールの確認"></a>2.8 Webメールの確認</h3><p>本書では、メール処理に伴う脆弱性でメールを送信したり、<br>脆弱性に対する攻撃でメールを送信したりする場合があるので、ブラウザからメールを確認できるように、RoundcubeというWebメールソフトが導入されている</p><p>実際にログインして確かめましょう</p><h2 id="3章-Webセキュリティの基礎-～-HTTP、セッション管理、同一オリジンポリシー"><a href="#3章-Webセキュリティの基礎-～-HTTP、セッション管理、同一オリジンポリシー" class="headerlink" title="3章 Webセキュリティの基礎 ～ HTTP、セッション管理、同一オリジンポリシー"></a>3章 Webセキュリティの基礎 ～ HTTP、セッション管理、同一オリジンポリシー</h2><h3 id="3-1-HTTPとセッション管理"><a href="#3-1-HTTPとセッション管理" class="headerlink" title="3.1 HTTPとセッション管理"></a>3.1 HTTPとセッション管理</h3><ul><li><p>なぜHTTPを学ぶのか</p><ul><li>Web固有の特性に由来して、脆弱性が発生するため</li></ul></li><li><p>一番かんたんなHTTP</p></li><li><p>Referer</p><ul><li>セキュリティ上の問題になるのは、URLが秘密情報を含んでいる場合</li><li>典型的にはURLにセッションIDを含んでいる場合、Referer経由で外部に漏洩し、なりすましに悪用される可能性がある</li></ul></li><li><p>hiddenパラメータの書き換えを体験</p><ul><li>hiddenパラメータ部分に脆弱性がある場合に、OWASP ZAPのようなプロキシツールを用いてhiddenパラメータを改変し、攻撃することが可能であることを実感してもらうため</li></ul></li><li><p>hiddenパラメータのメリット</p><ul><li>hiddenは利用者自身からは書き換えできるものの、情報漏洩や第三者からの書き換えに対しては堅牢だということ</li><li>hiddenパラメ―tあと比較する対象には、後述するクッキーやセッション変数がある</li><li>特にログイン前の状態でかつ、地域型JPドメイン名や都道府県型JPドメイン名を使っている場合、後述するクッキーモンスターバグの影響により、セッション変数の漏洩に対する効果的な対策がない</li><li>このため利用者自身によっても書換えられては困る認証や認可に関する情報はセッション変数に保存するべきだが、それ以外の情報はまずはhiddenパラメータに保存することを検討するとよい</li><li>特にログイン前の状態では認証認可に関する情報はないはずなので、原則としてセッション変数の使用は避け、hiddenパラメータを使うことが情報漏えいなどに対して安全</li></ul></li><li><p>ステートレスなHTTP認証</p><ul><li>HTTPには認証機能がサポートされている</li><li>HTTP認証と総称されるが<ul><li>Basic認証</li><li>NTLM認証</li><li>Digest認証<ul><li>などが存在する</li></ul></li></ul></li><li>HTTPがステートレスなプロトコルであることから、HTTP認証もステートレス</li></ul></li><li><p>Basic認証を体験する</p><ul><li>Basic認証は認証が必要なページにリクエストがあると、いったん「401 Unauthorized(認証が必要なのにされていない)」というステータスを返します。これを受けてブラウザはIDとパスワードの入力画面を表示し、入力されたIDとパスワードを追加したリクエストをあらためてサーバーに返信します。</li></ul></li><li><p>認証と認可</p><ul><li>認証とは：利用者がたしかに本人であることをなんらかの手段で確認すること<ul><li>Basic認証のほか、HTMLフォームでIDとパスワードを入力させるフォーム認証、TLSクライアント証明書を用いるクライアント認証など</li></ul></li><li>認可とは：認証済みの利用者に権限を与えること<ul><li>具体的には、データの参照・更新・削除や、預金の振り込み、物品の購入などを「できるようにする」こと</li></ul></li></ul></li><li><p>クッキーとセッション管理</p><ul><li>クッキー：サーバー側からブラウザに対して、「名前＝変数」の組を覚えておくように指示するもの<ul><li>クッキーはセッション管理という機能の実現に使われる</li></ul></li></ul></li><li><p>アプリケーションが<code>Set-Cookie</code>というレスポンスヘッダーを返却して、ブラウザに対してクッキーを覚えるように指示する</p></li><li><p>クッキーには有効期限が設定できるが、有効期限が設定されていないクッキーはブラウザ終了時まで有効になる</p></li><li><p>クッキーによるセッション管理</p><ul><li>アプリケーションデータを保持する目的でクッキーそのものに値を入れることはあまり行われない</li><li>その理由は以下の通り<ul><li>クッキーが保持できる値の個数や文字列長には制限がある</li><li>クッキーの値は利用者本人には参照・変更ができるので、秘密情報の格納に向かない<ul><li>このためクッキーには「整理番号」としてセッションIDを格納しておき、実際の値はサーバー側で管理する方法が広く用いられている</li><li>これをクッキーによるセッション管理と呼ぶ</li></ul></li></ul></li></ul></li><li><p>セッションIDに求められる要件</p><ul><li>要件１：第三者がセッションIDを推測できないこと<ul><li>暗号論的擬似乱数生成器を用いて生成<a href="https://www.cryptrec.go.jp/list.html">https://www.cryptrec.go.jp/list.html</a></li><li>しかし実際にはセッションIDを自作するのではなく、Webアプリケーション開発ツールで提供されるものを利用すべき</li><li>セッション管理機構は自作しないことが重要</li></ul></li><li>要件２：第三者がセッションIDを強制されないこと<ul><li>セッションIDの固定化攻撃(Session Fixaction Attack)を受けないように、認証が完了したタイミングでセッションIDを新しく払い出そうという話</li></ul></li><li>要件３：第三者にセッションIDが漏洩しないこと<ul><li>セッションIDが漏洩する主な原因<ul><li>クッキー発行の際の属性に不備がある</li><li>ネットワーク的にセッションIDが盗聴される</li><li>XSSなどアプリケーションの脆弱性により漏洩する</li><li>PHPやブラウザなどプラットフォームの脆弱性により漏洩する</li><li>セッションIDをURLに保持している場合は、Refererヘッダから漏洩する</li></ul></li></ul></li></ul></li><li><p>クッキーの属性</p></li></ul><table><thead><tr><th>属性</th><th>意味</th></tr></thead><tbody><tr><td>Domain</td><td>ブラウザがクッキー値を送信するサーバーのドメイン</td></tr><tr><td>Path</td><td>ブラウザがクッキー値を送信するURLのディレクトリ</td></tr><tr><td>Expires</td><td>クッキー値の有効期限。指定しない場合、ブラウザの終了まで</td></tr><tr><td>Secure</td><td>HTTPSの場合のみクッキーを送信</td></tr><tr><td>HttpOnly</td><td>この属性が指定されたクッキーはJavascriptからアクセスできない</td></tr></tbody></table><ul><li><p>このうちセキュリティ上重要な属性</p><ul><li>Domain</li><li>Secure</li><li>HttpOnly</li></ul></li><li><p>Domain属性：通常設定しない</p><ul><li>複数のサーバに送信されるクッキーを生成したい場合に使うが、Domain属性を指定しない状態がもっともクッキーの送信範囲が狭く、安全な状態と言える</li></ul></li><li><p>Column：クッキーモンスターバグ</p><ul><li>筆者が所属する会社のドメイン名は<code>eg-secure.co.jp</code>なので、クッキーを発行する際のドメイン指定の最短は<code>eg-secure.co.jp</code>となるはず</li><li>ところが、古いブラウザを使っていると<code>.co.jp</code>のドメインのクッキーが作れてしまうという問題があった</li><li>このバグを「クッキーモンスターバグ」という</li></ul></li><li><p>クッキーのセキュア属性</p><ul><li>HTTPS通信の場合のみにサーバーに送信されるので、HTTPS通信を保証することができる</li></ul></li><li><p>クッキーのHttpOnly属性</p><ul><li>Javascriptからアクセスできないクッキーを設定するもの</li><li>XSS攻撃でJavascriptを悪用してクッキーを盗み出すというもので、クッキーにHttpOnly属性をつけておくとJavascriptによりクッキーを盗み出すことができなくなる</li><li>HttpOnly属性をつけることで悪影響はないのでつけておくことをおすすめ</li></ul></li></ul><h3 id="3-2-受動的攻撃と同一オリジンポリシー"><a href="#3-2-受動的攻撃と同一オリジンポリシー" class="headerlink" title="3.2 受動的攻撃と同一オリジンポリシー"></a>3.2 受動的攻撃と同一オリジンポリシー</h3><ul><li><p>能動的攻撃と受動的攻撃</p><ul><li>能動的攻撃：攻撃者がWebサーバーに対して直接攻撃すること</li><li>受動的攻撃：攻撃者がサーバーに直接攻撃するのではなく、Webサイトの利用者に罠を仕掛ける事により、罠を閲覧したユーザを通してアプリケーションを攻撃する手法<ul><li>罠サイト経由でCSRFやXSSの攻撃を仕掛ける</li></ul></li></ul></li><li><p>ブラウザはどのように受動的攻撃を防ぐか</p><ul><li>受動的攻撃に対しては、ブラウザとWebサイトそれぞれで対策を行う必要がある</li><li>Webサイト側の対策を説明する前に、この節でブラウザのセキュリティ機能について説明する</li></ul></li><li><p>サンドボックスという考え方</p><ul><li>利用者に配布元を確認させた上で、利用者が許可した場合のみに実行する</li><li>プログラムの「できること」を制限するサンドボックスという環境を用意する<ul><li>ローカルファイルへのアクセス禁止</li><li>プリンタなどの資源の利用禁止（画面表示は可能）</li><li>ネットワークアクセスの制限（同一オリジンポリシー）</li></ul></li></ul></li><li><p>同一オリジンポリシー</p><ul><li>JavaScriptなどのクライアントスクリプトからサイトをまたがったアクセスを禁止するセキュリティ上の制限であり、ブラウザのサンドボックスに用意された制限の１つ</li><li>iframeを題材にして、同一オリジンポリシーがなぜ必要かを説明していきます</li></ul></li><li><p>同一オリジンである条件</p><ul><li>「同一オリジン」であるとは、以下のすべてを満たす場合<ul><li>URLのホスト（FQDN:Fully Qualified Domain Name）が一致している</li><li>スキーム（プロトコル）が一致している</li><li>ポート番号が一致している</li></ul></li><li>クッキーに対する条件はスキームとポート番号は関係ないのでJavaScriptの制限のほうが厳しい</li><li>一方JavaScriptにはディレクトリに関する制限はない</li><li>iframeだけでなく、Ajaxの実現に使用されているXMLHttpRequestについても成約がある</li><li>ただし、XMLHttpRequestについては相手側の許可があれば同一オリジンでなくても通信できるCORSという規格が策定されました</li></ul></li><li><p>アプリケーション脆弱性と受動的攻撃</p><ul><li>ブラウザは同一オリジンポリシーにより受動的攻撃を防止しているが、アプリケーションに脆弱性があると受動的攻撃を受ける場合がある</li><li>その代表がクロスサイトスクリプティング（XSS）攻撃</li><li>iframeの外側から内側の要素へアクセスすることはできないが、何らかの方法で内側の要素にスクリプトを埋め込むことができれば、同一オリジンポリシーの制約は受けないのでドキュメント情報にアクセスできる</li></ul></li><li><p>JavaScript以外のクロスドメインアクセス</p><ul><li>frame要素とiframe要素</li><li>img要素</li><li>script要素</li><li>CSS<ul><li>クロスドメインで読み込み可能</li><li>IEにはCSSXSSと呼ばれる脆弱性があった</li><li>HTMLやJavaScriptをCSSとして呼び出した場合、これらCSSでないデータが部分的に読み出せるジェイ弱製があった</li></ul></li><li>form要素のaction属性<ul><li>form要素のaction属性もクロスドメインの指定が可能</li><li>またformの送信（submit）はJavaScriptから常に（action先がクロスドメインであっても）操作できる</li><li>この仕様を悪用した攻撃手法がクロスサイトリクエストフォージェリ（CSRF）攻撃</li><li>CSRF攻撃では、ユーザの意図しないformを送信させられ、アプリケーションの機能が勝手に実行される</li></ul></li></ul></li></ul><h3 id="3-3-CORS（Cross-Origin-Resource-Sharing）"><a href="#3-3-CORS（Cross-Origin-Resource-Sharing）" class="headerlink" title="3.3 CORS（Cross-Origin Resource Sharing）"></a>3.3 CORS（Cross-Origin Resource Sharing）</h3><ul><li><p>シンプルなリクエスト</p><ul><li>特定の王権を満たす「シンプルなリクエスト」の場合、XMLHttpRequestを用いて異なるオリジンにHTTPリクエストを送ることが相手側の許可なしに可能</li></ul></li><li><p>Access-Control-Allow-Origin</p><ul><li>クロスオリジンからの読み出しを許可するための仕掛けで、情報の提供元がHTTPレスポンスヘッダとして出力</li><li><code>http://example.jp</code>に対してXMLHttpRequestなどのアクセスを許可する場合は下記のHTTPレスポンスヘッダを送信<ul><li><code>Access-Control-Allow-Origin: http://example.jp</code></li><li>情報提供元がこの許可をすればJavaScriptから参照できるようになる</li></ul></li></ul></li><li><p>シンプルなリクエストの要件</p><ul><li>メソッド<ul><li>GET</li><li>HEAD</li><li>POST</li></ul></li><li>XMLHttpRequestオブジェクトのsetRequestHeaderメソッドで設定するリクエストヘッダは以下に限る<ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type</li></ul></li><li>Content-Typeヘッダは以下のいずれかである<ul><li>application&#x2F;x-www-form-urlencoded</li><li>multipart&#x2F;form-data</li><li>text&#x2F;plain</li></ul></li></ul></li><li><p>プリフライトリクエスト</p><ul><li>クロスオリジンアクセスにおいて「シンプルなリクエスト」の条件を満たさない場合、</li><li>ブラウザは、プリフライトリクエスト（pre-flight request）というHTTPリクエストを送信する</li><li>上記のシンプルなリクエストの要件に合致しない場合、ブラウザは以下のようなリクエストヘッダを送信<ul><li><code>Access-Control-Request-Method: POST</code></li><li><code>Access-Control-Request-Headers: content-type</code></li><li><code>Origin: http://example.jp</code></li></ul></li></ul></li><li><p>MEMO: CORS制約に引っかかる場合でもリソース提供元のソースは走る</p><ul><li>返却されたリソースを読み込むときに、レスポンスヘッダが存在しないと読み込むことができない様になっている</li></ul></li><li><p>認証情報を含むリクエスト</p><ul><li>デフォルトでは、クロスオリジンに対するリクエストにはHTTP認証やクッキーなどの認証に用いられるリクエストヘッダは自動的に送信されません</li><li>これらを用いるには、XMLHttpRequestのプロパティ<code>withCredentials</code>をtrueにセットする必要がある</li><li><code>withCredentials</code>プロパティをtrueにしたリクエストに対しては、<code>Access-Control-Allow-Credentials: true</code>というレスポンスヘッダを返す必要がある</li><li>まとめると<ul><li>クライアント側：XMLHttpRequestオブジェクトのwithCredentialsプロパティをtrueにする</li><li>サーバー側：レスポンスヘッダとしてAccess-Control-Allow-Credentials: trueを返す</li></ul></li></ul></li></ul><h2 id="4章-Webアプリケーションの機能別に見るセキュリティバグ"><a href="#4章-Webアプリケーションの機能別に見るセキュリティバグ" class="headerlink" title="4章 Webアプリケーションの機能別に見るセキュリティバグ"></a>4章 Webアプリケーションの機能別に見るセキュリティバグ</h2><h3 id="4-1-Webアプリケーションの機能と脆弱性の対応"><a href="#4-1-Webアプリケーションの機能と脆弱性の対応" class="headerlink" title="4.1 Webアプリケーションの機能と脆弱性の対応"></a>4.1 Webアプリケーションの機能と脆弱性の対応</h3><ul><li><p>脆弱性はどこで発生するか</p><ul><li>Webアプリケーションの出力処理で発生<ul><li>ここでいう出力は、ブラウザ表示、RDB処理、シェル実行、メール処理、ファイル処理など</li></ul></li><li>まとめると<ul><li>脆弱性には処理に起因するものと出力に起因するものがある</li><li>入力に起因する脆弱性はない（ミドルウェアの範囲を広げると、入力時の検証処理に脆弱性が入り込む余地はある）</li><li>出力に起因する脆弱性には「インジェクション」という単語がつくものが多い</li></ul></li></ul></li><li><p>インジェクション系脆弱性とは</p></li><li><p>まとめ</p><ul><li>脆弱性の説明を始めるにあたり、脆弱性の発生箇所と脆弱性の種類の関連性について説明しました</li><li>また「出力」で発生する脆弱性は、インジェクションと呼ばれる共通の原理で発生することを紹介</li></ul></li></ul><h3 id="4-2-入力処理とセキュリティ"><a href="#4-2-入力処理とセキュリティ" class="headerlink" title="4.2 入力処理とセキュリティ"></a>4.2 入力処理とセキュリティ</h3><ul><li><p>WEBアプリケーションの「入力」では何をするのか</p><ul><li>処理に入る前の準備段階<ul><li>文字エンコーディングの妥当性検証</li><li>文字エンコーディングの交換（必要な場合のみ）</li><li>入力値（パラメータ文字列）の妥当性検証</li></ul></li></ul></li><li><p>文字エンコーディングの検証</p><ul><li>PHPの場合、文字エンコーディングの検証にはmb_check_encoding関数が利用できる</li></ul></li><li><p>文字エンコーディングの変換</p><ul><li>言語によって文字エンコーディングの変換手段は異なる</li><li>おおまかな分類として、文字エンコーディングを自動的に変換する言語と、スクリプトで変換ロジックを明示する言語がある</li></ul></li><li><p>入力値の検証</p><ul><li>入力値の検証がないと…<ul><li>数値のみを受け付ける項目に英数字や記号を入力して、データベースのエラーになる</li><li>更新処理が途中でエラーになり、データベースの不整合が発生する</li><li>利用者が多数の項目を入力して事項ボタンをクリックしたら内部エラーとなり入力を最初からやり直す羽目になる</li><li>メールアドレスの入力を忘れているのにアプリケーションがメール送信処理を実行する<ul><li>入力検証はこのような悪いことが起きる可能性をへらす！</li></ul></li></ul></li><li>目的<ul><li>入力値の間違いを早期に発見して再入力を促すことにより、ユーザビリティ（使いやすさ）を向上する</li><li>間違った処理を継続することによるデータの不整合などを防ぎ、システムの信頼性を向上させる</li></ul></li></ul></li><li><p>バイナリセーフという考え方とヌルバイト攻撃</p><ul><li>バイナリセーフとは：入力値がどんなバイト列であっても正しく扱えること</li><li>ヌルバイトは、バイナリセーフでない関数の場合終端文字として扱われるため、後ろの文字列を評価対象としない</li></ul></li><li><p>入力値検証だけでは対策にならない</p><ul><li>入力段階で不正な入力をチェックしておけば、セキュリティ対策は終わりにできないか？<ul><li>アプリの仕様のためすべての文字を許容するという仕様の場合は入力時点でも何も防げない</li></ul></li></ul></li></ul><h3 id="4-3-表示処理に伴う問題"><a href="#4-3-表示処理に伴う問題" class="headerlink" title="4.3 表示処理に伴う問題"></a>4.3 表示処理に伴う問題</h3><ul><li><p>クロスサイトスクリプティング（基本編）</p><ul><li>外部からの入力値を画面に表示するしてHTMLを生成する処理に問題があると生じる脆弱性</li><li>影響<ul><li>サイト利用者のブラウザ上で、攻撃者の用意したスクリプトの実行によりクッキー値を盗まれ、利用者がなりすましの被害にあう</li><li>同じくブラウザ上でスクリプトを実行させられ、サイト利用者の権限でWebアプリケーションの機能を悪用される</li><li>Webサイト上に偽の入力フォームが表示され、フィッシングにより利用者が個人情報を盗まれる</li></ul></li></ul></li><li><p>攻撃手法と影響</p><ul><li>クッキー値の盗み出し<ul><li>罠サイトを用意してiframeで標的サイトを表示し、script実行！</li></ul></li><li>その他のJavaScriptによる攻撃<ul><li>ワーム攻撃</li></ul></li><li>画面の書換え<ul><li>JavaScriptを使わない攻撃</li><li>formを表示する画面で入力画面と編集画面を兼ねているようなもので、各入力項目の初期値が設定できるようになっているページに脆弱性があると実現する</li><li>MEMO: 最初わからなかったが腑に落ちた！ただこんなページを実装しているサイトは無いと思う。。</li></ul></li></ul></li></ul><p>P129まで 2020-08-27 02:33:29</p><ul><li><p>反射型XSSと持続型XSS</p><ul><li>反射型：攻撃用JavaScriptが攻撃対象サイトとは別のサイトに有る場合</li><li>持続型：攻撃用のJavaScriptが、攻撃対象のデータベースなどに保存される場合</li></ul></li><li><p>COLUMN: TRACEメソッドの無効化とXST</p><ul><li>古いブラウザに対して飲み有効なクロスサイト・トレーシングという攻撃がある</li><li>JavaScriptによりHTTPのTRACEメソッドを送信する事によりクッキーやBasic認証のID・パスワードを盗み出す手法</li><li>XST攻撃はブラウザで対策が2006年に完了しており、リスクはほぼないと考えられる</li></ul></li><li><p>対策まとめ</p><ul><li>必須対策（個別の対策）<ul><li>HTMLの要素内容<ul><li>htmlspecialchars関数によりエスケープ</li></ul></li><li>属性値<ul><li>htmlspecialcharsカンスによりエスケープしてダブルクォートで囲む</li></ul></li></ul></li><li>必須対策（共通対策）<ul><li>HTTPレスポンスに文字エンコーディングを明示する</li></ul></li><li>保険的対策<ul><li>X-XSS-Protectionレスポンスヘッダの使用</li><li>入力値の検証</li><li>クッキーにHttpOnly属性を付与</li><li>TRACEメソッドの無効化（コラム参照）</li></ul></li></ul></li><li><p>4.3.2 クロスサイトスクリプティング（発展編）</p></li><li><p>href属性やsrc属性のXSS</p><ul><li>対策<ul><li><code>http:</code>または<code>https:</code>で始まる絶対URLチェック</li><li>スラッシュで始まる相対URLチェック</li></ul></li></ul></li><li><h2 id="JavaScriptの動的生成-イベントハンドラのXSS-Javascriptのメソッド引数にサーバ側で動的に生成したスクリプトが注入されている場合-対策-JavaScript文字列リテラルとしてエスケープする-結果をHTMLエスケープする-script要素のXSS"><a href="#JavaScriptの動的生成-イベントハンドラのXSS-Javascriptのメソッド引数にサーバ側で動的に生成したスクリプトが注入されている場合-対策-JavaScript文字列リテラルとしてエスケープする-結果をHTMLエスケープする-script要素のXSS" class="headerlink" title="JavaScriptの動的生成- イベントハンドラのXSS  - Javascriptのメソッド引数にサーバ側で動的に生成したスクリプトが注入されている場合    - 対策      - JavaScript文字列リテラルとしてエスケープする      - 結果をHTMLエスケープする- script要素のXSS"></a>JavaScriptの動的生成<br>- イベントハンドラのXSS<br>  - Javascriptのメソッド引数にサーバ側で動的に生成したスクリプトが注入されている場合<br>    - 対策<br>      - JavaScript文字列リテラルとしてエスケープする<br>      - 結果をHTMLエスケープする<br>- script要素のXSS</h2></li></ul><h3 id="4-4-SQL呼び出しに伴う脆弱性"><a href="#4-4-SQL呼び出しに伴う脆弱性" class="headerlink" title="4.4 SQL呼び出しに伴う脆弱性"></a>4.4 SQL呼び出しに伴う脆弱性</h3><h3 id="4-5-「-重要な処理」の際に混入する脆弱性"><a href="#4-5-「-重要な処理」の際に混入する脆弱性" class="headerlink" title="4.5 「 重要な処理」の際に混入する脆弱性"></a>4.5 「 重要な処理」の際に混入する脆弱性</h3><h3 id="4-6-セッション管理の不備"><a href="#4-6-セッション管理の不備" class="headerlink" title="4.6 セッション管理の不備"></a>4.6 セッション管理の不備</h3><h3 id="4-7-リダイレクト処理にまつわる脆弱性"><a href="#4-7-リダイレクト処理にまつわる脆弱性" class="headerlink" title="4.7 リダイレクト処理にまつわる脆弱性"></a>4.7 リダイレクト処理にまつわる脆弱性</h3><h3 id="4-8-クッキー出力にまつわる脆弱性"><a href="#4-8-クッキー出力にまつわる脆弱性" class="headerlink" title="4.8 クッキー出力にまつわる脆弱性"></a>4.8 クッキー出力にまつわる脆弱性</h3><h3 id="4-9-メール送信の問題"><a href="#4-9-メール送信の問題" class="headerlink" title="4.9 メール送信の問題"></a>4.9 メール送信の問題</h3><h3 id="4-10-ファイルアクセスにまつわる問題"><a href="#4-10-ファイルアクセスにまつわる問題" class="headerlink" title="4.10 ファイルアクセスにまつわる問題"></a>4.10 ファイルアクセスにまつわる問題</h3><h3 id="4-11-OSコマンド呼び出しの際に発生する脆弱性"><a href="#4-11-OSコマンド呼び出しの際に発生する脆弱性" class="headerlink" title="4.11 OSコマンド呼び出しの際に発生する脆弱性"></a>4.11 OSコマンド呼び出しの際に発生する脆弱性</h3><h3 id="4-12-ファイルアップロードにまつわる問題"><a href="#4-12-ファイルアップロードにまつわる問題" class="headerlink" title="4.12 ファイルアップロードにまつわる問題"></a>4.12 ファイルアップロードにまつわる問題</h3><h3 id="4-13-インクルードにまつわる問題"><a href="#4-13-インクルードにまつわる問題" class="headerlink" title="4.13 インクルードにまつわる問題"></a>4.13 インクルードにまつわる問題</h3><h3 id="4-14-構造化データの読み込みにまつわる問題"><a href="#4-14-構造化データの読み込みにまつわる問題" class="headerlink" title="4.14 構造化データの読み込みにまつわる問題"></a>4.14 構造化データの読み込みにまつわる問題</h3><h3 id="4-15-共有資源やキャッシュに関する問題"><a href="#4-15-共有資源やキャッシュに関する問題" class="headerlink" title="4.15 共有資源やキャッシュに関する問題"></a>4.15 共有資源やキャッシュに関する問題</h3><h3 id="4-16-Web-API実装における脆弱性"><a href="#4-16-Web-API実装における脆弱性" class="headerlink" title="4.16 Web API実装における脆弱性"></a>4.16 Web API実装における脆弱性</h3><h3 id="4-17-JavaScriptの問題"><a href="#4-17-JavaScriptの問題" class="headerlink" title="4.17 JavaScriptの問題"></a>4.17 JavaScriptの問題</h3><h2 id="5章-代表的なセキュリティ機能"><a href="#5章-代表的なセキュリティ機能" class="headerlink" title="5章 代表的なセキュリティ機能"></a>5章 代表的なセキュリティ機能</h2><h3 id="5-1-認証"><a href="#5-1-認証" class="headerlink" title="5.1 認証"></a>5.1 認証</h3><h3 id="5-2-アカウント管理"><a href="#5-2-アカウント管理" class="headerlink" title="5.2 アカウント管理"></a>5.2 アカウント管理</h3><h3 id="5-3-認可"><a href="#5-3-認可" class="headerlink" title="5.3 認可"></a>5.3 認可</h3><h3 id="5-4-ログ出力"><a href="#5-4-ログ出力" class="headerlink" title="5.4 ログ出力"></a>5.4 ログ出力</h3><h2 id="6章-文字コードとセキュリティ"><a href="#6章-文字コードとセキュリティ" class="headerlink" title="6章 文字コードとセキュリティ"></a>6章 文字コードとセキュリティ</h2><h3 id="6-1-文字コードとセキュリティの概要"><a href="#6-1-文字コードとセキュリティの概要" class="headerlink" title="6.1 文字コードとセキュリティの概要"></a>6.1 文字コードとセキュリティの概要</h3><h3 id="6-2-文字集合"><a href="#6-2-文字集合" class="headerlink" title="6.2 文字集合"></a>6.2 文字集合</h3><h3 id="6-3-文字エンコーディング"><a href="#6-3-文字エンコーディング" class="headerlink" title="6.3 文字エンコーディング"></a>6.3 文字エンコーディング</h3><h3 id="6-4-文字コードによる脆弱性の発生要因まとめ"><a href="#6-4-文字コードによる脆弱性の発生要因まとめ" class="headerlink" title="6.4 文字コードによる脆弱性の発生要因まとめ"></a>6.4 文字コードによる脆弱性の発生要因まとめ</h3><h3 id="6-5-文字コードを正しく扱うために"><a href="#6-5-文字コードを正しく扱うために" class="headerlink" title="6.5 文字コードを正しく扱うために"></a>6.5 文字コードを正しく扱うために</h3><h3 id="6-6-まとめ"><a href="#6-6-まとめ" class="headerlink" title="6.6 まとめ"></a>6.6 まとめ</h3><h2 id="7章-脆弱性診断入門"><a href="#7章-脆弱性診断入門" class="headerlink" title="7章 脆弱性診断入門"></a>7章 脆弱性診断入門</h2><h3 id="7-1-脆弱性診断の概要"><a href="#7-1-脆弱性診断の概要" class="headerlink" title="7.1 脆弱性診断の概要"></a>7.1 脆弱性診断の概要</h3><h3 id="7-2-脆弱なサンプルアプリケーションBad-Todo"><a href="#7-2-脆弱なサンプルアプリケーションBad-Todo" class="headerlink" title="7.2 脆弱なサンプルアプリケーションBad Todo"></a>7.2 脆弱なサンプルアプリケーションBad Todo</h3><h3 id="7-3-診断ツールのダウンロードとインストール"><a href="#7-3-診断ツールのダウンロードとインストール" class="headerlink" title="7.3 診断ツールのダウンロードとインストール"></a>7.3 診断ツールのダウンロードとインストール</h3><h3 id="7-4-Nmapによるポートスキャン"><a href="#7-4-Nmapによるポートスキャン" class="headerlink" title="7.4 Nmapによるポートスキャン"></a>7.4 Nmapによるポートスキャン</h3><h3 id="7-5-OpenVASによるプラットフォーム脆弱性診断"><a href="#7-5-OpenVASによるプラットフォーム脆弱性診断" class="headerlink" title="7.5 OpenVASによるプラットフォーム脆弱性診断"></a>7.5 OpenVASによるプラットフォーム脆弱性診断</h3><h3 id="7-6-OWASP-ZAPによる自動脆弱性スキャン"><a href="#7-6-OWASP-ZAPによる自動脆弱性スキャン" class="headerlink" title="7.6 OWASP ZAPによる自動脆弱性スキャン"></a>7.6 OWASP ZAPによる自動脆弱性スキャン</h3><h3 id="7-7-OWASP-ZAPによる手動脆弱性診断"><a href="#7-7-OWASP-ZAPによる手動脆弱性診断" class="headerlink" title="7.7 OWASP ZAPによる手動脆弱性診断"></a>7.7 OWASP ZAPによる手動脆弱性診断</h3><h3 id="7-8-RIPSによるソースコード診断"><a href="#7-8-RIPSによるソースコード診断" class="headerlink" title="7.8 RIPSによるソースコード診断"></a>7.8 RIPSによるソースコード診断</h3><h3 id="7-9-脆弱性診断実施上の注意"><a href="#7-9-脆弱性診断実施上の注意" class="headerlink" title="7.9 脆弱性診断実施上の注意"></a>7.9 脆弱性診断実施上の注意</h3><h3 id="7-10-まとめ"><a href="#7-10-まとめ" class="headerlink" title="7.10 まとめ"></a>7.10 まとめ</h3><h3 id="7-11-脆弱性診断報告書のサンプル"><a href="#7-11-脆弱性診断報告書のサンプル" class="headerlink" title="7.11 脆弱性診断報告書のサンプル"></a>7.11 脆弱性診断報告書のサンプル</h3><h2 id="8章-Webサイトの安全性を高めるために"><a href="#8章-Webサイトの安全性を高めるために" class="headerlink" title="8章 Webサイトの安全性を高めるために"></a>8章 Webサイトの安全性を高めるために</h2><h3 id="8-1-Webサーバーへの攻撃経路と対策"><a href="#8-1-Webサーバーへの攻撃経路と対策" class="headerlink" title="8.1 Webサーバーへの攻撃経路と対策"></a>8.1 Webサーバーへの攻撃経路と対策</h3><h3 id="8-2-成りすまし対策"><a href="#8-2-成りすまし対策" class="headerlink" title="8.2 成りすまし対策"></a>8.2 成りすまし対策</h3><h3 id="8-3-盗聴・改ざん対策"><a href="#8-3-盗聴・改ざん対策" class="headerlink" title="8.3 盗聴・改ざん対策"></a>8.3 盗聴・改ざん対策</h3><h3 id="8-4-マルウェア対策"><a href="#8-4-マルウェア対策" class="headerlink" title="8.4 マルウェア対策"></a>8.4 マルウェア対策</h3><h3 id="8-5-まとめ"><a href="#8-5-まとめ" class="headerlink" title="8.5 まとめ"></a>8.5 まとめ</h3><h2 id="9章-安全なWebアプリケーションのための開発マネジメント"><a href="#9章-安全なWebアプリケーションのための開発マネジメント" class="headerlink" title="9章 安全なWebアプリケーションのための開発マネジメント"></a>9章 安全なWebアプリケーションのための開発マネジメント</h2><h3 id="9-1-開発マネジメントにおけるセキュリティ施策の全体像"><a href="#9-1-開発マネジメントにおけるセキュリティ施策の全体像" class="headerlink" title="9.1 開発マネジメントにおけるセキュリティ施策の全体像"></a>9.1 開発マネジメントにおけるセキュリティ施策の全体像</h3><h3 id="9-2-開発体制"><a href="#9-2-開発体制" class="headerlink" title="9.2 開発体制"></a>9.2 開発体制</h3><h3 id="9-3-開発プロセス"><a href="#9-3-開発プロセス" class="headerlink" title="9.3 開発プロセス"></a>9.3 開発プロセス</h3><h3 id="9-4-まとめ"><a href="#9-4-まとめ" class="headerlink" title="9.4 まとめ"></a>9.4 まとめ</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安全なWebアプリケーションの作り方-脆弱性が生まれる原理と対策の実践-第2版&quot;&gt;&lt;a href=&quot;#安全なWebアプリケーションの作り方-脆弱性が生まれる原理と対策の実践-第2版&quot; class=&quot;headerlink&quot; title=&quot;安全なWebアプリケーション</summary>
      
    
    
    
    <category term="Security" scheme="http://yoursite.com/categories/Security/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>Gradle徹底入門 次世代ビルドツールによる自動化基盤の構築</title>
    <link href="http://yoursite.com/JAVA/2020-06_Gradle%E5%BE%B9%E5%BA%95%E5%85%A5%E9%96%80_%E6%AC%A1%E4%B8%96%E4%BB%A3%E3%83%93%E3%83%AB%E3%83%89%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AB%E3%82%88%E3%82%8B%E8%87%AA%E5%8B%95%E5%8C%96%E5%9F%BA%E7%9B%A4%E3%81%AE%E6%A7%8B%E7%AF%89/"/>
    <id>http://yoursite.com/JAVA/2020-06_Gradle%E5%BE%B9%E5%BA%95%E5%85%A5%E9%96%80_%E6%AC%A1%E4%B8%96%E4%BB%A3%E3%83%93%E3%83%AB%E3%83%89%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AB%E3%82%88%E3%82%8B%E8%87%AA%E5%8B%95%E5%8C%96%E5%9F%BA%E7%9B%A4%E3%81%AE%E6%A7%8B%E7%AF%89/</id>
    <published>2020-06-12T15:00:00.000Z</published>
    <updated>2020-12-19T10:45:59.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gradle徹底入門-次世代ビルドツールによる自動化基盤の構築"><a href="#Gradle徹底入門-次世代ビルドツールによる自動化基盤の構築" class="headerlink" title="Gradle徹底入門 次世代ビルドツールによる自動化基盤の構築"></a>Gradle徹底入門 次世代ビルドツールによる自動化基盤の構築</h1><h2 id="理解したこと"><a href="#理解したこと" class="headerlink" title="理解したこと"></a>理解したこと</h2><h2 id="書籍情報"><a href="#書籍情報" class="headerlink" title="書籍情報"></a>書籍情報</h2><p>形式：書籍<br>発売日：2014年11月04日<br>ISBN：9784798136431<br>価格：本体3,800円＋税<br>仕様：B5変・592ページ<br>分類：プログラミング・開発<br>シリーズ：徹底入門</p><p>日本語初のGradle解説書、ついに刊行！<br>Groovyベースのビルドツール「Gradle」は、SpringやHibernateなどの著名なOSSで利用されているほか、Androidの公式ビルドツールとして採用されており、これからの開発者やビルド職人には無視することのできないツールのひとつと言えるでしょう。<br>本書は、GradleのインストールからJavaアプリケーションのビルドやテスト、依存関係の管理、ビルド成果物の公開などのGradleの主要な機能の解説に加え、詳細なスクリプトファイルの記述方法からCIツールやIDEとの連携といった実業務で必要となる範囲までをカバーした日本語初のGradleの解説書となります。<br>有識者によるGradle 2.0ベース（1.x系ベースの章や2.1のトピックなどもあります）で書き下ろされた500ページを超える本書は「徹底入門」の名に恥じない内容で、これだけ充実したGradle解説書は、日本語ではもちろん英語でも類を見ません。<br>これからGradleを始める人、Gradleをもっと使いこなしたい人、GradleとJenkinsでCIをやりたい人、AntやMavenからの移行を考えている人…などなど、多くの開発者やビルド職人にお勧めできる一冊です。</p><ul><li>サンプルコード<ul><li><a href="https://www.shoeisha.co.jp/book/download/9784798136431/detail">https://www.shoeisha.co.jp/book/download/9784798136431/detail</a></li></ul></li></ul><h2 id="第1部［導入編］"><a href="#第1部［導入編］" class="headerlink" title="第1部［導入編］"></a>第1部［導入編］</h2><h3 id="第1章-Gradle-の世界"><a href="#第1章-Gradle-の世界" class="headerlink" title="第1章 Gradle の世界"></a>第1章 Gradle の世界</h3><h4 id="1-1-Gradleとは"><a href="#1-1-Gradleとは" class="headerlink" title="1.1 Gradleとは"></a>1.1 Gradleとは</h4><ul><li><p>次世代のビルドツールとして注目を集めているオープンソースのプロダクト</p></li><li><p>Gradleが注目されている理由</p><ul><li>既存のビルドツールに比べて優れている点が多い</li><li>Gradleのビルドスクリプトは非常にシンプルに記述できるという点</li><li>具体的には本書を読みすすめると実感できる</li></ul></li><li><p>NOTE</p><ul><li>特に、肥大したAntのビルドすくリプの保守に苦労された方や、Mavenに入門しようとしたものの敷居の高さに挫折した方にはおすすめ</li></ul></li><li><p>もう１つの利点</p><ul><li>AntやMaavenといった既存のビルドツールのエコシステムを最大限活用しているという点がある</li><li>Gradleは既存のAntタスクやAntビルドスクリプト、さたにMavenリポジトリを利用できるので、過去に蓄積してきた資産は無駄にならない</li><li>それらの資産を最大限利用して段階的にGradleに移行していくことが可能</li></ul></li></ul><h4 id="1-1-1-ビルドツールとは"><a href="#1-1-1-ビルドツールとは" class="headerlink" title="1.1.1 ビルドツールとは"></a>1.1.1 ビルドツールとは</h4><ul><li>ビルドツールとは<ul><li>定型的な作業を自動化するためのソフトウェア</li></ul></li></ul><h4 id="1-1-2-ビルドツールの歴史"><a href="#1-1-2-ビルドツールの歴史" class="headerlink" title="1.1.2 ビルドツールの歴史"></a>1.1.2 ビルドツールの歴史</h4><ul><li><p>ビルドツールの進化は比較的緩やかですが、時代とともに着実に発展しています。</p></li><li><p>ここでは、その進化の流れをたどってみたいと思います。</p></li><li><p>元祖ビルドツールMake</p><ul><li>元祖はUnix系OSにおけるMakeといって差し支えない</li></ul></li><li><p>JavaのためのビルドツールAnt</p><ul><li>Antは当時流行のJavaとXMLを採用することで、Makeの弱点であったプラットフォーム依存から脱却することに成功</li><li>シンプルで使いやすい反面、ちょっと複雑なことをしようとするとビルドスクリプトが長大になる</li><li>メンテナンスが困難になる</li><li>ライブラリの依存関係を管理する仕組みが無い</li></ul></li><li><p>ビルドツールの革新者Maven</p><ul><li>JavaとXMLによるプラットフォーム独立のアーキテクチャはAntと同じですが、ビルドツールにビルドライフサイクルとプロジェクトオブジェクトモデル（POM）という概念を持ち込むことで、Antの弱点であったビルドスクリプトの冗長化を解消</li><li>また、POMにメタデータをもたせることで、ライブラリの依存関係を自動的に解決する仕組みを構築することに成功</li></ul></li><li><p>そしてGradleへ</p></li></ul><h4 id="1-1-3-Gradleの概要"><a href="#1-1-3-Gradleの概要" class="headerlink" title="1.1.3 Gradleの概要"></a>1.1.3 Gradleの概要</h4><ul><li><p>GradleプロジェクトのWebサイトでは、Gradleとは、Build Automation Evolved すなわち、「ビルド自動化ツールの進化系」であると紹介されている</p></li><li><p>Gradleの特徴</p><ul><li>拡張可能なGradleビルド言語（GSL）の提供</li><li>ビルドの分割や共通部品抽出などの体系化の容易さ</li><li>IDEなどと連携するため、Gradleを外部からコントロールするためのAPIを提供</li><li>インクリメンタルビルドや並列ビルドなどでビルドを効率化</li><li>マルチプロジェクトサポートの柔軟性</li><li>Maven&#x2F;Ivyリポジトリからローカルファイルシステムまで多用な依存関係管理手法に対応</li><li>Antタスクだけでなく、Antプロジェクト全体とのインテグレーションに対応</li><li>ビルドスクリプトの記述言語としてGroovyを利用</li><li>GradleラッパーによってGradleがインストールされていない環境でもビルドが実行可能</li><li>互換性への配慮</li></ul></li><li><p>Gradle User Guid</p><ul><li><a href="http://www.gradle.org/documentation">http://www.gradle.org/documentation</a></li></ul></li><li><p>Gradleユーザーガイド（日本語翻訳版）</p><ul><li><a href="http://gradle.monochromeroad.com/docs/">http://gradle.monochromeroad.com/docs/</a></li></ul></li></ul><h4 id="1-1-4-Gradleの事例"><a href="#1-1-4-Gradleの事例" class="headerlink" title="1.1.4 Gradleの事例"></a>1.1.4 Gradleの事例</h4><ul><li>Gradleが普及している例が紹介されている</li><li>AntやMavenと比較するとIDE連携やアプリケーションサーバー連携などが課題らしい</li></ul><h4 id="1-2-なぜGradleなのか？"><a href="#1-2-なぜGradleなのか？" class="headerlink" title="1.2 なぜGradleなのか？"></a>1.2 なぜGradleなのか？</h4><h4 id="1-2-1-ビルドスクリプトの生産性の高さ"><a href="#1-2-1-ビルドスクリプトの生産性の高さ" class="headerlink" title="1.2.1 ビルドスクリプトの生産性の高さ"></a>1.2.1 ビルドスクリプトの生産性の高さ</h4><ul><li><p>GradleはMavenと同じく、規約ベースのビルドというアプローチを採用している</p></li><li><p>これにより、規約に従ったプロジェクト構造（ディレクトリ構造）を使う限りにおいては、ビルドスクリプトの記述を大幅に省略可能</p></li><li><p>GradleはJVM言語であるGroovyをベースに構築されている</p></li><li><p>GroovyはJavaにはない、リストリテラル&#x2F;マップリテラル&#x2F;クロージャといった機能が使える</p></li><li><p>GradleはたんにGroovyの文法を利用するだけでなく、ビルドスクリプトをより簡潔に記述するための独自の文法（DSL）も提供している</p></li><li><p>NOTE</p><ul><li>XMLは静的な構造を表現することは得意ですが、ビルドスクリプトのような手順（手続き）を表現することには適していない</li></ul></li></ul><h4 id="1-2-2-ビルド手順の制御の容易性"><a href="#1-2-2-ビルド手順の制御の容易性" class="headerlink" title="1.2.2 ビルド手順の制御の容易性"></a>1.2.2 ビルド手順の制御の容易性</h4><ul><li>Mavenの偉大な業績として<ul><li>大半のプロジェクトに適用できる標準的なビルド手順</li><li>メタデータによるビルド手順の制御<ul><li>という考え方を導入し、それを実現する具体的なアイデアとしてPOMを導入したことが挙げられる</li></ul></li></ul></li></ul><h4 id="1-2-3-マルチプロジェクト対応"><a href="#1-2-3-マルチプロジェクト対応" class="headerlink" title="1.2.3 マルチプロジェクト対応"></a>1.2.3 マルチプロジェクト対応</h4><ul><li><p>サブプロジェクトに共通するビルドの設定など</p><ul><li>マルチプロジェクトに含めるサブプロジェクトを定義する機能</li><li>サブプロジェクトに共通のビルドスクリプトを集約する機能</li><li>サブプロジェクト間の依存関係を定義する機能</li><li>依存関係を考慮してインクリメンタルビルドする機能</li></ul></li><li><p>機能を列挙してみるとやや複雑そうな印象を受けますが、実際のビルドスクリプトは非常にシンプル</p></li><li><p>HibernateがGradleに乗り換えた理由も「マルチプロジェクト対応が優秀だったから」だそう</p></li></ul><h4 id="1-2-4-部品化の手軽さ"><a href="#1-2-4-部品化の手軽さ" class="headerlink" title="1.2.4 部品化の手軽さ"></a>1.2.4 部品化の手軽さ</h4><ul><li>部品化も簡単だよーという説明</li></ul><h4 id="1-2-5-個別インストール不要"><a href="#1-2-5-個別インストール不要" class="headerlink" title="1.2.5 個別インストール不要"></a>1.2.5 個別インストール不要</h4><ul><li><p>AntやMavenを使う際には、利用者の環境にインストールしなければならない</p></li><li><p>ことのあるバージョンを導入してしまう可能性がある</p></li><li><p>このような問題に対処するために、GradleはGradleラッパーという仕組みを提供している</p></li><li><p>Gradleラッパーはプロジェクト内にGradleのブートストラップを仕込むことで、指定されたバージョンのGradleを必要に応じて自動的にインストールして実行してくれる機能</p></li><li><p>使い方は簡単で、あらかじめGradleのwrapperタスクを実行してブートストラップを生成しておくだけです。</p></li><li><p>それをそのままSubversionやGitなどのバージョン管理システムに登録しておけば、利用者はバージョン管理システムからプロジェクトをチェックアウトし、gradlewコマンドを実行するだけで、Gradleのバイナリがダウンロードされ、ビルドが行われます。</p></li><li><p>Note</p><ul><li>このGradleラッパーは優れたアイデアで、最近のビルドツールは同様にインストールレスで使えるようにしているものが増えてきているそう</li></ul></li></ul><h4 id="1-2-6-互換性への配慮"><a href="#1-2-6-互換性への配慮" class="headerlink" title="1.2.6 互換性への配慮"></a>1.2.6 互換性への配慮</h4><ul><li><p>互換性への方針</p><ul><li>既存の機能が突然使えなくなるような変更は行わない</li><li>機能を除去する場合は、将来的に廃止される可能性を明示して段階的に除去する</li><li>新機能は十分なフィードバックを受けて安定してから固定化する</li></ul></li><li><p>ライフサイクル</p><ul><li>非公開</li><li>実験的</li><li>公開</li><li>廃止</li></ul></li></ul><h4 id="1-3-他のビルドツールとの比較"><a href="#1-3-他のビルドツールとの比較" class="headerlink" title="1.3 他のビルドツールとの比較"></a>1.3 他のビルドツールとの比較</h4><h4 id="1-3-1-Make-vs-Gradle"><a href="#1-3-1-Make-vs-Gradle" class="headerlink" title="1.3.1 Make vs Gradle"></a>1.3.1 Make vs Gradle</h4><ul><li>優位性<ul><li>クロスプラットフォーム対応</li><li>依存関係解決の機能</li></ul></li></ul><h4 id="1-3-2-Ant-vs-Gradle"><a href="#1-3-2-Ant-vs-Gradle" class="headerlink" title="1.3.2 Ant vs Gradle"></a>1.3.2 Ant vs Gradle</h4><ul><li>優位性<ul><li>依存関係解決の機能</li><li>規約が無いため再利用性が損なわれる</li><li>基本機能がシンプルであるがゆえに複雑なことをしようとすると冗長になる</li></ul></li></ul><h4 id="1-3-3-Maven-vs-Gradle"><a href="#1-3-3-Maven-vs-Gradle" class="headerlink" title="1.3.3 Maven vs Gradle"></a>1.3.3 Maven vs Gradle</h4><h3 id="第2章-インストールと設定"><a href="#第2章-インストールと設定" class="headerlink" title="第2章 インストールと設定"></a>第2章 インストールと設定</h3><h4 id="2-1-Gradleのインストール"><a href="#2-1-Gradleのインストール" class="headerlink" title="2.1 Gradleのインストール"></a>2.1 Gradleのインストール</h4><h4 id="2-1-1-前提条件"><a href="#2-1-1-前提条件" class="headerlink" title="2.1.1 前提条件"></a>2.1.1 前提条件</h4><p>Gradleを利用するためにはJDK6以上が必要<br>Gradleは内部にGroovyのライブラリをバンドルしているので、別途Groovyをインストールする必要はない</p><h4 id="2-1-2-GVMによるGradleのインストール"><a href="#2-1-2-GVMによるGradleのインストール" class="headerlink" title="2.1.2 GVMによるGradleのインストール"></a>2.1.2 GVMによるGradleのインストール</h4><ul><li>MacOSXやLinux、CygwinなどでBashが使える環境であれば、</li><li>おすすめのインストール方法はGVM（the Groovy enVironment Manager）を利用することです。</li><li>GVMとは、GroovyやGrailsなどいわゆるGroovyエコシステムに付随するプロダクトのインストールやアップデートを一元的に行うためのツール</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 事前準備</span><br><span class="line">// curl と unzipは使えること</span><br><span class="line"></span><br><span class="line">// GVMのインストール</span><br><span class="line">curl -s get.gvm.net | bash</span><br><span class="line"></span><br><span class="line">// プロキシ設定されていたら</span><br><span class="line"><span class="built_in">export</span> http_proxy = htpp://&lt;proxyhost&gt;:&lt;port&gt;/</span><br><span class="line"></span><br><span class="line">// インストール後は、 `~/.bashrc`が書き換えられ、GVMが利用可能な状態になるので</span><br><span class="line">// .<span class="built_in">source</span> ~/.gvm/bin/gvm-init.sh を実行して環境設定を更新してください</span><br><span class="line"></span><br><span class="line">// インストールされていることを確認</span><br><span class="line">gvm <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">// GVMのオフラインモード切り替え</span><br><span class="line">gvm offline <span class="built_in">enable</span></span><br><span class="line">gvm offline <span class="built_in">disable</span></span><br><span class="line"></span><br><span class="line">// Gradleのインストール</span><br><span class="line">gvm install gradle</span><br><span class="line"></span><br><span class="line">// インストール可能なGradleのバージョン確認</span><br><span class="line">gvm list gradle</span><br><span class="line">gvm install gradle &lt;version&gt;</span><br><span class="line"></span><br><span class="line">// 複数のバージョンのGradleをインストールしている場合切り替えることができる</span><br><span class="line">gvm default gradle &lt;version&gt;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-ZIPファイル展開によるインストール"><a href="#2-1-3-ZIPファイル展開によるインストール" class="headerlink" title="2.1.3 ZIPファイル展開によるインストール"></a>2.1.3 ZIPファイル展開によるインストール</h4><ul><li>Windowsのインストール方法を説明</li></ul><h4 id="2-2-基本的な設定と動作確認"><a href="#2-2-基本的な設定と動作確認" class="headerlink" title="2.2 基本的な設定と動作確認"></a>2.2 基本的な設定と動作確認</h4><h4 id="2-2-1-環境変数の設定"><a href="#2-2-1-環境変数の設定" class="headerlink" title="2.2.1 環境変数の設定"></a>2.2.1 環境変数の設定</h4><ul><li><p>環境設定</p><ul><li>gradleコマンドへパスが通っていること</li><li>java コマンドが実行できること</li></ul></li><li><p>JAVA_OPTS、GRADLE_OPTSの設定についても言及</p></li></ul><h4 id="2-2-2-gradleコマンドの実行"><a href="#2-2-2-gradleコマンドの実行" class="headerlink" title="2.2.2 gradleコマンドの実行"></a>2.2.2 gradleコマンドの実行</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle -v</span><br></pre></td></tr></table></figure><h3 id="第3章-スタートアップGradle"><a href="#第3章-スタートアップGradle" class="headerlink" title="第3章 スタートアップGradle"></a>第3章 スタートアップGradle</h3><h4 id="3-1-Groovy特有の文法"><a href="#3-1-Groovy特有の文法" class="headerlink" title="3.1 Groovy特有の文法"></a>3.1 Groovy特有の文法</h4><p>Gradleのビルドスクリプトは、実際にはGroovyのスクリプト<br>しかし、Gradleの提供するDSLのおかげで、Groovyのことはあまり意識せずにビルドスクリプトが記述できるようになっている<br>Groovyの文法はJavaと互換性があるので、Javaを知っていれば文法的に難解な箇所はそれほどないでしょう</p><p>とはいえ、Groovy特有の文法を知らないと、Gradleのビルドスクリプトを読み書きするのが難しいのも事実<br>Gradleでよく使われるものに絞って文法を説明</p><h4 id="3-1-1-文字列"><a href="#3-1-1-文字列" class="headerlink" title="3.1.1 文字列"></a>3.1.1 文字列</h4><p>文字列の表記方法として大きく２通りの方法が利用できる</p><ul><li>シングルクォート：Javaの文字列とほぼ同等の利用方法</li><li>ダブルクォート：文字列の内部に$記号で動的な内容を埋め込むことができる。内部的には、GroovyのGStringというクラスが使われる</li></ul><h4 id="3-1-2-メソッド呼び出し時のカッコ省略"><a href="#3-1-2-メソッド呼び出し時のカッコ省略" class="headerlink" title="3.1.2 メソッド呼び出し時のカッコ省略"></a>3.1.2 メソッド呼び出し時のカッコ省略</h4><h4 id="3-1-3-defによる型指定の省略"><a href="#3-1-3-defによる型指定の省略" class="headerlink" title="3.1.3 defによる型指定の省略"></a>3.1.3 defによる型指定の省略</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 型を指定した変数定義</span></span><br><span class="line">String name = <span class="string">'John'</span></span><br><span class="line"><span class="comment">// 型を省略下変数定義</span></span><br><span class="line"><span class="keyword">def</span> name = <span class="string">'John'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Javaにおいて、Object型を指定した場合と同等になる</span></span><br><span class="line"><span class="comment">// ただし、Groovyの場合はダックタイピングの機能があるため、型としてdefを指定した場合でもオブジェクトのメソッドやプロパティは参照できる</span></span><br></pre></td></tr></table></figure><h4 id="3-1-4-クロージャ"><a href="#3-1-4-クロージャ" class="headerlink" title="3.1.4 クロージャ"></a>3.1.4 クロージャ</h4><p>Groovyは言語機能としてクロージャを提供している<br>Java8で導入されたラムダや、他のプログラム言語で言うところの関数オブジェクトのようなものと理解しておいて</p><p>クロージャは中括弧を利用して定義し、&lt;クロージャ名&gt;.call()または、通常のメソッド呼び出しと同様に&lt;クロージャ名&gt;()で実行できる</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// クロージャ定義</span></span><br><span class="line"><span class="keyword">def</span> clos1 = &#123; mes -&gt; println <span class="string">"Hi, $mes"</span>&#125;</span><br><span class="line"><span class="comment">// 引数と省略した場合は、暗黙引数itを利用</span></span><br><span class="line"><span class="keyword">def</span> clos2 = &#123; println <span class="string">"Hi, $it"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// クロージャ実行</span></span><br><span class="line">clos1.call(<span class="string">'John'</span>)</span><br><span class="line">clos2(<span class="string">'Bob'</span>)</span><br><span class="line"><span class="comment">// メソッド呼び出しと同様にカッコ省略可能</span></span><br><span class="line">clos2 <span class="string">'Alice'</span></span><br></pre></td></tr></table></figure><ul><li>Gradleはクロージャを多用しており、例えば次のようなタスク定義はクロージャによって実現されている</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">task hello &lt;&lt; &#123;</span><br><span class="line">  println <span class="string">'Hello Gradle world!'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上記を個別に定義した場合は下記のようになる</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// タスクへ追加する処理をクロージャとして定義</span></span><br><span class="line"><span class="keyword">def</span> clos = &#123; println <span class="string">'Hello Gradle world!'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// タスクを定義</span></span><br><span class="line">task hello &#123;&#125;</span><br><span class="line"><span class="comment">// タスクにクロージャを追加</span></span><br><span class="line"><span class="comment">// &lt;&lt; は leftShift()の省略形なので以下と等価</span></span><br><span class="line">hello.leftShift(clos)</span><br></pre></td></tr></table></figure><h4 id="3-2-Hello-Gradle-world"><a href="#3-2-Hello-Gradle-world" class="headerlink" title="3.2 Hello Gradle world"></a>3.2 Hello Gradle world</h4><h4 id="3-2-1-ビルドスクリプトの作成と実行"><a href="#3-2-1-ビルドスクリプトの作成と実行" class="headerlink" title="3.2.1 ビルドスクリプトの作成と実行"></a>3.2.1 ビルドスクリプトの作成と実行</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">task</span> hello <span class="keyword">doLast</span> &#123;</span><br><span class="line">  <span class="keyword">println</span> <span class="string">'Hello Gradle world!'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">task</span> hello2 <span class="keyword">doLast</span> &#123;</span><br><span class="line">  <span class="keyword">println</span> <span class="string">'Hello Gradle world!(hello2)'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// doLast欠かないとConfigure扱いになって起動時に処理はしるらしい</span></span><br></pre></td></tr></table></figure><ul><li>MEMO: Gradle3以降ぐらいから、leftShiftが非推奨になりつかなくなった様子<ul><li>代わりにdoLastを使うのだとか<a href="https://qiita.com/ossan_pg/items/608134f44ccf4542edf2">https://qiita.com/ossan_pg/items/608134f44ccf4542edf2</a></li></ul></li></ul><h4 id="3-2-2-ビルドスクリプトと実行結果の解説"><a href="#3-2-2-ビルドスクリプトと実行結果の解説" class="headerlink" title="3.2.2 ビルドスクリプトと実行結果の解説"></a>3.2.2 ビルドスクリプトと実行結果の解説</h4><ul><li>実行結果について説明しているだけ</li></ul><h4 id="3-2-3-組み込みタスク"><a href="#3-2-3-組み込みタスク" class="headerlink" title="3.2.3 組み込みタスク"></a>3.2.3 組み込みタスク</h4><p>Gradleはビルドスクリプトで特に何も指定していなくても利用可能なタスクを提供している<br>これらのタスクのことを「組み込みタスク（built-in tasks）」と呼びます<br>タスクの一覧はgradle tasks で確認できる</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">E:\XXX_POKET\<span class="number">020</span>_資格・学習\JAVA\<span class="number">20200613</span>_Gradle徹底入門\practice\chap3&gt;gradle tasks</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">Task</span> :tasks</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Tasks runnable <span class="keyword">from</span> root <span class="keyword">project</span></span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Build Setup tasks</span><br><span class="line">-----------------</span><br><span class="line">init - Initializes a <span class="keyword">new</span> Gradle build.</span><br><span class="line">wrapper - Generates Gradle wrapper files.</span><br><span class="line"></span><br><span class="line">Help tasks</span><br><span class="line">----------</span><br><span class="line">buildEnvironment - Displays all <span class="keyword">buildscript</span> <span class="keyword">dependencies</span> declared in root <span class="keyword">project</span> <span class="string">'chap3'</span>.</span><br><span class="line">components - Displays the components produced by root <span class="keyword">project</span> <span class="string">'chap3'</span>. [incubating]</span><br><span class="line"><span class="keyword">dependencies</span> - Displays all <span class="keyword">dependencies</span> declared in root <span class="keyword">project</span> <span class="string">'chap3'</span>.</span><br><span class="line">dependencyInsight - Displays the insight <span class="keyword">into</span> a specific dependency in root <span class="keyword">project</span> <span class="string">'chap3'</span>.</span><br><span class="line">dependentComponents - Displays the dependent components of components in root <span class="keyword">project</span> <span class="string">'chap3'</span>. [incubating]</span><br><span class="line">help - Displays a help message.</span><br><span class="line">model - Displays the configuration model of root <span class="keyword">project</span> <span class="string">'chap3'</span>. [incubating]</span><br><span class="line">projects - Displays the sub-projects of root <span class="keyword">project</span> <span class="string">'chap3'</span>.</span><br><span class="line">properties - Displays the properties of root <span class="keyword">project</span> <span class="string">'chap3'</span>.</span><br><span class="line">tasks - Displays the tasks runnable <span class="keyword">from</span> root <span class="keyword">project</span> <span class="string">'chap3'</span>.</span><br><span class="line"></span><br><span class="line">To see all tasks and more detail, run gradle tasks --all</span><br><span class="line"></span><br><span class="line">To see more detail about a <span class="keyword">task</span>, run gradle help --<span class="keyword">task</span> &lt;<span class="keyword">task</span>&gt;</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in <span class="number">1</span>s</span><br><span class="line"><span class="number">1</span> actionable <span class="keyword">task</span>: <span class="number">1</span> executed</span><br></pre></td></tr></table></figure><ul><li>initタスクは「Build Setup tasks」に属しており、ビルドの初期化を行うタスクであるということが読み取れます</li><li>プラグインを追加することで利用できるタスクも追加されるので、gradle tasksで利用できるタスクを一覧で見れるということを覚えておく</li></ul><p>また、よく使う組み込みタスクとして、<code>gradle properties</code>がある<br>これはGradleのビルドスクリプトに定義されているプログラムの一覧を表示するタスク</p><h4 id="3-2-4-主要なコマンドラインオプション"><a href="#3-2-4-主要なコマンドラインオプション" class="headerlink" title="3.2.4 主要なコマンドラインオプション"></a>3.2.4 主要なコマンドラインオプション</h4><ul><li><p>ログ出力量の少ない順にGradleのコマンドラインオプションを並べると次のようになる</p><ul><li><code>-i (--info)</code><ul><li>ログレベルがINFOになり、ビルドスクリプトのファイル名などの情報が表示されるようになる</li></ul></li><li><code>-s (--stacktrace)</code><ul><li>例外発生時にユーザー例外部分のみスタックトレースを表示</li></ul></li><li><code>-S (--full-stacktrace)</code><ul><li>例外発生時にすべてのスタックトレースを表示</li></ul></li><li><code>-d (--debug)</code><ul><li>ログレベルがDEBUGに設定され、非常に詳細な情報が表示される様になる</li></ul></li></ul></li><li><p>デフォルトの<code>build.gradle</code>ファイル以外のファイル名のビルドスクリプトを指定する場合</p><ul><li><code>gradle -b build-new.gradle</code></li></ul></li></ul><h4 id="3-3-プロジェクト自動生成とビルド"><a href="#3-3-プロジェクト自動生成とビルド" class="headerlink" title="3.3 プロジェクト自動生成とビルド"></a>3.3 プロジェクト自動生成とビルド</h4><h4 id="3-3-1-initタスクによるプロジェクト自動生成"><a href="#3-3-1-initタスクによるプロジェクト自動生成" class="headerlink" title="3.3.1 initタスクによるプロジェクト自動生成"></a>3.3.1 initタスクによるプロジェクト自動生成</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gradle init --type java-library</span><br><span class="line"><span class="comment">// 生成される</span></span><br><span class="line"><span class="comment">// 途中、使用するDSLなどを聞かれる</span></span><br></pre></td></tr></table></figure><ul><li><p>Gradleの規約はMavenに倣って定義されているので、プロダクションコードは、</p><ul><li>src&#x2F;main&#x2F;java以下</li><li>テストコードは<ul><li>src&#x2F;test&#x2F;java以下に配置される</li></ul></li></ul></li><li><p>NOTE</p><ul><li>Gradleは、規約とは異なる場所にJavaソースを配置することもできる</li></ul></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This file was generated by the Gradle 'init' task.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This generated file contains a sample Java Library project to get you started.</span></span><br><span class="line"><span class="comment"> * For more details take a look at the Java Libraries chapter in the Gradle</span></span><br><span class="line"><span class="comment"> * User Manual available at https://docs.gradle.org/5.5.1/userguide/java_library_plugin.html</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">plugins &#123;</span><br><span class="line">    <span class="comment">// ★Javaプラグインが適用されている</span></span><br><span class="line">    <span class="comment">// これによりjavaプロジェクトに対する規約（プロダクションコードをsrc/main/javaに配置するなど）やJavaプロジェクトのビルドに必要なタスクが追加されます</span></span><br><span class="line">    <span class="comment">// Apply the java-library plugin to add support for Java Library</span></span><br><span class="line">    id <span class="string">'java-library'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 昔の書き方として以下があったらしい</span></span><br><span class="line">apply plugin: <span class="string">'java'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    <span class="comment">// ★Maven Centralリポジトリを指定</span></span><br><span class="line">    mavenCentral()</span><br><span class="line">    <span class="comment">// Use jcenter for resolving dependencies.</span></span><br><span class="line">    <span class="comment">// You can declare any Maven/Ivy/file repository here.</span></span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// 'group:name:version'という省略記法でプラグインが記載されている</span></span><br><span class="line">    <span class="comment">// compileやtestCompileというキーワードがありますが、これはJavaプラグインによって定義されているコンフィグレーションを意味している 詳しくは第４章で解説</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// This dependency is exported to consumers, that is to say found on their compile classpath.</span></span><br><span class="line">    api <span class="string">'org.apache.commons:commons-math3:3.6.1'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// This dependency is used internally, and not exposed to consumers on their own compile classpath.</span></span><br><span class="line">    implementation <span class="string">'com.google.guava:guava:27.1-jre'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use JUnit test framework</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-ビルド実行と結果確認"><a href="#3-3-2-ビルド実行と結果確認" class="headerlink" title="3.3.2 ビルド実行と結果確認"></a>3.3.2 ビルド実行と結果確認</h4><p>先程自動生成したJavaプロジェクトをそのままビルドしてみましょう</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gradle tasks</span><br><span class="line"><span class="comment">// 様々なタスクが追加されていることを確認</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ビルド実行</span></span><br><span class="line">gradle build</span><br></pre></td></tr></table></figure><p>ビルド実行直後再度ビルドすると、[UP-TO-DATE]と判断されて、処理がスキップされる様になっている</p><h4 id="3-3-3-テスト実行と結果確認"><a href="#3-3-3-テスト実行と結果確認" class="headerlink" title="3.3.3 テスト実行と結果確認"></a>3.3.3 テスト実行と結果確認</h4><ul><li>buildタスクの実行によって、testタスクも実行されている</li><li>今回の場合、自動生成されたテストコードがコンパイルされ、テストが実行されている</li></ul><p>レポートを確認してみる<br>HTML形式レポートが出力されていることを確認</p><p>build&#x2F;test-resultsディレクトリ以下を確認してみると、TEST-LibraryTest.xmlというファイルが生成されていることがわかる<br>これはJUnit4が出力するXML形式のテストレポートで、Jenkinsなど他システムとの連携が必要な場合にはこちらを利用することになる</p><ul><li>NOTE<ul><li>じつは、先程確認したHTML形式のテストレポートは、このXML形式のテストレポートをGradleのJavaプラグインが加工して生成したもの</li></ul></li></ul><h4 id="3-4-Webアプリケーションのビルド"><a href="#3-4-Webアプリケーションのビルド" class="headerlink" title="3.4 Webアプリケーションのビルド"></a>3.4 Webアプリケーションのビルド</h4><p>WebアプリケーションをビルドしてTomcat上で実行するビルドスクリプトを作成してみる</p><ul><li>NOTE<ul><li>Gradleの標準プラグインにJettyプラグインがあり、そちらを利用して組み込みJettyによるWebアプリケーションのテストを行うことも可能</li><li>しかし、このプラグインで起動されるJettyバージョンがJetty6と古く、Servlet3.0など新しいAPIに対応していません。</li><li>そのため、ここではサードパーティのプラグインを利用する手順を紹介しています。</li></ul></li></ul><h4 id="3-4-1-Webプロジェクトの作成"><a href="#3-4-1-Webプロジェクトの作成" class="headerlink" title="3.4.1 Webプロジェクトの作成"></a>3.4.1 Webプロジェクトの作成</h4><p>前回のjavaプロジェクトの、build.gradleを修正してWebプロジェクトへ発展させる</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle init --type java-library</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This file was generated by the Gradle 'init' task.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This generated file contains a sample Java Library project to get you started.</span></span><br><span class="line"><span class="comment"> * For more details take a look at the Java Libraries chapter in the Gradle</span></span><br><span class="line"><span class="comment"> * User Manual available at https://docs.gradle.org/5.5.1/userguide/java_library_plugin.html</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (1) Tomcatプラグイン利用のための設定</span></span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.bmuschko:gradle-tomcat-plugin:2.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plugins &#123;</span><br><span class="line">    <span class="comment">// Apply the java-library plugin to add support for Java Library</span></span><br><span class="line">    id <span class="string">'java-library'</span></span><br><span class="line">    <span class="comment">// WARプラグイン追加</span></span><br><span class="line">    <span class="comment">// id 'war'</span></span><br><span class="line">    <span class="comment">// Tomcatプラグイン適用</span></span><br><span class="line">    <span class="comment">// id 'com.bmuschko.tomcat'</span></span><br><span class="line">    <span class="comment">// id 'com.bmuschko.tomcat-base'</span></span><br><span class="line">&#125;</span><br><span class="line">apply plugin: <span class="string">'war'</span></span><br><span class="line">apply plugin: <span class="string">'com.bmuschko.tomcat'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    <span class="comment">// セントラルレポジトリ追加</span></span><br><span class="line">    mavenCentral()</span><br><span class="line">    <span class="comment">// Use jcenter for resolving dependencies.</span></span><br><span class="line">    <span class="comment">// You can declare any Maven/Ivy/file repository here.</span></span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// (4) 依存関係にJava EE 6のAPIを追加</span></span><br><span class="line">    <span class="comment">// ビルド時には参照するが、ビルド生成物からは除外する　用に指定している</span></span><br><span class="line">    providedCompile <span class="string">'javax:javaee-web-api:6.0'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'org.slf4j:slf4j-api:1.7.5'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// This dependency is exported to consumers, that is to say found on their compile classpath.</span></span><br><span class="line">    api <span class="string">'org.apache.commons:commons-math3:3.6.1'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// This dependency is used internally, and not exposed to consumers on their own compile classpath.</span></span><br><span class="line">    implementation <span class="string">'com.google.guava:guava:27.1-jre'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use JUnit test framework</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// (5) Tomcat実行に必要な依存ライブラリの設定</span></span><br><span class="line">    <span class="keyword">def</span> tomcatVersion = <span class="string">'7.0.52'</span></span><br><span class="line">      tomcat <span class="string">"org.apache.tomcat.embed:tomcat-embed-core:$&#123;tomcatVersion&#125;"</span>,</span><br><span class="line">             <span class="string">"org.apache.tomcat.embed:tomcat-embed-logging-juli:$&#123;tomcatVersion&#125;"</span></span><br><span class="line">      tomcat(<span class="string">"org.apache.tomcat.embed:tomcat-embed-jasper:$&#123;tomcatVersion&#125;"</span>) &#123;</span><br><span class="line">        <span class="keyword">exclude</span> <span class="keyword">group</span>: <span class="string">'org.eclipse.jdt.core.compiler'</span>, module: <span class="string">'ecj'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gradle tomcatRunWar</span><br><span class="line">gradle tRW</span><br></pre></td></tr></table></figure><p>Buildエラーは出力されるが、アクセスできた<a href="http://localhost:8080/chap3-java-web/">http://localhost:8080/chap3-java-web/</a></p><h4 id="3-4-3-WARファイルの生成"><a href="#3-4-3-WARファイルの生成" class="headerlink" title="3.4.3 WARファイルの生成"></a>3.4.3 WARファイルの生成</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle war</span><br></pre></td></tr></table></figure><h4 id="3-5-Gradleの便利な機能"><a href="#3-5-Gradleの便利な機能" class="headerlink" title="3.5 Gradleの便利な機能"></a>3.5 Gradleの便利な機能</h4><p>Gradleを使うにあたって知っておくと便利な機能を本章の最後に紹介</p><h4 id="3-5-1-Gradleデーモン"><a href="#3-5-1-Gradleデーモン" class="headerlink" title="3.5.1 Gradleデーモン"></a>3.5.1 Gradleデーモン</h4><p>Gradleを本格的に使い始めると、まず気になるところが、gradleコマンドの起動に時間がかかること</p><p>この起動時間を解消するために、Gradleは「Gradleデーモン」という機能を提供している<br>Gradleデーモンを利用すると、毎回JavaVMを起動&#x2F;停止するのではなく、JavaVMを常駐させておくことができる</p><p>gradleコマンドを事項してGradleデーモン(JavaVMプロセス)を常駐させてしまえば<br>2度目以降のビルドは非常に高速に実行される用になります。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gradle --daemon hello</span><br><span class="line"></span><br><span class="line"><span class="comment">// デフォルトでデーモンを有効にしたい場合</span></span><br><span class="line"><span class="comment">// GRADLE_OPTSに追加する</span></span><br><span class="line">GRADLE_OPS=<span class="string">"-Dorg.gradle.daemon=true"</span></span><br><span class="line"><span class="comment">// gradle.propertiesに追加する</span></span><br><span class="line">org.gradle.daemon=<span class="keyword">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// デーモンは一定時間で停止されるが、明示的に停止する場合以下を実行</span></span><br><span class="line">gradle --stop</span><br></pre></td></tr></table></figure><h4 id="3-5-2-Gradleラッパー"><a href="#3-5-2-Gradleラッパー" class="headerlink" title="3.5.2 Gradleラッパー"></a>3.5.2 Gradleラッパー</h4><p>新しいツールを現在進行中のプロジェクトに適用したい場合、以下の試練がある</p><ul><li>Gradleの良さを紹介する</li><li>インストール方法を説明する</li><li>使い方を説明する</li><li>慣れるまでサポートする</li></ul><p>この問題はGradleラッパーで解消できる</p><ul><li>このメリット<ul><li>利用するGradleのバージョンを固定できる</li><li>JenkinsなどのCIツールを実行する環境にGradleをインストールしなくてよい</li></ul></li></ul><h2 id="第2部［基礎編］"><a href="#第2部［基礎編］" class="headerlink" title="第2部［基礎編］"></a>第2部［基礎編］</h2><h3 id="第4章-Java-プロジェクトのビルド"><a href="#第4章-Java-プロジェクトのビルド" class="headerlink" title="第4章 Java プロジェクトのビルド"></a>第4章 Java プロジェクトのビルド</h3><h4 id="4-1-Javaプロジェクトになぜプラグインが必要なのか？"><a href="#4-1-Javaプロジェクトになぜプラグインが必要なのか？" class="headerlink" title="4.1 Javaプロジェクトになぜプラグインが必要なのか？"></a>4.1 Javaプロジェクトになぜプラグインが必要なのか？</h4><p>標準機能だけでJavaプロジェクトのビルドもできないの？と疑問に思われるかもしれない<br>実は、Gradleのコア機能は次の２つのみで構成されている</p><ul><li>定型的に繰り返し行う作業を自動化するための仕組み</li><li>自動化された処理を実行するための部品</li></ul><p>Gradleの看板機能であるビルド例外ではなく、自動化の対象となる具体的な作業はすべてプラグインとして実装されており、コア機能からは分離されている<br>厳密に言えば、Gradleは「ビルドツール」ではなく、「拡張可能な自動化ツール」と呼ぶのが適切なのだと思います。</p><p>このように、JavaプロジェクトのビルドにJavaプラグインが必要である背景には、Gradleのアーキテクチャに起因する理由がある</p><h4 id="4-2-Javaプラグインとは"><a href="#4-2-Javaプラグインとは" class="headerlink" title="4.2 Javaプラグインとは"></a>4.2 Javaプラグインとは</h4><p>Javaプラグインがどのようなものかを見ていきましょう</p><ul><li>Javaプラグイン<ul><li>タスク：Javaのビルドに必要</li><li>規約：設定を簡略化する</li><li>プロパティ</li><li>ソースセット<ul><li>がパッケージングされたビルド機能のコンポーネント</li></ul></li></ul></li></ul><h4 id="4-2-1-ソースセット"><a href="#4-2-1-ソースセット" class="headerlink" title="4.2.1 ソースセット"></a>4.2.1 ソースセット</h4><p>最も重要なソースセットについて説明</p><p>ビルド対象となるソースの種類として、<br>・プロダクションコード<br>・テストコード<br>　・ユニットテスト<br>　・インテグレーションテスト<br>と、様々ある</p><p>このような構成に対応するためにソースセットという仕組みを提供している</p><ul><li>特徴<ul><li>ビルドスクリプト内に自由に追加できる</li><li>ユニークな名前を持つ</li><li>コンパイルの入力となるJavaソースおよびリソースのセットが指定できる</li><li>コンパイルの出力（クラスファイルなど）を生成するパスが指定できる</li><li>コンパイル時のクラスパス、及び実行時のクラスパスが指定できる</li><li>ソースセットごとに専用のタスクを提供する</li><li>ソースセットごとに専用のプロパティを提供する</li></ul></li></ul><p>例えば、テストコードのコンパイルを行う前にプロダクションコードをコンパイルしておく必要がある場合、<br>テストコードに対応するソースセットのコンパイルタスクの依存関係にプロダクションコードのコンパイルタスクを設定するだけで済みます</p><p>Javaプラグインにはあらかじめmainとtestという２つのソースセットが定義されている<br>２種類のソースセットだけで対応可能なJavaプロジェクトであれば、独自にソースセットを追加する必要はない</p><h4 id="4-2-2-タスク"><a href="#4-2-2-タスク" class="headerlink" title="4.2.2 タスク"></a>4.2.2 タスク</h4><ul><li><p>ビルドに必要な作業</p><ul><li>ソースファイルのコンパイル</li><li>テスト</li><li>Javadocの生成</li><li>JARファイルなどへのアーカイブ</li></ul></li><li><p>GradleのJavaプラグインには、そのすべての機能がタスクとして定義されている</p></li><li><p>主要なタスク</p><ul><li>clean</li><li>build</li><li>javadoc</li><li>jar</li></ul></li></ul><h4 id="4-2-3-規約"><a href="#4-2-3-規約" class="headerlink" title="4.2.3 規約"></a>4.2.3 規約</h4><p>規約＝約束事</p><ul><li><p>Javaプラグイン規約</p><ul><li>プロダクションコードのソース・ファイルは<code>src/main/java</code>ディレクトリ配下に配置していること</li><li>プロダクションコードのリソースは<code>src/main/resources</code>ディレクトリ配下に配置していること</li><li>テストコードのソースファイルは<code>src/test/java</code>ディレクトリ配下に配置していること</li><li>テストコードのリソースは<code>src/test/resources</code>ディレクトリ配下に配置していること</li></ul></li><li><p>Mavenを使ったことのある人には馴染みの深いもの</p></li><li><p>規約に関してはMavenという先輩の知恵を有効活用している</p></li></ul><h4 id="4-2-4-プロパティ"><a href="#4-2-4-プロパティ" class="headerlink" title="4.2.4 プロパティ"></a>4.2.4 プロパティ</h4><ul><li>多くのプロパティにはデフォルト値が設定されている</li></ul><h4 id="4-3-Javaプロジェクトへの適用"><a href="#4-3-Javaプロジェクトへの適用" class="headerlink" title="4.3 Javaプロジェクトへの適用"></a>4.3 Javaプロジェクトへの適用</h4><p>本章ではJavaプラグインの仕組みを理解するために、あえて手作業で作成</p><h4 id="4-3-1-基本的なビルドの定義と実行"><a href="#4-3-1-基本的なビルドの定義と実行" class="headerlink" title="4.3.1 基本的なビルドの定義と実行"></a>4.3.1 基本的なビルドの定義と実行</h4><h4 id="4-3-2-テストコードを含むビルドの定義と実行"><a href="#4-3-2-テストコードを含むビルドの定義と実行" class="headerlink" title="4.3.2 テストコードを含むビルドの定義と実行"></a>4.3.2 テストコードを含むビルドの定義と実行</h4><h4 id="4-3-3-その他の作業"><a href="#4-3-3-その他の作業" class="headerlink" title="4.3.3 その他の作業"></a>4.3.3 その他の作業</h4><ul><li>コンパイルオプションの設定<ul><li>compileJavaタスクやtestCompileJavaタスクなどのJavaCompile型のタスクに対しては、optionsプロパティを利用して詳細なコンパイルオプションを設定できます。</li></ul></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">compileJava &#123;</span><br><span class="line">  <span class="comment">// forkした別プロセスでコンパイルを行う</span></span><br><span class="line">  <span class="keyword">options</span>.fork = <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// lint を無効化する</span></span><br><span class="line">  <span class="keyword">options</span>.compilerArgs &lt;&lt; <span class="string">'-Xdlint:unchecked'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JARファイルの設定</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jar &#123;</span><br><span class="line">  baseName = <span class="string">'example'</span></span><br><span class="line">  appendix = <span class="string">'bin'</span></span><br><span class="line">  version = <span class="string">'0.1'</span></span><br><span class="line">  classifier = <span class="string">'jdk17'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接指定する場合</span></span><br><span class="line">jar &#123;</span><br><span class="line">  archiveName = <span class="string">'example.jar'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>MANIFEST.MFのカスタマイズ</p></li><li><p>Javadoc生成</p></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">javadoc &#123;</span><br><span class="line">  <span class="keyword">destinationDir</span> = <span class="keyword">file</span>(<span class="string">"$&#123;buildDir/dist/javadoc&#125;"</span>)</span><br><span class="line">  title = <span class="string">'example library V0.1'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @linkタグでJava標準APIのJavadocへリンクする場合など、外部のJavadocへのリンクを生成したい場合は次の用にする</span></span><br><span class="line">javadoc &#123;</span><br><span class="line">  <span class="keyword">options</span>.links &lt;&lt; <span class="string">'http://docs.oracle.com/javase/jp/7/api/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ビルド出力のクリーンアップ<ul><li>削除したい場合</li><li>Javadocのみ削除したい場合、gradle cleanJavadocを実行</li></ul></li></ul><h4 id="4-4-Javaプラグインの詳細"><a href="#4-4-Javaプラグインの詳細" class="headerlink" title="4.4 Javaプラグインの詳細"></a>4.4 Javaプラグインの詳細</h4><p>Gradleの規約に適合していれば、そこまで深くJavaのプラグインを知らなくてもよいが、<br>適合していない場合、独自のタスクを組み込んだりカスタマイズしていかなくてはならない</p><h4 id="4-4-1-Javaプラグインのタスクの依存関係"><a href="#4-4-1-Javaプラグインのタスクの依存関係" class="headerlink" title="4.4.1 Javaプラグインのタスクの依存関係"></a>4.4.1 Javaプラグインのタスクの依存関係</h4><ul><li>タスクはそれぞれ依存関係を持っている<ul><li><a href="http://gradle.monochromeroad.com/docs/userguide/java_plugin.html">http://gradle.monochromeroad.com/docs/userguide/java_plugin.html</a></li></ul></li><li>dependsで指定されている</li></ul><h4 id="4-4-2-つくの詳細"><a href="#4-4-2-つくの詳細" class="headerlink" title="4.4.2 つくの詳細"></a>4.4.2 つくの詳細</h4><p>Javaプラグインが提供するタスクのうち、重要なものについて説明</p><p>テストに関連するタスクは第８章、アーティファクトの公開に関連するタスクは第１２章で詳しく説明しているのでここでは割愛</p><ul><li><p>compileJavaタスク&#x2F;compileTestJavaタスク</p><ul><li>JavaCompile型のタスク</li><li>javacコマンドによりJavaソースをコンパイルし、クラスファイルを生成します。</li><li>対象<ul><li>compileJavaタスク<ul><li>ソースセットmainのjava.srcDirsプロパティで指定したディレクトリに含まれるJavaソース</li></ul></li><li>compileTestJavaタスク<ul><li>ソースセットtestのjava.srcDirsプロパティで指定したディレクトリに含まれるJavaソース</li></ul></li></ul></li><li>拡張子が.javaのファイルのみがコンパイル対象となる</li></ul></li><li><p>processResourcesタスク&#x2F;processTestResourcesタスク</p><ul><li>Copy型のタスク</li><li>プロダクションコードのリソース(.propertiesなど)をクラス出力先にコピーする</li><li>対象<ul><li>processResourcesタスク<ul><li>ソースセットmainのresources.srcDisプロパティで指定したディレクトリに含まれるファイル</li></ul></li><li>processTestResourcesタスク<ul><li>ソースセットtestのresources.srcDisプロパティで指定したディレクトリに含まれるファイル</li></ul></li></ul></li></ul></li><li><p>jarタスク</p><ul><li>Jar型のタスク</li><li>JARファイルを生成します</li><li>dフォルトではアーカイブ対象はソースセットmainのoutputプロパティ、すなわちcompileJavaタスクとprocessResourcesタスクの出力です。</li></ul></li><li><p>javadocタスク</p><ul><li>Javadoc型のタスク</li><li>Javadocを生成します</li></ul></li></ul><h4 id="4-5-規約に合わないプロジェクトへの適用法"><a href="#4-5-規約に合わないプロジェクトへの適用法" class="headerlink" title="4.5 規約に合わないプロジェクトへの適用法"></a>4.5 規約に合わないプロジェクトへの適用法</h4><p>新規で作成するプロジェクトはできるだけGradleの規約に合わせることをおすすめします。<br>既存のプロジェクトにGradleを適用する場合や、プロジェクト特有の事情によってGradleの規約に合わせることができない場合に対応する方法を説明</p><h4 id="4-5-1-ディレクトリ構成の変更"><a href="#4-5-1-ディレクトリ構成の変更" class="headerlink" title="4.5.1 ディレクトリ構成の変更"></a>4.5.1 ディレクトリ構成の変更</h4><ul><li>src&#x2F;main&#x2F;java以下にxmlやpropertiesなどを配置している場合</li></ul><p>TODO: 処理の意味が理解できていないので再確認<br>なぜこれで実現できるのか腑に落ちない</p><h4 id="4-5-2-コンフィグレーションによる依存関係の変更"><a href="#4-5-2-コンフィグレーションによる依存関係の変更" class="headerlink" title="4.5.2 コンフィグレーションによる依存関係の変更"></a>4.5.2 コンフィグレーションによる依存関係の変更</h4><p>Gradleには依存関係をグループ化して分類するコンフィグレーションという仕組みがある<br>依存ライブラリによってはコンパイル時のみ必要で実行時には不要であるものがある<br>このような状況に対応するための仕組みがコンフィグレーションです</p><ul><li><p>Javaプラグイン標準コンフィグレーション</p><ul><li>compile: ソースセットmainのコンパイル時クラスパス。compileJavaタスクが参照</li><li>runtime: ソースセットmainの実行時クラスパス。デフォルトではコンフィグレーションcompileと同内容が設定</li><li>testCompile: ソースセットtestのコンパイル時のクラスパス</li><li>testRuntime: ソースセットtestの実行時クラスパス。</li><li>archives: このプロジェクトのアーティファクトを表すコンフィグレーション</li><li>default このプロジェクトに依存するプロジェクトが利用するデフォルトのクラスパス</li></ul></li><li><p>MEMO: implementationとかの説明がない..</p></li></ul><h4 id="4-5-3-ソースセットの追加"><a href="#4-5-3-ソースセットの追加" class="headerlink" title="4.5.3 ソースセットの追加"></a>4.5.3 ソースセットの追加</h4><p>Javaプラグインは標準でmainとtestの２つのソースセットを提供している<br>この２つだけでは足りない場合新しく追加できる<br>インテグレーションテスト用のソースセットがほしいと仮定して作成してみる</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sourceSets</span> &#123;</span><br><span class="line">  integrationTest</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Javaプラグインの規約ではソースセットごとのプロパティにもデフォルト値が定義されている</p><ul><li>Javaソースの配置先はsrc&#x2F;integrationTest&#x2F;javaディレクトリ</li><li>リソースの配置先はsrc&#x2F;integrationTest&#x2F;resourcesディレクトリ</li></ul><p>作成すると勝手に上記のような規約に沿った形で定義されるみたい<br>規約に合わない場合は以下の用に定義して対応する</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sourceSets</span> &#123;</span><br><span class="line">  integrationTest &#123;</span><br><span class="line">    java.srcDir <span class="keyword">file</span>(<span class="string">'src/intTest/java'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TODO: 残りは、IntegrationテストとUnitテストを明確に分けたい場合参照すべし</p><h4 id="4-6-Applicationプラグイン"><a href="#4-6-Applicationプラグイン" class="headerlink" title="4.6 Applicationプラグイン"></a>4.6 Applicationプラグイン</h4><p>ApplicationプラグインはJavaアプリケーションを実行したり、配布したりするためのプラグインで、Javaプラグインを拡張して作られている</p><ul><li>用途<ul><li>ビルドスクリプト内でメインクラスを指定し、Gradleからアプリケーションを実行する</li><li>アプリケーションを実行環境に配布するためのアーカイブ(ZIPファイル)を作成する</li></ul></li></ul><h4 id="4-6-1-Applicationプラグインの利用方法"><a href="#4-6-1-Applicationプラグインの利用方法" class="headerlink" title="4.6.1 Applicationプラグインの利用方法"></a>4.6.1 Applicationプラグインの利用方法</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// applicationプラグインを適用する</span></span><br><span class="line">apply plugin: <span class="string">'application'</span></span><br><span class="line"><span class="comment">// メインクラスのFQCN名(完全修飾名)を指定する</span></span><br><span class="line">mainClassName = <span class="string">'com.example.cli.SimpleCalc'</span></span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'java'</span></span><br><span class="line">apply plugin: <span class="string">'application'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> defaultEncoding = <span class="string">'UTF-8'</span></span><br><span class="line">compileJava.<span class="keyword">options</span>.encoding = defaultEncoding</span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceCompatibility</span> = <span class="number">1.7</span></span><br><span class="line"><span class="keyword">targetCompatibility</span> = <span class="number">1.7</span></span><br><span class="line"></span><br><span class="line">mainClassName = <span class="string">'com.example.cli.SimpleCalc'</span></span><br><span class="line">applicationName = <span class="string">'SimpleCalc'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  <span class="keyword">compile</span> <span class="string">'commons-cli:commons-cli:1.2'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run &#123;</span><br><span class="line">  standardInput = System.in</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">javadoc &#123;</span><br><span class="line">  <span class="keyword">options</span>.links &lt;&lt; <span class="string">'http://docs.oracle.com/javase/jp/7/api/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>runブロックの内容について<ul><li>実行するアプリケーションが標準入力を必要とする場合は必須</li><li>ビルド実行中はGradleが標準入力を処理しているため、アプリケーションに標準入力を渡すために、このようなおまじないが必要になります。</li></ul></li></ul><h4 id="4-6-2-ビルドスクリプトからのアプリケーション実行"><a href="#4-6-2-ビルドスクリプトからのアプリケーション実行" class="headerlink" title="4.6.2 ビルドスクリプトからのアプリケーション実行"></a>4.6.2 ビルドスクリプトからのアプリケーション実行</h4><ul><li>Applicationプラグインを適用することで、runタスクが加わります</li><li>このタスクを実行するとGradleによって指定したアプリケーションが実行されます。</li></ul><h4 id="4-6-3-アプリケーション実行用アーカイブの作成"><a href="#4-6-3-アプリケーション実行用アーカイブの作成" class="headerlink" title="4.6.3 アプリケーション実行用アーカイブの作成"></a>4.6.3 アプリケーション実行用アーカイブの作成</h4><p>アプリケーション実行用アーカイブを作成<br>この機能もApplication プラグインによって提供される<br>アーカイブにドキュメントを追加したい場合は、プロジェクトのsrc&#x2F;distディレクトリに、それらを配置しておけば自動的にアーカイブに含まれる</p><p>gradle distZipを実行する</p><ul><li>build&#x2F;libsディレクトリ<ul><li>JARファイルが生成される（実際にJARファイルを生成しているのは</li></ul></li><li>build&#x2F;scriptsディレクトリ<ul><li>アプリケーション実行用のシェルスクリプトとバッチファイルが生成される</li><li>distZipタスクと連動して実行した、startScriptsタスクが生成</li></ul></li><li>build&#x2F;distributionsディレクトリ<ul><li>build&#x2F;libsディレクトリやbuild&#x2F;scriptsディレクトリの出力を含んだアーカイブが作成される</li></ul></li></ul><p>後は、アーカイブを配ってバッチ叩けば実行できるというもの<br>GUIアプリとか配ると便利そう<br>ローカルで起動する系のWEBアプリもこれで配れそう</p><ul><li>必要な依存ライブラリを添えろ得て配布物に含める</li><li>環境変数や、JavaVMオプションなどを設定するための起動スクリプトを準備する</li></ul><p>これらの手間がなくなるのでApplication プラグインは便利</p><h4 id="4-7-Warプラグイン"><a href="#4-7-Warプラグイン" class="headerlink" title="4.7 Warプラグイン"></a>4.7 Warプラグイン</h4><p>WarプラグインはJavaベースのWebアプリケーションのビルドを行うためのプラグインで、Application プラグインと同じ句、Javaプラグインを拡張して作られています</p><h4 id="4-7-1-Warプラグインの挙動"><a href="#4-7-1-Warプラグインの挙動" class="headerlink" title="4.7.1 Warプラグインの挙動"></a>4.7.1 Warプラグインの挙動</h4><p>Warプラグインの主な機能はWARファイルを生成すること<br>warタスクが実際にwarファイルを生成する</p><p>warタスクはJavaプラグインのjarタスクに相当しますが、次のような違いがある</p><ul><li>ソースセットmainのコンパイル結果（クラスファイル）をWARファイルのWEB-INF&#x2F;classesに配置する</li><li>コンフィグレーションruntimeに設定されている依存ライブラリ（JARファイル）をWARファイルのWEB-INF&#x2F;libに配置する</li><li>webAppDirNameプロパティに設定されているディレクトリ以下をWARファイルの&#x2F;に展開する<ul><li>このプロパティに指定するディレクトリは、HTMLファイルやCSSファイルといったWebリソースの置き場を指す</li></ul></li></ul><h4 id="4-7-2-プロパティ"><a href="#4-7-2-プロパティ" class="headerlink" title="4.7.2 プロパティ"></a>4.7.2 プロパティ</h4><p>Warプラグインが提供するプロパティは次の２つ</p><ul><li>webAppDirName<ul><li>HTMLファイルやJSPファイルなどのWebアプリケーションコンテンツの配置先を、プロジェクトのルートから相対パスで指定</li></ul></li><li>webAppDir<ul><li>前述のwebAppDirNameの設定に基づき、絶対パスが設定される（参照専用）</li></ul></li></ul><h4 id="4-7-3-コンフィグレーション"><a href="#4-7-3-コンフィグレーション" class="headerlink" title="4.7.3 コンフィグレーション"></a>4.7.3 コンフィグレーション</h4><p>Warプラグインが提供するコンフィグレーションは次の２つ</p><ul><li>providedCompile<ul><li>ソースセットmainのコンパイル時クラスパスのうち、WARファイルへのコピー対象外としたいもの</li></ul></li><li>providedRuntime<ul><li>ソースセットmainの実行時クラスパスのうち、WARファイルへのコピー対象外としたいもの</li></ul></li></ul><p>これらのコンフィグレーションは、WARファイルの実行環境が提供している依存ライブラリを指定するときに使う<br>典型的な利用方法は、ServletAPIなどアプリケーションサーバーに含まれる依存ライブラリをビルド時のみ参照にし、WARファイルからは除外するという使い方</p><h4 id="4-7-4-warタスクの設定"><a href="#4-7-4-warタスクの設定" class="headerlink" title="4.7.4 warタスクの設定"></a>4.7.4 warタスクの設定</h4><p>ビルドスクリプトにwarブロックを追加して、warタスクの挙動をカスタマイズできる</p><p>例えば、web.xmlを別名で用意しておき、ビルド時にweb.xmlとしてWARファイルにコピーする場合</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> env = <span class="string">'dev'</span></span><br><span class="line">war &#123;</span><br><span class="line">  webXml = <span class="keyword">file</span>(<span class="string">"src/web-$&#123;env&#125;.xml"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Eclipse WTPプラグイン<ul><li>Warプラグインを適用したプロジェクトをEclipseで開く場合、Eclipseプラグインを適用して、gradle eclipseでEclipseプロジェクトを作っただけではEclipseのWTPプロジェクトとして認識されない</li><li>この場合、Eclipseプラグインを使うのではなく、EclipseWTPプラグインを利用してください</li></ul></li></ul><h3 id="第5章-Gradle-の基礎"><a href="#第5章-Gradle-の基礎" class="headerlink" title="第5章 Gradle の基礎"></a>第5章 Gradle の基礎</h3><p>本章では、Gradleのアーキテクチャや主要な機能など、理解しておくべきGradleの基礎について解説</p><h4 id="5-1-Gradleにおけるビルド"><a href="#5-1-Gradleにおけるビルド" class="headerlink" title="5.1 Gradleにおけるビルド"></a>5.1 Gradleにおけるビルド</h4><p>Gradleでのビルドが何なのかについては明らかにしていませんでした<br>Gradleのビルドが何を指し、どのように実行されるのかを説明する</p><h4 id="5-1-1-ビルドとはなにか"><a href="#5-1-1-ビルドとはなにか" class="headerlink" title="5.1.1 ビルドとはなにか"></a>5.1.1 ビルドとはなにか</h4><ul><li>wiki<ul><li>ソフトウェアのビルドは、ソースコードファイルを独立したソフトウェア成果物に変換するコンピュータ上で実行されるプロセス、またはその結果を指す。</li></ul></li></ul><p>なにかしらのアクションを実行すること、それがビルドツールにおけるビルドであると言える</p><ul><li>Gradleでは実行する処理の単位をタスクと呼び、このタスクを実行することがGradleにとってのビルドであり、ビルドを実行するための仕組みがGradleの根幹</li></ul><h4 id="5-1-2-ビルドの入力情報"><a href="#5-1-2-ビルドの入力情報" class="headerlink" title="5.1.2 ビルドの入力情報"></a>5.1.2 ビルドの入力情報</h4><p>ビルド実行時に、Gradleが参照するファイルやディレクトリ、パラメータにどのようなものがあり、<br>それらがどのような役割を果たしているかを理解しておきましょう</p><ul><li>初期化スクリプト<ul><li>ビルドの最初で実行されるGroovyスクリプト</li><li>デフォルトのファイル名はinit.gradleになる</li><li>主にユーザー情報や実行環境などの初期設定を行うために使う</li><li>初期スクリプトはいくつか指定方法があり、複数のスクリプトファイルを使い分けることができる</li></ul></li><li>設定スクリプト<ul><li>ビルド対象のプロジェクトの設定を行うGroovyスクリプト</li><li>デフォルトのファイル名はsettings.gradleとなります</li><li>主にビルドに参加するプロジェクトを定義する用途で使用</li><li>マルチプロジェクトでは必須のスクリプトファイル</li></ul></li><li>ビルドスクリプト<ul><li>ビルドの入力情報の中で一番大切な「ビルドの定義」を記述するGroovyスクリプト</li><li>デフォルトのファイル名はbuild.gradleになります</li><li>当該プロジェクトの依存関係やタスク定義などをするのが主な用途で、通常のビルドであればこのファイルだけで事足ります。</li></ul></li><li>プロパティファイル<ul><li>Gradleが標準で参照するプロパティファイルで、ファイル名はgradle.propertiesとなる</li></ul></li><li>環境変数&#x2F;コマンドライン引数</li><li>buildSrcプロジェクト</li></ul><p>これらのうち、以下の３つのスクリプトファイルは特に重要<br>記述した内容がビルド実行時にGradle固有のドメインオブジェクトに移譲される</p><table><thead><tr><th>スクリプトファイル</th><th>Gradleドメインオブジェクト</th></tr></thead><tbody><tr><td>初期化スクリプト</td><td>Gradleオブジェクト</td></tr><tr><td>設定スクリプト</td><td>Settingsオブジェクト</td></tr><tr><td>ビルドスクリプト</td><td>Projectオブジェクト</td></tr></tbody></table><h4 id="5-1-3-ビルドの流れ"><a href="#5-1-3-ビルドの流れ" class="headerlink" title="5.1.3 ビルドの流れ"></a>5.1.3 ビルドの流れ</h4><p>コマンドラインからgreetタスクを実行するときの処理の流れについて見ていく</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">task</span> greet <span class="keyword">doLast</span> &#123; <span class="keyword">println</span> <span class="string">'hello,'</span> + user &#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle -Puser=kotetsu greet</span><br></pre></td></tr></table></figure><ul><li>Gradleビルドの流れ<ul><li>コマンドの解析：</li><li>スクリプトファイルの初期化：初期化フェーズ</li><li>プロジェクトの設定：設定フェーズ</li><li>タスクの実行：実行フェーズ</li></ul></li></ul><h4 id="5-2-アーキテクチャと主要な機能"><a href="#5-2-アーキテクチャと主要な機能" class="headerlink" title="5.2 アーキテクチャと主要な機能"></a>5.2 アーキテクチャと主要な機能</h4><h4 id="5-2-1-物理構造"><a href="#5-2-1-物理構造" class="headerlink" title="5.2.1 物理構造"></a>5.2.1 物理構造</h4><p>Gradleは40近くのJARファイルで構成されるが、大きく分類するとGradle本体、プラグインの２つに分けられる</p><p>スクリプトファイルの中で適用されない限りは、基本的にGradleにプラグインはロードされない<br>プラグインを取り除いてスリムにしたGradleを使用することもできる</p><p>このプラグイン機構はGradleの特徴の１つと言える</p><h4 id="5-2-2-実行基盤を支える仕組みと標準機能"><a href="#5-2-2-実行基盤を支える仕組みと標準機能" class="headerlink" title="5.2.2 実行基盤を支える仕組みと標準機能"></a>5.2.2 実行基盤を支える仕組みと標準機能</h4><p>ビルドで実行する処理の主体はプラグイン側にある<br>Gradle本体が提供するのは、ビルドの実行基盤を支えるための仕組みと標準的な機能になる</p><ul><li>実行基盤を支える仕組み<ul><li>設定の自動ロード</li><li>プロジェクトの探索</li><li>タスクグラフ</li></ul></li><li>Gradleの標準機能<ul><li>ファイル操作：コンパイル後のファイルの出力先ディレクトリを作成したり、ビルド中の中間ファイルを削除したりとファイルシステムの操作をよく行う</li><li>ロギング：ビルドの実行中の状態を知るには、処理状態や処理中に起きた問題について出力する機能が必要<ul><li>Gradleではロギングフレームワークを内包した独自のロギング機能により、ログの出力を制御できる</li></ul></li></ul></li></ul><h4 id="5-3-設定の自動ロード"><a href="#5-3-設定の自動ロード" class="headerlink" title="5.3 設定の自動ロード"></a>5.3 設定の自動ロード</h4><h4 id="5-3-1-初期化スクリプトによる設定"><a href="#5-3-1-初期化スクリプトによる設定" class="headerlink" title="5.3.1 初期化スクリプトによる設定"></a>5.3.1 初期化スクリプトによる設定</h4><p>初期化スクリプトはビルドライフサイクルの初期化フェーズの先頭でロードされるため、ビルド実行時に環境設定を行うのに適している</p><p>例えばMavenCentralリポジトリを参照する設定を初期化スクリプトに定義して、実行ユーザーのホームディレクトリの.gradleに配置しておくと、同ユーザーが実行するすべてのGradleのビルドでMaven Centralリポジトリを参照できるようになります。</p><ul><li>初期化スクリプトの規約<ul><li>コマンドライン引数 -I (–init-script)で指定する</li><li><code>&lt;HOME&gt;</code>&#x2F;.gradleディレクトリに配置：init.gradleが対象</li><li><code>&lt;HOME&gt;</code>&#x2F;.gradle&#x2F;init.dディレクトリに配置：.gradleが対象</li><li><code>&lt;GRADLE_HOME&gt;</code>&#x2F;.gradle&#x2F;init.dディレクトリに配置：gradleが対象</li></ul></li></ul><h4 id="5-3-2-プロパティファイルによる設定"><a href="#5-3-2-プロパティファイルによる設定" class="headerlink" title="5.3.2 プロパティファイルによる設定"></a>5.3.2 プロパティファイルによる設定</h4><p>Gradleが自動的にロードするプロパティファイルは、環境に関する設定を記述する場合に適している<br>gradle.propertiesファイルに記述しておくと、初期化フェーズでロードされ、記述したプロパティが適用される</p><ul><li>プロパティファイル<ul><li><code>&lt;PROJECT_HOME&gt;</code>ディレクトリに配置する：gradle.propertiesが対象</li><li><code>&lt;HOME&gt;</code>&#x2F;.gradleディレクトリに配置する：gradle.propertiesが対象</li><li>コマンドライン引数-D(–system-prop)で指定する：規約なし</li></ul></li></ul><h4 id="5-4-プロジェクトの探索"><a href="#5-4-プロジェクトの探索" class="headerlink" title="5.4 プロジェクトの探索"></a>5.4 プロジェクトの探索</h4><h4 id="5-4-1-プロジェクト構成と探索の関係"><a href="#5-4-1-プロジェクト構成と探索の関係" class="headerlink" title="5.4.1 プロジェクト構成と探索の関係"></a>5.4.1 プロジェクト構成と探索の関係</h4><p>Gradleはビルドを実行する際にプロジェクトと言う概念で対象領域を特定する<br>通常、gradleコマンドを実行するカレントディレクトリがビルド対象のプロジェクト（カレントのプロジェクト）となる</p><p>Gradleはシングルプロジェクトとマルチプロジェクトをサポートしていることもあり、ビルドを実行する前に、カレントのプロジェクトがシングルプロジェクトなのかマルチプロジェクトなのか探索する必要がある<br>このプロジェクトの判定は設定スクリプト（settings.gradle）を利用して行う<br>この設定スクリプトはプロジェクトを特定する上で重要な役割を担っている</p><ul><li>設定スクリプトの決まり<ul><li>設定スクリプトはルートプロジェクトの直下に配置しなければならない</li><li>マルチプロジェクトの場合には、必ず設定スクリプトを容易しなければならない</li></ul></li></ul><h4 id="5-4-2-設定スクリプトに基づいた構成の特定"><a href="#5-4-2-設定スクリプトに基づいた構成の特定" class="headerlink" title="5.4.2 設定スクリプトに基づいた構成の特定"></a>5.4.2 設定スクリプトに基づいた構成の特定</h4><p>プロジェクトを探索するためには設定スクリプトの有無が最初のポイント</p><ul><li>読み込み方法<ul><li>コマンドライン引数の-c(–settings-file)オプションで、ファイルを指定する<ul><li>引数で指定された場所にあれば読み込む</li></ul></li><li>Gradleの規約に従った場所に配置する<ul><li>1.カレントディレクトリにsettings.gradleがあれば読み込む</li><li>2.カレントディレクトリの親ディレクトリにsettings.gradleがあれば、それを設定スクリプトとみなす</li><li>3.カレントディレクトリと同じ階層にmasterディレクトリがあり、その配下にsettings.gradleがあればそれを設定スクリプトとみなす<ul><li>※ただし、コマンドライン引数に-u(–no-search-upward)オプションが含まれていた場合、2,3は行われない</li><li>カレントディレクトリに設定ファイルが存在しなければシングルプロジェクトとして扱う</li></ul></li></ul></li></ul></li></ul><h4 id="5-5-タスクグラフ"><a href="#5-5-タスクグラフ" class="headerlink" title="5.5 タスクグラフ"></a>5.5 タスクグラフ</h4><h4 id="5-5-1-タスクグラフの概要"><a href="#5-5-1-タスクグラフの概要" class="headerlink" title="5.5.1 タスクグラフの概要"></a>5.5.1 タスクグラフの概要</h4><p>Gradleのタスクグラフは、グラフ理論の無閉路有効グラフの考えに基づいて設計されている</p><h4 id="5-5-2-タスクグラフの制約"><a href="#5-5-2-タスクグラフの制約" class="headerlink" title="5.5.2 タスクグラフの制約"></a>5.5.2 タスクグラフの制約</h4><p>タスクグラフは基本的に指定されたタスクとそのタスクの依存関係によって構築されますが、依存関係以外にも次の制約によりタスクグラフが制御される場合がある</p><ul><li><p>同一のタスクが実行対象タスクとして指定された場合</p></li><li><p>タスクが順序付けられている場合</p></li><li><p>ファイナライザータスクが設定されている場合</p></li><li><p>同一のタスクが実行対象タスクとして指定された場合</p><ul><li>Gradleでは、１つのタスクは１回しか実行されないことが保証されている</li><li>同じタスクを複数指定していたり、複数のタスクから依存されているタスクがあったりしても、タスクグラフには１つしか存在しないように制御される</li><li>例えば、greetタスクを２回実行する用にしても１回しか実行されない</li><li><code>gradle greet greet</code></li></ul></li><li><p>タスクが順序付けられている場合</p><ul><li>明示的に実行対象として指定された場合のみ有効になる</li><li>タスクの順序付けについては次章で説明</li></ul></li><li><p>ファイナライザータスクが設定されている場合</p><ul><li>順序付けのほかに、ファイナライザータスクという指定されたタスクの後に自動で必ず実行される特殊なタスクを定義できる</li><li>ファイナライザータスクを設定しているタスクを実行した場合には、タスクグラフの構築の際にファイナライザータスクも自動的に追加されることになります。</li></ul></li></ul><h4 id="5-6-ファイル操作"><a href="#5-6-ファイル操作" class="headerlink" title="5.6 ファイル操作"></a>5.6 ファイル操作</h4><h4 id="5-6-1-Gradle標準のファイル操作機能"><a href="#5-6-1-Gradle標準のファイル操作機能" class="headerlink" title="5.6.1 Gradle標準のファイル操作機能"></a>5.6.1 Gradle標準のファイル操作機能</h4><ul><li>Gradleのファイルシステムの操作として次の機能を提供<ul><li>ファイルの参照</li><li>ファイルのコピー</li><li>ファイルの削除</li><li>ディレクトリの作成</li></ul></li></ul><p>このうち、ファイルの参照とコピーに関しては提供されているAPIも多く、使い勝手がいい</p><h4 id="5-6-2-単一ファイルの参照"><a href="#5-6-2-単一ファイルの参照" class="headerlink" title="5.6.2 単一ファイルの参照"></a>5.6.2 単一ファイルの参照</h4><p><code>file()</code>を使用する<br>通常はルートプロジェクトのディレクトリを起点とした相対パスか、Fileオブジェクトを指定する</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">File</span> javaFile = <span class="keyword">file</span>(<span class="string">'src/main/java/Main.java'</span>)</span><br></pre></td></tr></table></figure><ul><li>ファイルパス以外からのファイル参照<ul><li>file()はファイルパス以外にも、URL&#x2F;URIオブジェクト、Callableインターフェースやクロージャなどを引数として、ファイルへの参照を取得できる</li></ul></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">File index = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">'file:/index.html'</span>)</span><br><span class="line">index = file(url)</span><br><span class="line"></span><br><span class="line">URI uri = <span class="keyword">new</span> URI(<span class="string">'file:/index.html'</span>)</span><br><span class="line">index = file(uri)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable</span><br><span class="line"></span><br><span class="line">index = file(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">  String call() &#123;</span><br><span class="line">    <span class="string">'/index.html'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">index = file &#123; <span class="string">'/index.html'</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>PathValidationによるファイルの検証</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File existDir = file(<span class="string">'src/main/existDir'</span>, PathValidation.DIRECTORY)</span><br></pre></td></tr></table></figure><p>PathValidationには、DIRECTORY,FILE,EXISTS,NONEが定義されている<br>指定しない場合はNONEが設定されている</p><h4 id="5-6-3-ファイルコレクションによるファイルの参照"><a href="#5-6-3-ファイルコレクションによるファイルの参照" class="headerlink" title="5.6.3 ファイルコレクションによるファイルの参照"></a>5.6.3 ファイルコレクションによるファイルの参照</h4><p>複数のファイルを扱う場合には、files()を使用する<br>ビルドスクリプトからfiles()を呼ぶことで、Fileの集合であるファイルコレクションを取得できる</p><p>ファイルコレクションはConfigurableFileCollectionインターフェースを実装していますが、操作するためのAPIは親のFileCollectionインターフェースで定義されていることから、このFileCollection インターフェースを中心に説明</p><ul><li><p>FileCollection</p><ul><li>Gradleには、ビルドスクリプト上の記述を簡潔にするためのインターフェースがいくつか用意されている</li><li>FileCollection はそのインターフェースの一つで、これによりファイルのコレクション操作を簡潔に行える</li><li>使用頻度の高いと思われるものを中心に紹介</li></ul></li><li><p>ファイルコレクションの取得</p><ul><li>files()の引数はfile()が許容する型のオブジェクトを複数渡すようなかたちになります。</li><li>引数に渡すパラメータには、ファイルパスのおじ列、File、URL、URIなどを組み合わせることもできる</li></ul></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FileCollection collection = files(<span class="string">'file1.txt'</span>, <span class="string">'file2.txt'</span>)</span><br><span class="line"></span><br><span class="line">collection = files(<span class="string">'file1.txt'</span>, <span class="keyword">new</span> File(<span class="string">'file2.txt'</span>), <span class="keyword">new</span> URL(<span class="string">'file:/index.html'</span>))</span><br><span class="line"></span><br><span class="line">List fileList = [<span class="keyword">new</span> File(<span class="string">'file1.txt'</span>), <span class="keyword">new</span> File(<span class="string">'file2.txt'</span>)]</span><br><span class="line"></span><br><span class="line">collections = files(fileList)</span><br><span class="line">collections = files(fileList <span class="keyword">as</span> File[])</span><br></pre></td></tr></table></figure><ul><li>ファイルコレクションの変換</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FileCollection collections = files(<span class="string">'file1.txt'</span>, <span class="string">'file2.txt'</span>, <span class="string">'file3.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// as 演算子による変換</span></span><br><span class="line">List list = collections <span class="keyword">as</span> List</span><br><span class="line">Set set1  = collections <span class="keyword">as</span> Set</span><br><span class="line">File[] array = collections <span class="keyword">as</span> File[]</span><br><span class="line"></span><br><span class="line"><span class="comment">// getFiles() のGroovy簡略記法</span></span><br><span class="line">Set set2 = collections.files</span><br><span class="line"></span><br><span class="line"><span class="comment">// ファイルコレクションに含まれるファイルが１つの場合は、getSingleFile()が使える</span></span><br><span class="line"></span><br><span class="line">File file = collections.singleFile</span><br></pre></td></tr></table></figure><ul><li><p>遅延評価によるファイルコレクションの取得</p><ul><li>Callableの場合遅延評価されます→実際に参照されたときに実行されるということ</li></ul></li><li><p>ファイルコレクションの演算</p><ul><li>ファイルコレクションの操作に加算と原産が利用できるらしい</li></ul></li><li><p>ファイルコレクションのフィルタリング</p><ul><li>ファイルコレクションに条件を指定することで、条件に一致したファイルだけにフィルタリングをすることができる</li><li>フィルタリングはfilter()にクロージャを渡します</li></ul></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FileCollection collections = files(<span class="string">'file1.txt'</span>,<span class="string">'file2.txt'</span>,<span class="keyword">new</span> URL(<span class="string">'file:/index.html'</span>))</span><br><span class="line">FileCollection textFiles = collections.filter&#123; collectionFile -&gt; </span><br><span class="line">  collectionFile.name.endsWith .txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> textFiles.files.size() == <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>その他の機能<ul><li>getAsPath() : ファイルコレクションに含まれているファイルのパスを取得できる<ul><li>このメソッドはファイルごとのパス環境に応じたパス区切り文字で連携つして出力するため、javaコマンドにクラスパス形式でJARファイルのパスを渡すような場合に便利</li></ul></li></ul></li></ul><h4 id="5-6-4-ファイルツリーによるファイルの参照"><a href="#5-6-4-ファイルツリーによるファイルの参照" class="headerlink" title="5.6.4 ファイルツリーによるファイルの参照"></a>5.6.4 ファイルツリーによるファイルの参照</h4><p>複数のファイルを木構造のファイルツリーとして扱う場合にはfileTree()を使用</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileTree sourceTree = fileTree(<span class="string">'src'</span>)</span><br></pre></td></tr></table></figure><ul><li><p>FileTreeとは</p><ul><li>FileTreeインターフェースもファイルコレクションを簡潔に操作するためのインターフェースの１つ</li><li>FileTreeインターフェースはFileCollectionインターフェースを継承しており、階層的にファイルを巡って処理するような機能が拡張されている</li></ul></li><li><p>ファイルのマッチング</p></li><li><p>クロージャによるファイルツリーの取得</p></li><li><p>マップによるファイルツリーの取得</p></li><li><p>条件に一致するファイルツリーの取得</p></li><li><p>ファイルツリーの探索</p></li></ul><p>TODO: あとで纏める すぐ使える用にスニペットにする？</p><h4 id="5-6-5-ファイルのコピー"><a href="#5-6-5-ファイルのコピー" class="headerlink" title="5.6.5 ファイルのコピー"></a>5.6.5 ファイルのコピー</h4><p>ファイルをコピーするには、デフォルトで提供しているCopy型タスクから、独自のタスクを作成する方法と、ビルドスクリプト上でcopy()を使う方法の２通りある</p><p>ここでは後者のcopy()を使用したファイルのコピーについて述べる<br>copy()はクロージャを引数としていますが、実際のコピーに関する記述はクロージャ内でCopySpecというインターフェースを使用して行います</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">copy &#123;</span><br><span class="line">  <span class="comment">// CopySpec インターフェースのメソッドを使用する</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CopySpecとは<ul><li>ファイルのコピーに特化したGradleが提供するインターフェースの１つ</li><li>Copyタスクを始めとする、ファイル操作を行うタスクの内部ではCopySpecインターフェースを使用しており、ファイルのコピーを伴うタスクではこのインターフェースを通じて処理が行われる</li></ul></li></ul><p>TODO: 使用する際に詳細見直す テンプレートはクラス自動生成時に有用だと思った</p><h4 id="5-6-6-ファイルの削除"><a href="#5-6-6-ファイルの削除" class="headerlink" title="5.6.6 ファイルの削除"></a>5.6.6 ファイルの削除</h4><p>ファイルの削除jは、デフォルトで提供しているDelete型のタスクを使って独自のタスクを作成する方法と、ビルドファイル上でdelete()を使う方法の２通りがある</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">delete <span class="string">'target.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可変長なので複数指定できる</span></span><br><span class="line">delete <span class="string">'target1.txt'</span>,<span class="string">'target2.txt'</span>,<span class="string">'target3.txt'</span></span><br></pre></td></tr></table></figure><h4 id="5-6-7-ディレクトリの作成"><a href="#5-6-7-ディレクトリの作成" class="headerlink" title="5.6.7 ディレクトリの作成"></a>5.6.7 ディレクトリの作成</h4><p>ディレクトリを作成するにはビルドスクリプト上でmkdir()を使用する</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="string">'parent/child/grandchild'</span></span><br><span class="line">mkdir <span class="string">'../outOfTheProject'</span></span><br><span class="line">mkdir <span class="string">'/gradle-book/absolutePathDir'</span></span><br></pre></td></tr></table></figure><ul><li>Gradleでのファイルの作成方法<ul><li>Gradleにはファイル作成のメソッドはありません。</li><li>Groovyによって拡張されたFileクラスで作成する</li></ul></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File newFile = file(<span class="string">'newFile.txt'</span>)</span><br><span class="line">newFile.write(<span class="string">'ビルドスクリプトからファイルの生成を行います'</span>,<span class="string">'UTF-8'</span>)</span><br></pre></td></tr></table></figure><h4 id="5-7-ロギング"><a href="#5-7-ロギング" class="headerlink" title="5.7 ロギング"></a>5.7 ロギング</h4><h4 id="5-7-1-Gradleでのロギング"><a href="#5-7-1-Gradleでのロギング" class="headerlink" title="5.7.1 Gradleでのロギング"></a>5.7.1 Gradleでのロギング</h4><p>GradleはSLF4Jを拡張したロガーを包含しています。<br>通常、Gradleを実行した際に出力されるログはこれによるもの</p><p>TODO: Gradle用に、QUIETとLIFECYCLEというログレベルが追加されているらしい。時間があるときに抑える</p><h4 id="5-7-2-loggerプロパティを使用したロギング"><a href="#5-7-2-loggerプロパティを使用したロギング" class="headerlink" title="5.7.2 loggerプロパティを使用したロギング"></a>5.7.2 loggerプロパティを使用したロギング</h4><p>ビルドスクリプトでログ出力を定義する場合には、loggerプロパティを使用</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">logger.error = <span class="string">''</span></span><br><span class="line">logger.quiet = <span class="string">''</span></span><br><span class="line">logger.warn = <span class="string">''</span></span><br><span class="line">logger.lifecycle = <span class="string">''</span></span><br><span class="line">logger.info = <span class="string">''</span></span><br><span class="line">logger.debug = <span class="string">''</span></span><br></pre></td></tr></table></figure><ul><li>標準出力とloggerプロパティの使い分け<ul><li>標準出力は一時的に局所のログを出力したい場合にとどめ、</li><li>恒久的にログを出力する場合はloggerプロパティを利用することをおすすめ</li></ul></li></ul><h4 id="5-7-3-外部ロギングフレームワークとのマッピング"><a href="#5-7-3-外部ロギングフレームワークとのマッピング" class="headerlink" title="5.7.3 外部ロギングフレームワークとのマッピング"></a>5.7.3 外部ロギングフレームワークとのマッピング</h4><p>TODO: 他のロギングAPIとの対比表を掲載。時間があればみる</p><h4 id="5-7-4-ログレベルマッピングの変更"><a href="#5-7-4-ログレベルマッピングの変更" class="headerlink" title="5.7.4 ログレベルマッピングの変更"></a>5.7.4 ログレベルマッピングの変更</h4><p>標準エラーは通常GradleではERRORレベルにマッピングされていますが、運用上の都合からERRORではなくINFOレベルに引き下げて出力させたいといった場合に対応する方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logging.captureStandardError LogLevel.INFO</span><br><span class="line">println <span class="string">'標準出力'</span></span><br><span class="line">System.err.println <span class="string">'標準エラー'</span></span><br></pre></td></tr></table></figure><p>MEMO: あまり使わないかも</p><h3 id="第6章-スクリプトファイルの記述"><a href="#第6章-スクリプトファイルの記述" class="headerlink" title="第6章 スクリプトファイルの記述"></a>第6章 スクリプトファイルの記述</h3><p>Gradleのスクリプトファイルに記述された内容は実行時にGradleドメインオブジェクトに移譲される<br>記述したものが内部でどのクラスに異常されてどのように振る舞うのかを知っていると、<br>スクリプトファイルもより理解しやすくなります。<br>また、実際のプロジェクトでの多用な要求に対応するためには、タスクの詳細やマルチプロジェクトでのビルドスクリプト記述方法などについても知って置かなければなりません</p><h4 id="6-1-スクリプトファイルの構造と共通要素"><a href="#6-1-スクリプトファイルの構造と共通要素" class="headerlink" title="6.1 スクリプトファイルの構造と共通要素"></a>6.1 スクリプトファイルの構造と共通要素</h4><h4 id="6-1-1-スクリプトファイルの構造"><a href="#6-1-1-スクリプトファイルの構造" class="headerlink" title="6.1.1 スクリプトファイルの構造"></a>6.1.1 スクリプトファイルの構造</h4><ul><li><p>Gradleのスクリプトファイル</p><ul><li>ステートメント</li><li>スクリプトブロック</li></ul></li><li><p>ステートメント</p><ul><li>ローカル変数やプロパティの設定、メソッドの実行など、</li><li>一般的なプログラミングでのステートメントと同じ意味合いのもの</li></ul></li><li><p>スクリプトブロック</p><ul><li>Gradle独自の概念で、ある設定をおこなナウための領域を示すもの</li><li>実際にはたんにクロージャを引数とするメソッドであり、そんなに難しいものではない</li></ul></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ステートメント</span></span><br><span class="line">xxx = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// スクリプトブロック</span></span><br><span class="line">設定 &#123;</span><br><span class="line">  <span class="comment">// 設定のための領域</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Groovyスクリプトがベースで有ることには変わりませんので、<br>通常のGroovyスクリプトと同様にクラスやクロージャを定義することもできる</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Descriptor</span> &#123;</span></span><br><span class="line">  String show() &#123;</span><br><span class="line">    <span class="string">'*** これはGroovyスクリプトです。 ***'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">println <span class="keyword">new</span> Descriptor().show()</span><br></pre></td></tr></table></figure><h4 id="6-1-2-スクリプトファイルの共通要素"><a href="#6-1-2-スクリプトファイルの共通要素" class="headerlink" title="6.1.2 スクリプトファイルの共通要素"></a>6.1.2 スクリプトファイルの共通要素</h4><p>変数は欠かせない共通要素<br>Gradleにはプロパティが手軽に使える仕組みが用意されているので、さまざまな場面で重宝するでしょう</p><p>4つの変数</p><table><thead><tr><th>名称</th><th>概要</th><th>使用可能なスクリプトファイル</th></tr></thead><tbody><tr><td>ローカル変数</td><td>宣言されたスコープで有効な変数</td><td>すべてのスクリプトファイル</td></tr><tr><td>システムプロパティ</td><td>システムの情報を保持するためのプロパティ</td><td>すべてのスクリプトファイル</td></tr><tr><td>拡張プロパティ</td><td>ドメインオブジェクトを拡張するためのプロパティ</td><td>すべてのスクリプトファイル</td></tr><tr><td>プロジェクトプロパティ</td><td>プロジェクトで使用するためのプロパティ</td><td>ビルドスクリプト</td></tr></tbody></table><ul><li>ローカル変数</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> message = <span class="string">'ローカル変数'</span></span><br><span class="line">String stringMessage = <span class="string">'ローカル変数'</span></span><br><span class="line"><span class="comment">// def でも 型指定でもいいよ</span></span><br></pre></td></tr></table></figure><p>型宣言の無いものはGradleでは変数ではなく、移譲されるドメインオブジェクトのプロパティとみなす<br>変数として宣言するのではなく、オブジェクトにプロパティとして追加したい場合は、後述する拡張プロパティを使用する必要がある<br>→ここイマイチ腑に落ちない</p><ul><li>システムプロパティ<ul><li>システムプロパティをコマンドライン引数で指定する場合は-D(–system-prop)を使用する</li><li>これだけならJavaと同じ</li><li>Gradleには他の指定方法もある</li><li>Gradleのプロパティファイル（gradle.properties）にsystemPropをプレフィックスとしてつけてプロパティを記述すると、システムプロパティとして識別される</li></ul></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gradle.properties</span></span><br><span class="line"><span class="meta">systemProp.message</span>=<span class="string">Hello</span></span><br></pre></td></tr></table></figure><ul><li>拡張プロパティ<ul><li>Gradleには、スクリプトファイル上からドメインオブジェクトのプロパティを追加する仕組みとして、</li><li>拡張プロパティというものがある</li><li>拡張プロパティはextという名前で暗黙的に定義されており、使用にあたって特別な制約はない</li><li>詳細は後述のGradleドメインオブジェクトExtraPropertiesExtensionで説明</li><li>基本的に通常のキーバリュー方式でプロパティの追加と取得ができる</li></ul></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">  key1 = <span class="string">'value1'</span></span><br><span class="line">  key2 = <span class="string">'value2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>プロジェクトプロパティ<ul><li>もう1つGradle固有のプロパティとして、プロジェクトプロパティというものがあります。</li><li>プロジェクトプロパティはビルドスクリプトで使用可能</li><li>ビルド対象のプロジェクトのプロパティとして利用</li><li>拡張プロパティの仕組みを使用しているので、内部的には拡張プロパティとの違いはありません</li><li>拡張プロパティと違うところは設定方法で、<ul><li>プロジェクトプロパティはプロパティファイル、環境変数、コマンドライン引数のどれでも設定できる</li></ul></li><li>プロパティファイルの場合は、<code>&lt;プロパティ名&gt;=&lt;値&gt;</code>と定義するだけで追加される</li><li>環境変数の場合は、<code>ORG_GRADLE_PROJECT_&lt;プロパティ名&gt;=&lt;値&gt;</code>という形式で設定できる</li><li>コマンドライン引数の場合は、<code>-P&lt;プロパティ名&gt;=&lt;値&gt;</code>または、<code>--project-prop &lt;プロパティ名&gt;=&lt;値&gt;</code>で設定</li><li>システムプロパティの場合は、<code>org.gradle.project.</code>をプレフィクスでつけることで設定できる</li></ul></li></ul><p>TODO: プロジェクトプロパティのロード順を記載してくれている</p><h4 id="6-1-3-スクリプトブロックとドメインオブジェクト"><a href="#6-1-3-スクリプトブロックとドメインオブジェクト" class="headerlink" title="6.1.3 スクリプトブロックとドメインオブジェクト"></a>6.1.3 スクリプトブロックとドメインオブジェクト</h4><p>スクリプトブロックはクロージャを引数とするメソッド</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">println <span class="string">'デフォルトの依存関係：'</span></span><br><span class="line">repositories.each &#123; println it.name &#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">  mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println <span class="string">'リポジトリ追加後：'</span></span><br><span class="line">repositories.each &#123; println it.name &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// このリポジトリブロックをGroovyのプログラム風に記述すると</span></span><br><span class="line"><span class="keyword">def</span> closure = &#123; mavenCentral() &#125;</span><br><span class="line"><span class="keyword">this</span>.reporitories(closure)</span><br></pre></td></tr></table></figure><p>スクリプトファイルはGradleのドメインオブジェクトに移譲されています<br>thisはまさにその移譲されたドメインオブジェクトを表しており、この例で言えば、thisはドメインオブジェクトであるProjectオブジェクトになる</p><h4 id="6-1-4-主要なスクリプトブロック"><a href="#6-1-4-主要なスクリプトブロック" class="headerlink" title="6.1.4 主要なスクリプトブロック"></a>6.1.4 主要なスクリプトブロック</h4><p>スクリプトファイルに記述するスクリプトブロックがドメインオブジェクトと関係していることがわかったと思いますので、<br>主要なスクリプトブロックと移譲されるドメインオブジェクトを列挙しておきます</p><table><thead><tr><th>スクリプトブロック</th><th>概要</th><th>ドメインオブジェクト</th></tr></thead><tbody><tr><td>initscript</td><td>初期化スクリプトのクラスパスの設定を記述する</td><td>ScriptHandler</td></tr><tr><td>buildscript</td><td>ビルドスクリプトのクラスパスの設定を記述する</td><td>ScriptHandler</td></tr><tr><td>allprojects</td><td>当該プロジェクトとそのすべてのサブプロジェクトに関する設定を記述する</td><td>Project</td></tr><tr><td>subprojects</td><td>当該プロジェクトのサブプロジェクトに対する設定を記述する</td><td>Project</td></tr><tr><td>configurations</td><td>コンフィグレーションの設定を記述する</td><td>ConfigurationContainer</td></tr><tr><td>dependencies</td><td>依存関係の解決のための設定を記述する</td><td>DependencyHandler</td></tr><tr><td>repositories</td><td>リポジトリの設定を記述する</td><td>RepositoryHandler</td></tr><tr><td>artifacts</td><td>ビルド成果物（アーティファクト）を公開するための設定を記述</td><td>ArtifactHandler</td></tr></tbody></table><h4 id="6-2-Gradleドメインオブジェクト"><a href="#6-2-Gradleドメインオブジェクト" class="headerlink" title="6.2 Gradleドメインオブジェクト"></a>6.2 Gradleドメインオブジェクト</h4><ul><li>重要なドメインオブジェクトについて<ul><li>Project</li><li>Task</li><li>Gradle</li><li>Settings</li><li>ExtensionAware</li><li>ExtraPropertiesExtension</li></ul></li></ul><h4 id="6-2-1-Projectオブジェクト"><a href="#6-2-1-Projectオブジェクト" class="headerlink" title="6.2.1 Projectオブジェクト"></a>6.2.1 Projectオブジェクト</h4><p>ProjectオブジェクトはGradleでの処理対象となる１つの領域を表すドメインオブジェクト<br>ビルドスクリプトからProjectオブジェクトに移譲される</p><p>Projectオブジェクトはビルドスクリプト上のすべてのドメインを統括する、Gradleのなかで最も重要なドメインオブジェクト</p><ul><li><p>Projectオブジェクトの構造</p><ul><li>Gradleでなにかを自動化するときには、プロジェクトが必ず１つは存在する</li><li>マルチプロジェクトを扱うためにはコンポジットな構造である必要があるため、自分自身の親プロジェクト、起点となるルートプロジェクト、自分の下にぶら下がっているプロジェクトのリストを保持する用になっている</li></ul></li><li><p>プロパティ</p><ul><li>Projectオブジェクトはビルドに必要なすべての情報にアクセスできなければなりません。</li><li>そのためプロパティも多数存在する</li></ul></li></ul><table><thead><tr><th>プロパティ</th><th>概要</th></tr></thead><tbody><tr><td>name</td><td>プロジェクト名。論理名のため物理的なディレクトリと異なる場合もある</td></tr><tr><td>description</td><td>プロジェクトの説明</td></tr><tr><td>group</td><td></td></tr><tr><td>path</td><td></td></tr><tr><td>projectrDir</td><td></td></tr><tr><td>status</td><td></td></tr><tr><td>state</td><td></td></tr><tr><td>version</td><td></td></tr><tr><td></td><td></td></tr></tbody></table><ul><li>プロジェクト参照属性<ul><li>自分に該当するプロジェクトや、自身が属しているルートプロジェクトなど、プロジェクトを参照するためのプロパティ</li></ul></li></ul><table><thead><tr><th>プロパティ</th><th>概要</th></tr></thead><tbody><tr><td>project</td><td>当該プロジェクトの参照を保持する</td></tr><tr><td>rootProject</td><td>ルートプロジェクト参照を保持する。</td></tr><tr><td>parent</td><td>上位プロジェクトの参照</td></tr><tr><td>childProjects</td><td>子プロジェクトの参照をMapコレクションで保持</td></tr><tr><td>allprojects</td><td>当該プロジェクトに含まれるすべてのプロジェクトの参照をSetコレクションで保持</td></tr><tr><td>subprojects</td><td>当該プロジェクト配下のすべての参照をSetコレクションで保持</td></tr></tbody></table><p>rootProjectはシングルプロジェクトの場合は自分自身、マルチプロジェクトの場合は、settings.gradleが置かれたディレクトリのプロジェクトとなる</p><ul><li><p>コンテナタイプ属性</p><ul><li>コンテナタイプのプロパティには、repositoriesやtasksなどビルドスクリプトで定義されたドメインを管理するためのものがある</li><li>これらの多くはスクリプトブロックが用意されており、スクリプトブロックによって設定を記述する</li></ul></li><li><p>defaultTasksプロパティ</p></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">defaultTasks <span class="string">'showProjectName'</span></span><br><span class="line">project.description = <span class="string">'デフォルトタスクの説明のためのプロジェクトです。'</span></span><br><span class="line">task showProjectName doLast &#123;</span><br><span class="line">  println project.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task showDescription doLast &#123;</span><br><span class="line">  println project.description</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 実行タスクが指定された場合は、デフォルトタスクは実行されない</span></span><br><span class="line"><span class="comment">// 複数のタスクを指定する場合は、</span></span><br><span class="line">defaultTasks = [<span class="string">'showProjectName'</span>,<span class="string">'showProjectDescription'</span>]</span><br></pre></td></tr></table></figure><ul><li><p>主要なAPI</p><ul><li>ビルドスクリプトを記述する際には、ProjectオブジェクトのAPIは欠かせません</li><li>プロパティと同様にAPIも用意されているので使用頻度の高いAPIに絞って紹介</li></ul></li><li><p>プロジェクト参照API</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def childInstance &#x3D; project(&#39;:child&#39;)</span><br><span class="line">childInstance.description &#x3D; &#39;子プロジェクトの説明を設定&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; パスとクロージャを引数とするオーバーロードメソッドを使用した場合</span><br><span class="line">project(&#39;:child&#39;) &#123;</span><br><span class="line">  description &#x3D; &#39;子プロジェクトの説明を設定&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>タスク定義API<ul><li>タスクを定義する際のAPIはtask()です</li><li>task()はオーバーロードメソッドになっていますが、よく利用されるのはタスク名を引数とするもので、これは本書ですでに何度も登場しています</li></ul></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">task hello doLast &#123;</span><br><span class="line">  println <span class="string">'hello gradle world!'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>コールバックAPI</p><ul><li>Gradleがビルド処理を実行している最中にビルドフェーズ内からコールバックされるAPIとして、<code>beforeEvaluate()</code>と<code>afterEvaluate()</code>の２つがある</li><li>beforeEvaluate()はプロジェクトの評価前ににコールバックされるため、ビルドスクリプトに記述した処理は参できない<ul><li>→よって、プロジェクトの評価前に独自の処理を割り込ませるには、初期化スクリプトもしくは設定スクリプトに記述しておく必要がある</li></ul></li></ul></li><li><p>TODO: イマイチ使いみちがわからなかった</p></li><li><p>その他のAPI</p><ul><li>javaexec(): Javaのメインクラスを実行する</li><li>exec(): 外部のOSコマンドを実行する</li><li>tarTree(): 指定されたTARファイルを基にしてFileTreeを生成する</li><li>zipTree(): 指定されたZIPファイルを基にしてFileTreeを生成する</li></ul></li><li><p>この他にも５章で紹介したファイル操作やロギングAPIもあるし他にもある</p></li></ul><h4 id="6-2-2-Taskオブジェクト"><a href="#6-2-2-Taskオブジェクト" class="headerlink" title="6.2.2 Taskオブジェクト"></a>6.2.2 Taskオブジェクト</h4><ul><li><p>TaskオブジェクトはGradleでの対象作業を表すドメインオブジェクトで、ビルドスクリプトで記述されたタスクの定義がProjectオブジェクトを通じてTaskオブジェクトに移譲される</p></li><li><p>つまり、ビルドスクリプトでのタスクに関する記述は、Taskオブジェクトのプロパティへの設定やAPIの呼び出しになるということになります。</p></li><li><p>プロパティ</p></li></ul><table><thead><tr><th>プロパティ</th><th>概要</th></tr></thead><tbody><tr><td>name</td><td>タスク名。定義名がそのまま設定される</td></tr><tr><td>description</td><td>タスクの説明。tasksタスクで説明が表示される</td></tr><tr><td>group</td><td>タスクが属するグループ。tasksタスクの出力時のタスクのグルーピングに使用される</td></tr><tr><td>path</td><td>タスクのパス。プロジェクトも含めた場合は「：」がセパレータとなる</td></tr></tbody></table><p>nameとpathはタスク定義の際に自動的に決まるが、descriptionとgroupは名自適に設定する必要がある</p><p>その他のプロパティ</p><table><thead><tr><th>プロパティ</th><th>概要</th></tr></thead><tbody><tr><td>enabled</td><td>タスクの実行可否情報を保持する</td></tr><tr><td>state</td><td>タスクの実行ステータスを保持する</td></tr><tr><td>inputs</td><td>このタスクの入力情報を保持する</td></tr><tr><td>outputs</td><td>このタスクの出力情報を保持する</td></tr><tr><td>dependsOn</td><td>このタスクが依存するタスクを保持する</td></tr><tr><td>mustRunAfter</td><td>必ず先に実行されなければならないタスクを保持する</td></tr><tr><td>shouldRunAfter</td><td>先に実行されなければならないタスクを保持する</td></tr><tr><td>finalizedBy</td><td>このタスクの後に実行されるファイナライザータスクを保持する</td></tr></tbody></table><p>これらのプロパティを使用することで、タスクの実行順を制御したり、状態によって実行をスキップさせたりできる</p><p>他に、直接プロパティを操作することはないが、acrionsという重要なプロパティがあるので触れておく<br>acrionsプロパティは、Gradle内部での最小処理単位であるActionオブジェクトのリストになっており、タスクの定義で記述された作業をActionオブジェクトとして保持している<br>このactionsプロパティ内のActionオブジェクトを順次実行することでタスクの処理は行われている</p><h4 id="主要なAPI"><a href="#主要なAPI" class="headerlink" title="主要なAPI"></a>主要なAPI</h4><ul><li>TaskオブジェクトのAPIは<ul><li>タスクの処理のためのもの</li><li>タスクの実行に関するもの</li><li>プロパティのアクセサー<ul><li>の３種類で占めている</li></ul></li></ul></li></ul><table><thead><tr><th>API</th><th>概要</th></tr></thead><tbody><tr><td>doFirst()</td><td>タスク処理をActionオブジェクトとしてactionsの先頭に追加</td></tr><tr><td>doLast()</td><td>タスク処理をActionオブジェクトとしてactionsの最後に追加</td></tr><tr><td>leftShift()</td><td>タスク処理をActionオブジェクトとしてactionsの最後に追加</td></tr><tr><td>deleteAllActions()</td><td>actions内のActionオブジェクトを削除</td></tr></tbody></table><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">task</span> myActionTask &#123;</span><br><span class="line">  <span class="keyword">doFirst</span> &#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'First'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// これらはGradleのDSL記法で</span></span><br><span class="line"><span class="comment">// Groovyで書くと以下になる</span></span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Action&gt; actions = <span class="keyword">new</span> ArrayList&lt;Action&gt;()</span><br><span class="line"></span><br><span class="line">Closure doFirstAction = &#123; println <span class="string">'First'</span> &#125;</span><br><span class="line">actions.add(<span class="number">0</span>,doFirstAction)</span><br><span class="line"></span><br><span class="line">Closure doLastAction = &#123; println <span class="string">'Last'</span> &#125;</span><br><span class="line">actions.add(doLastAction)</span><br><span class="line"></span><br><span class="line">actions.each&#123; action -&gt;</span><br><span class="line">  actions.execute()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-3-Gradleオブジェクト"><a href="#6-2-3-Gradleオブジェクト" class="headerlink" title="6.2.3 Gradleオブジェクト"></a>6.2.3 Gradleオブジェクト</h4><p>実行環境であるGradleを表すドメインオブジェクトで、初期化スクリプトから移譲される<br>他にも後述するProjectオブジェクトやSettingsオブジェクトがプロパティとして保持しており、すべてのスクリプトファイルからアクセスできる</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">println</span> gradle.gradleVersion</span><br></pre></td></tr></table></figure><ul><li>プロパティ</li></ul><table><thead><tr><th>プロパティ</th><th>概要</th></tr></thead><tbody><tr><td>gradleHomeDir</td><td>Gradleホームディレクトリを保持する</td></tr><tr><td>gradleUserHomeDir</td><td>ホームディレクトリを保持する</td></tr><tr><td>gradleVersion</td><td>実行するGradleのバージョンを保持する</td></tr><tr><td>rootProject</td><td>ルートプロジェクトを保持する</td></tr><tr><td>startParameter</td><td>ビルド実行時のパラメータを保持する</td></tr><tr><td>taskGraph</td><td>当該ビルドのタスクグラフを保持する</td></tr></tbody></table><ul><li>主要なAPI<ul><li>イベントリスナーについて紹介</li><li>TODO: 処理順などまとめる</li></ul></li></ul><h4 id="6-2-4-Settingsオブジェクト"><a href="#6-2-4-Settingsオブジェクト" class="headerlink" title="6.2.4 Settingsオブジェクト"></a>6.2.4 Settingsオブジェクト</h4><p>Settingsオブジェクトは設定スクリプトを表すドメインオブジェクトで、設定スクリプトから移譲される<br>設定スクリプトはマルチプロジェクトのためだけのものではない</p><ul><li>プロパティ<ul><li>Settingsオブジェクトは設定フェーズで生成されて使用されますが、</li><li>その段階で扱える情報は自分自身の情報を除くと、Gradleオブジェクトとルートプロジェクトの情報ぐらい</li></ul></li></ul><p>TODO: マルチプロジェクト作成時に再度確認しておく</p><h4 id="6-2-5-ExtensionAwareオブジェクト"><a href="#6-2-5-ExtensionAwareオブジェクト" class="headerlink" title="6.2.5 ExtensionAwareオブジェクト"></a>6.2.5 ExtensionAwareオブジェクト</h4><p>ビルド実行時にGradleドメインオブジェクトを他のオブジェクトで拡張可能にするためのドメインオブジェクト</p><p>ExtensionAwareオブジェクトには、extensionsという拡張プロパティを格納するためのコンテナがあり、<br>Projectオブジェクト、TaskオブジェクトなどのGradleドメインオブジェクトの多くは、これに独自のプロパティ追加できる</p><p>TODO: メリットがいまいちつかめなかった</p><h4 id="6-2-6-ExtraPropertiesExtensionオブジェクト"><a href="#6-2-6-ExtraPropertiesExtensionオブジェクト" class="headerlink" title="6.2.6 ExtraPropertiesExtensionオブジェクト"></a>6.2.6 ExtraPropertiesExtensionオブジェクト</h4><p>ProjectオブジェクトやTaskオブジェクトなどで、extの名前で定義されている拡張プロパティの実態クラス<br>ExtraPropertiesExtensionオブジェクトをはpropertiesというプロパティを持ち、そこにキーとバリューで任意のオブジェクトを保持<br>そして、has(),set(),get()の３つのAPIを提供し、propertiesに指定のキーが存在するかの確認、キーと値の設定や取得ができる</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">project.ext.property = <span class="string">'extに追加下プロパティです。'</span></span><br><span class="line">println <span class="string">'拡張プロパティの値 :'</span> + project.property</span><br><span class="line"></span><br><span class="line">project.ext[<span class="string">'property'</span>] = <span class="string">'extに追加したプロパティです。'</span></span><br><span class="line">println <span class="string">'拡張プロパティの値:'</span> + project.ext[<span class="string">'property'</span>]</span><br><span class="line"></span><br><span class="line">project.ext &#123;</span><br><span class="line">  prop1 = <span class="string">'aaa'</span></span><br><span class="line">  prop2 = <span class="string">'bbb'</span></span><br><span class="line">&#125;</span><br><span class="line">println project.ext.prop1 + project.ext.prop2</span><br></pre></td></tr></table></figure><h4 id="6-3-タスクの記述"><a href="#6-3-タスクの記述" class="headerlink" title="6.3 タスクの記述"></a>6.3 タスクの記述</h4><h4 id="6-3-1-タスクの定義方法"><a href="#6-3-1-タスクの定義方法" class="headerlink" title="6.3.1 タスクの定義方法"></a>6.3.1 タスクの定義方法</h4><ul><li>ビルドフェーズ<ul><li>初期化フェーズ</li><li>設定フェーズ</li><li>実行フェーズ</li></ul></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">task</span> hello <span class="keyword">doLast</span> &#123;</span><br><span class="line">  <span class="keyword">println</span> name + <span class="string">': Hello Gradle World!'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 設定のためのブロックとなるため設定フェーズで実行される</span></span><br><span class="line"><span class="keyword">task</span> hello2 &#123;</span><br><span class="line">  <span class="keyword">println</span> name + <span class="string">': Hello Gradle World!'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// descriptionプロパティを出力する例</span></span><br><span class="line"></span><br><span class="line">showDescription <span class="keyword">doLast</span> &#123;</span><br><span class="line">  <span class="keyword">println</span> <span class="keyword">description</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">task</span> showDescription.<span class="keyword">description</span> = <span class="string">'showDescriptionタスクです。'</span></span><br><span class="line"><span class="comment">// 順序に違和感があるかもしれないがこの順番で記述しないと行けない</span></span><br></pre></td></tr></table></figure><ul><li>Task型を使用した定義<ul><li>Gradleにはあらかじめ特定のアクションを行うための汎用のタスクが数多く用意されている</li><li>それらは独自のタスクを定義する際に利用できる</li><li>汎用タスクはGradle本体が提供する標準のものと、</li><li>プラグインを適用することで追加されるおのがある</li></ul></li></ul><table><thead><tr><th>タスク型</th><th>概要</th></tr></thead><tbody><tr><td>Copy</td><td>ターゲットとするディレクトリにファイルをコピーする</td></tr><tr><td>Delete</td><td>指定されたファイルまたはディレクトリを削除する</td></tr><tr><td>Exec</td><td></td></tr><tr><td>JavaExec</td><td></td></tr><tr><td>Sync</td><td></td></tr><tr><td>Tar</td><td></td></tr><tr><td>Zip</td><td></td></tr></tbody></table><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// これはmyCopyというタスクをCopy型で定義するという記述</span></span><br><span class="line"><span class="keyword">task</span> myCopy(type: <span class="keyword">Copy</span>) &#123;</span><br><span class="line">  <span class="keyword">from</span> <span class="string">'original'</span></span><br><span class="line">  to <span class="string">'target'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">task</span> myCopyExtension(type: <span class="keyword">Copy</span>)&#123;</span><br><span class="line">  <span class="keyword">from</span> <span class="string">'original'</span></span><br><span class="line">  to <span class="string">'target'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">File</span> newFile = <span class="keyword">file</span>(<span class="string">'original/newFile.txt'</span>)</span><br><span class="line">  <span class="keyword">doFirst</span> &#123;</span><br><span class="line">    <span class="keyword">println</span> <span class="string">'コピー元のファイルに書き込みします'</span></span><br><span class="line">    newFile.<span class="keyword">write</span>(<span class="string">'コピー用のファイルです。'</span>,<span class="string">'UTF-8'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">doLast</span> &#123;</span><br><span class="line">    <span class="keyword">File</span> copied = <span class="keyword">file</span>(<span class="string">'original/newFile_copied.txt'</span>)</span><br><span class="line">    <span class="keyword">if</span> (newFile.renameTo(copied)) &#123;</span><br><span class="line">      <span class="keyword">println</span> <span class="string">'コピーが完了しました。'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">println</span> <span class="string">'コピーできませんでした。'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>動的なタスクの定義<ul><li>複数のサーバーインスタンスをしよいうしている場合に、サーバーごとにIPアドレスを出力するタスクを作成したい場合</li></ul></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> instances = [<span class="string">'AppServer'</span>:<span class="string">'192.0.2.10'</span>,<span class="string">'DBServer'</span>:<span class="string">'192.0.2.20'</span>,<span class="string">'MailServer'</span>:<span class="string">'192.0.2.30'</span>]</span><br><span class="line"></span><br><span class="line">instances.<span class="keyword">each</span> &#123; serverType, ipAddress -&gt;</span><br><span class="line">  <span class="keyword">task</span> <span class="string">"show$&#123;serverType&#125;"</span> <span class="keyword">doLast</span> &#123;</span><br><span class="line">    <span class="keyword">println</span> ipAddress</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 便利な記載方法だが、Groovyの書き方なれてないと理解出来なさそう</span></span><br></pre></td></tr></table></figure><h4 id="6-3-2-依存関係の定義方法"><a href="#6-3-2-依存関係の定義方法" class="headerlink" title="6.3.2 依存関係の定義方法"></a>6.3.2 依存関係の定義方法</h4><p>dependsOnというプロパティを使って定義ができる</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">doing.dependsOn todo</span><br><span class="line">done.dependsOn doing</span><br><span class="line"></span><br><span class="line">done.dependsOn doing, reviewing</span><br><span class="line"></span><br><span class="line">done.dependsOn &#123;</span><br><span class="line">  tasks.<span class="keyword">findAll</span> &#123; <span class="keyword">task</span> -&gt; <span class="keyword">task</span>.name ==~ <span class="regexp">/.*ing/</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-3-タスクルールの定義方法"><a href="#6-3-3-タスクルールの定義方法" class="headerlink" title="6.3.3 タスクルールの定義方法"></a>6.3.3 タスクルールの定義方法</h4><p>異なる設定やパラメータに対して同じような処理を指せる場合には、似た名前のタスクを必要な数だけ作成する必要がある<br>そのような場合はタスクにルールをもたせることで簡潔に記述できる</p><p>javaのCleanの例</p><p><code>gradle cleanTest</code><br><code>gradle cleanJar</code><br>などと指定すると、それぞれのディレクトリのみ削除できる</p><p>これは、clean&lt;タスク名&gt;というルールを定義することで実現している</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tasks.addRule(<span class="string">'Pattern: show&lt;TASKS_NAME&gt;: Show task name.'</span>) &#123; taskName -&gt;</span><br><span class="line">  <span class="keyword">if</span> (taskName.startsWith(<span class="string">'show'</span>)) &#123;</span><br><span class="line">    <span class="keyword">task</span>(taskName) <span class="keyword">doLast</span> &#123;</span><br><span class="line">      <span class="keyword">println</span> <span class="string">'*** '</span> + taskName + <span class="string">' ***'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定型的な処理はこのようなルールを作成して定義しておくとよい！！<br>MEMO: これは便利だと思う</p><h4 id="6-3-4-タスクの制御"><a href="#6-3-4-タスクの制御" class="headerlink" title="6.3.4 タスクの制御"></a>6.3.4 タスクの制御</h4><ul><li>タスクの制御方法<ul><li>処理内容の制御：組み込みタスクの処理内容は、タスクを再定義して処理を上書くことで既存の処理内容を変更できる</li><li>実行可否の制御：タスクの事項条件を判定し、タスクの実行可否を制御できる</li><li>実行順の制御：依存関係以外にも順序付けやファイナライザータスクの指定などで、タスクの実行順を制御できる</li></ul></li></ul><h4 id="6-3-5-タスクの上書き"><a href="#6-3-5-タスクの上書き" class="headerlink" title="6.3.5 タスクの上書き"></a>6.3.5 タスクの上書き</h4><p>タスクを上書きする場合、同じタスク名でoverwriteプロパティを有効にして処理を定義するだけ</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'java'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> assemble(overwrite: <span class="keyword">true</span>) <span class="keyword">doLast</span> &#123;</span><br><span class="line">  <span class="keyword">println</span> <span class="string">'上書きしました。'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-6-タスクの条件実行"><a href="#6-3-6-タスクの条件実行" class="headerlink" title="6.3.6 タスクの条件実行"></a>6.3.6 タスクの条件実行</h4><p>条件によって実行するかしないか制御したい場合</p><p>onlyIf()を使用する</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">task</span> specialTask <span class="keyword">doLast</span> &#123;</span><br><span class="line">  <span class="keyword">println</span> <span class="string">'特別な処理を実行'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">specialTask.onlyIf &#123;</span><br><span class="line">  buildType == <span class="string">'partial-build'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gradle -PbuildType=partial-build specialTask</code></p><h4 id="6-3-7-タスクの順序付け"><a href="#6-3-7-タスクの順序付け" class="headerlink" title="6.3.7 タスクの順序付け"></a>6.3.7 タスクの順序付け</h4><p>mustRunAfterとshouldRunAfterの使い方<br>MEMO: あまり意識することなさそうなので割愛</p><h4 id="6-3-8-ファイナライザータスク"><a href="#6-3-8-ファイナライザータスク" class="headerlink" title="6.3.8 ファイナライザータスク"></a>6.3.8 ファイナライザータスク</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例外が起きても実行される</span></span><br><span class="line">normalTask.finalizedBy finalizerTask</span><br></pre></td></tr></table></figure><h4 id="6-4-プラグインの記述"><a href="#6-4-プラグインの記述" class="headerlink" title="6.4 プラグインの記述"></a>6.4 プラグインの記述</h4><h4 id="6-4-1-Gradleにおけるプラグイン"><a href="#6-4-1-Gradleにおけるプラグイン" class="headerlink" title="6.4.1 Gradleにおけるプラグイン"></a>6.4.1 Gradleにおけるプラグイン</h4><p>apply()を呼ぶことでプラグインが提供するタスクやプロパティが当該のビルド処理で利用できるようになる</p><h4 id="6-4-2-プラグインの適用方法"><a href="#6-4-2-プラグインの適用方法" class="headerlink" title="6.4.2 プラグインの適用方法"></a>6.4.2 プラグインの適用方法</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'java'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>.apply(plugin:<span class="string">'java'</span>)</span><br></pre></td></tr></table></figure><p>このように記述すると「このビルドスクリプトのProjectオブジェクトにJavaプラグインを適用させている」ということがわかる<br>‘java’はプラグインIDと呼ばれるもの<br>万が一プラグインIDがなければ、Pluginインターフェースを実装下クラスを指定することで、そのプラグインを適用できる</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: org.gradle.api.plugins.JavaPlugin</span><br></pre></td></tr></table></figure><p>プラグインにはGradle標準以外にも、GithubやMaven Centralリポジトリなどで公開されているものがあります<br>Gradleからみて外部にあるプラグインを利用するには、そのプラグインをダウンロードして読み込む必要があり、プラグインの適用方法も異なります</p><p>外部のプラグインを適用する場合は、buildscriptスクリプトブロックにプラグインのある場所とプラグインへの依存関係を設定し、通常のapply()でプラグインを適用</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">  <span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">classpath</span> <span class="string">'org.hidetake: gradle-ssh-plugin:0.1.10'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">'ssh'</span></span><br></pre></td></tr></table></figure><ul><li>Gradle2.1 のプラグイン適用方法<ul><li>今後はこれが主流になるので覚えておきましょう</li></ul></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Javaプラグイン</span></span><br><span class="line">plugins &#123;</span><br><span class="line">  id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plugins &#123;</span><br><span class="line">  id <span class="string">'org.gradle.java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plugins &#123;</span><br><span class="line">  id <span class="string">'com.example.exampleplugin'</span> version: <span class="string">'1.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-5-マルチプロジェクトでのスクリプトファイルの記述"><a href="#6-5-マルチプロジェクトでのスクリプトファイルの記述" class="headerlink" title="6.5 マルチプロジェクトでのスクリプトファイルの記述"></a>6.5 マルチプロジェクトでのスクリプトファイルの記述</h4><h4 id="6-5-1-レイアウトと記述方法のバリエーション"><a href="#6-5-1-レイアウトと記述方法のバリエーション" class="headerlink" title="6.5.1 レイアウトと記述方法のバリエーション"></a>6.5.1 レイアウトと記述方法のバリエーション</h4><p>TODO: 直近使わないので一旦飛ばす</p><h3 id="第7章-依存関係の管理"><a href="#第7章-依存関係の管理" class="headerlink" title="第7章 依存関係の管理"></a>第7章 依存関係の管理</h3><h4 id="7-1-依存関係管理の目的"><a href="#7-1-依存関係管理の目的" class="headerlink" title="7.1 依存関係管理の目的"></a>7.1 依存関係管理の目的</h4><p>Gradleを始めとする多くのビルドツールや統合開発環境において、依存関係とは、「そのビルドの外で作成された成果物への参照」のことを指す</p><ul><li>依存関係解決の自動化<ul><li>設定を書いておくと、任意の場所から必要なファイルをダウンロードまたはコピーしてきてプロジェクトに取り込んでくれる</li></ul></li><li>推移的な依存関係の管理<ul><li>必要な外部ファイルが、さらに別の外部ファイルを必要としていないか把握したり、管理したりできる</li></ul></li><li>依存関係の可視化<ul><li>プロジェクトがどの外部ファイルのどのバージョンに依存しているか、かんたんに表示できる</li></ul></li></ul><p>これら３つの目的を達成するのが本章のテーマ</p><h4 id="7-2-依存関係解決の自動化"><a href="#7-2-依存関係解決の自動化" class="headerlink" title="7.2 依存関係解決の自動化"></a>7.2 依存関係解決の自動化</h4><ul><li>これら順を追って、ビルドスクリプトの依存関係の設定で使っている<ul><li>configrations</li><li>dependencies<ul><li>といった設定項目について紹介</li></ul></li></ul></li></ul><h4 id="7-2-1-コンフィグレーション"><a href="#7-2-1-コンフィグレーション" class="headerlink" title="7.2.1 コンフィグレーション"></a>7.2.1 コンフィグレーション</h4><p>多くのビルドツールでは依存関係をグループに分けて設定しており、Gradleもグループの概念がある</p><p>Mavenにはスコープという概念があり、すべての依存関係はcmpileスコープ、runtimeスコープといったグループに属すように定義することになっている<br>GradleにはMavenのようにあらかじめ定義されているグループはないので、まずどのようなグループが必要化をビルドスクリプトで定義しなければいけない</p><p>この依存関係を分類するグループをGradleではコンフィグレーションと呼びます<br>これを使って、依存関係を分類します。<br>これはMavenのスコープとほぼ同義です</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">configurations</span> &#123;</span><br><span class="line">  conf1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-2-依存関係の定義"><a href="#7-2-2-依存関係の定義" class="headerlink" title="7.2.2 依存関係の定義"></a>7.2.2 依存関係の定義</h4><p>コンフィグレーションを定義しｔら、次はそのコンフィグレーションに割り当てる依存関係を定義</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  conf1 files(<span class="string">"libs/sample-lib.jar"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>依存関係の指定方法</p><ul><li>外部モジュール依存関係<ul><li>インターネット上のMavenリポジトリなどからファイルをダウンロードする。リポジトリの定義が別途必要</li></ul></li><li>ファイル依存関係<ul><li>ファイルシステム上のファイルを参照</li></ul></li><li>プロジェクト依存関係<ul><li>あるプロジェクトから別のプロジェクトの成果物を参照</li></ul></li><li>GradleAPI依存関係<ul><li>現在使用しているGradleのAPIが含まれるライブラリファイルへの依存関係</li></ul></li><li>ローカルGroovy依存関係<ul><li>現在使用しているGradleが同梱しているGroovyへの依存関係</li></ul></li></ul></li><li><p>外部モジュール依存関係</p><ul><li>おおよそ理解できているので割愛</li></ul></li><li><p>ファイル依存関係</p><ul><li>おおよそ理解できているので割愛</li></ul></li><li><p>プロジェクト依存関係</p></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  <span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">':shared'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ルートプロジェクトの直下にあるsharedプロジェクトへの依存関係を宣言している<br>プロジェクト階層は:区切り</p><ul><li>GradleAPI依存関係<ul><li>ビルドに使用しているGradleのAPIを参照するための依存関係</li><li>Gradleのプラグインやタスクを作成するときなど、Gradle自体を拡張するときに使う</li></ul></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  conf1 gradleApi()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> showDeps <span class="keyword">doLast</span> &#123;</span><br><span class="line">  configuration.conf1.<span class="keyword">each</span> &#123;</span><br><span class="line">    <span class="keyword">println</span> it.absolutePath</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ローカルGroovy依存関係<ul><li>ビルド似使用しているGradle似同梱されているGroovyを参照するための依存関係で、次の用にlocalGroovyを呼び出して指定</li></ul></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  conf1 localGroovy()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> showDeps <span class="keyword">doLast</span> &#123;</span><br><span class="line">  <span class="keyword">configurations</span>.conf1.<span class="keyword">each</span> &#123;</span><br><span class="line">    <span class="keyword">println</span> it.absolutePath</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-3-コンフィグレーションの継承"><a href="#7-2-3-コンフィグレーションの継承" class="headerlink" title="7.2.3 コンフィグレーションの継承"></a>7.2.3 コンフィグレーションの継承</h4><p>依存関係のコンフィグレーションは、ほかのコンフィグレーションを継承できる</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">configurations</span> &#123;</span><br><span class="line">  conf1</span><br><span class="line">  testConf1.extendsFrom conf1 <span class="comment">// testConf1はconf1の依存関係も含む</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  conf1 <span class="keyword">group</span>: <span class="string">'org.codehaus.groovy'</span>, name: <span class="string">'groovy-all'</span>, version: <span class="string">'2.3.1'</span></span><br><span class="line">  testConf1 <span class="keyword">group</span>: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.11'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> showDeps <span class="keyword">doLast</span> &#123;</span><br><span class="line">  <span class="keyword">configurations</span>.testConf1.<span class="keyword">each</span> &#123;</span><br><span class="line">    <span class="keyword">println</span> it.absolutePath</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>★用途<ul><li>テスト用のコンフィグレーションにプロダクト用のコンフィグレーションも含めたい<ul><li>といった用途によく利用される</li></ul></li></ul></li></ul><h4 id="7-2-4-リポジトリ定義"><a href="#7-2-4-リポジトリ定義" class="headerlink" title="7.2.4 リポジトリ定義"></a>7.2.4 リポジトリ定義</h4><p>外部モジュールの依存関係は、依存関係を取得する外部リポジトリを設定しなくてはいけない</p><ul><li>Mavenリポジトリ</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">  maven &#123;</span><br><span class="line">    url <span class="string">'http://'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Maven Central リポ維持鳥<ul><li>よく利用される一部のリポジトリについては、URLを指定しなくてもリポジトリを指定できる</li></ul></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">  mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ローカルリポジトリも以下の様に記載できる</span></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">  mavenLocal()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jcenter mavenリポジトリも</span></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">  jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ivyリポジトリも</span></span><br><span class="line"><span class="comment">// 使う予定はあまりないので一旦割愛</span></span><br></pre></td></tr></table></figure><ul><li>パスワードで保護されたリポジトリ</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">  maven &#123;</span><br><span class="line">    url <span class="string">'http://xxxx'</span></span><br><span class="line">  &#125;</span><br><span class="line">  credentials &#123;</span><br><span class="line">    username <span class="string">'user'</span></span><br><span class="line">    password <span class="string">'pass'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>セキュリティ上、認証情報はビルドスクリプトに直書きするのではなく、どこかバージョン管理システム似コミットされない外部ファイルに記述してそれを参照するのがいい</p><p>gradle.propertiesに記述例を紹介</p><ul><li>フラとディレクトリリポジトリ<ul><li>ローカルファイルシステム上の単純なディレクトリをリポジトリとして指定できる</li><li>ファイルシステムで共有している場合だったり、ライブラリをバージョン管理システムにあげている場合だったり</li></ul></li></ul><h4 id="7-2-5-動的バージョンと変更性モジュール"><a href="#7-2-5-動的バージョンと変更性モジュール" class="headerlink" title="7.2.5 動的バージョンと変更性モジュール"></a>7.2.5 動的バージョンと変更性モジュール</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">configurations</span> &#123;</span><br><span class="line">  conf1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  conf1 <span class="string">'org.slf4j:slf4j-api:1.7.+'</span> <span class="comment">// 1.7系のうち最新版を取得</span></span><br><span class="line">  conf1 <span class="string">'commons-cli:commons-cli:latest.integration'</span> <span class="comment">// 不安定版も含めて最新版を取得</span></span><br><span class="line">  conf1 <span class="string">'junit:junit:latest.release'</span> <span class="comment">// 不安定版の最新版を取得</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-推移的な依存関係の管理"><a href="#7-3-推移的な依存関係の管理" class="headerlink" title="7.3 推移的な依存関係の管理"></a>7.3 推移的な依存関係の管理</h4><p>依存関係に指定したJARファイルなどが更に別のファイルを必要としている場合について<br>名自適に指定した依存関係から依存関係が再帰的に派生することを「推移的な依存関係」とよびます</p><h4 id="7-3-1-競合の解決"><a href="#7-3-1-競合の解決" class="headerlink" title="7.3.1 競合の解決"></a>7.3.1 競合の解決</h4><p>推移的な依存関係を管理する場合、避けて通れない問題が、依存関係のバージョン競合</p><ul><li><p>同じ依存のあるモジュールのバージョン違いをどのように解消するか</p></li><li><p>２つ解決策がある</p><ul><li>Newest戦略（デフォルト）<ul><li>取得した依存関係のバージョンが競合した場合、最も新しいバージョンの依存関係を使用</li></ul></li><li>Fail戦略<ul><li>競合した場合は例外を発行してビルドを失敗させる</li></ul></li></ul></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fail戦略を使う場合</span></span><br><span class="line"><span class="keyword">configurations</span>.testConf1 &#123;</span><br><span class="line">  resolutionStrategy &#123;</span><br><span class="line">    failOnVersionConflict() <span class="comment">// Fail戦略を採用する</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-2-推移的な依存関係の除外設定"><a href="#7-3-2-推移的な依存関係の除外設定" class="headerlink" title="7.3.2 推移的な依存関係の除外設定"></a>7.3.2 推移的な依存関係の除外設定</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fail戦略を使う場合</span></span><br><span class="line"><span class="keyword">configurations</span>.testConf1 &#123;</span><br><span class="line">  resolutionStrategy &#123;</span><br><span class="line">    failOnVersionConflict() <span class="comment">// Fail戦略を採用する</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">  conf1 <span class="keyword">group</span>: <span class="string">''</span></span><br><span class="line">  testConf1(<span class="keyword">group</span>: <span class="string">''</span>,name: <span class="string">''</span>,version:<span class="string">''</span>)&#123;</span><br><span class="line">    <span class="keyword">exclude</span> module: <span class="string">'groovy-all'</span> <span class="comment">// 依存関係から除外する！</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-3-使用するバージョンの強制"><a href="#7-3-3-使用するバージョンの強制" class="headerlink" title="7.3.3 使用するバージョンの強制"></a>7.3.3 使用するバージョンの強制</h4><ul><li><p>バージョン指定して記載するってこと</p></li><li><p>forceで強制している？</p></li><li><p>TODO: 必要になった際に再確認</p></li></ul><h4 id="クライアントモジュール依存関係"><a href="#クライアントモジュール依存関係" class="headerlink" title="クライアントモジュール依存関係"></a>クライアントモジュール依存関係</h4><ul><li><p>用途</p><ul><li>依存しているモジュールのメタデータが誤っていたので上書きたい</li><li>導入したモジュールに依存している別のライブラリがあった</li></ul></li><li><p>あまり使わないとおもったので割愛</p></li></ul><h4 id="7-4-使用しているモジュールの調査"><a href="#7-4-使用しているモジュールの調査" class="headerlink" title="7.4 使用しているモジュールの調査"></a>7.4 使用しているモジュールの調査</h4><p>ここでは、さらに依存関係を管理する目的の一つ、使用しているモジュールの調査方法を紹介</p><p>具体的には、Gradleが用意している依存関係のレポート用タスク、dependenciesタスクが本節のテーマ</p><p><code>gradel dependencies</code> で実行できる</p><p>依存関係をグラフ化して表示することができる</p><h4 id="7-5-キャッシュ制御とオフライン実行"><a href="#7-5-キャッシュ制御とオフライン実行" class="headerlink" title="7.5 キャッシュ制御とオフライン実行"></a>7.5 キャッシュ制御とオフライン実行</h4><h4 id="7-5-1-キャッシュ制御"><a href="#7-5-1-キャッシュ制御" class="headerlink" title="7.5.1 キャッシュ制御"></a>7.5.1 キャッシュ制御</h4><p>ビルドツールでは、一般的に一度解決した依存関係を再利用できるよう、ローカルマシンに依存関係をキャッシュする<br>ただGradleのキャシュ管理は他のビルドツールに比べて複雑</p><ul><li>次に該当する場合、ネットワークへのアクセスが派生する場合がある<ul><li>repositoriesブロックで、ネットワーク上にあるリポジトリが定義されている</li><li>依存関係のうち、「外部モジュール依存関係」が使用されている</li></ul></li></ul><p>できるだけネットワークアクセスを削減できるように、チェックサムと一致するファイルがキャッシュにあれば、それを使用するような仕組みになっている</p><h4 id="7-5-2-オフライン実行"><a href="#7-5-2-オフライン実行" class="headerlink" title="7.5.2 オフライン実行"></a>7.5.2 オフライン実行</h4><p><code>gradle --offline showDeps</code><br>オフラインで、キャッシュを使ってビルドする<br>キャッシュをつかってビルドできなければ、失敗する</p><ul><li>外部ネットワークとつながらない状態でビルドすることもできる</li><li>イントラネット内にリポジトリサーバーを立てる方法紹介</li></ul><h2 id="第3部［実践編］"><a href="#第3部［実践編］" class="headerlink" title="第3部［実践編］"></a>第3部［実践編］</h2><h3 id="第8章-Gradle-でのテスト"><a href="#第8章-Gradle-でのテスト" class="headerlink" title="第8章 Gradle でのテスト"></a>第8章 Gradle でのテスト</h3><p>Gradleのビルドタスクはプロダクションコードのコンパイルだけでなく、テストコードの粉ピルとテストの実行も行う<br>Gradleを導入してビルドを行うだけで、テストを自動化できる環境が手に入ることになる<br>テストを自動化するにあたって、どのような要件があり、Gradleでどう解決できるかを把握しておく必要がある</p><h4 id="8-1-テストの自動化とビルドツール"><a href="#8-1-テストの自動化とビルドツール" class="headerlink" title="8.1 テストの自動化とビルドツール"></a>8.1 テストの自動化とビルドツール</h4><h4 id="8-1-1-テストを取り巻く状況"><a href="#8-1-1-テストを取り巻く状況" class="headerlink" title="8.1.1 テストを取り巻く状況"></a>8.1.1 テストを取り巻く状況</h4><h4 id="8-1-2-自動テスト似おけるビルドツールの要件"><a href="#8-1-2-自動テスト似おけるビルドツールの要件" class="headerlink" title="8.1.2 自動テスト似おけるビルドツールの要件"></a>8.1.2 自動テスト似おけるビルドツールの要件</h4><p>CI導入が一般的になったことで今やCIツールとの親和性は必須の要件</p><ul><li>特に以下の３点は重要<ul><li>環境の差異が吸収できること</li><li>特定の範囲でテストを実行できること</li><li>スローテストを軽減できる仕組みをもっていること<ul><li>実行に非常に時間がかかるテストは「スローテスト」と呼ばれ、</li><li>開発プロジェクトを妨げる問題として、しばしば取り上げられるようになった</li><li>ビルドツールがあれば暫定対応が容易にできるでしょう</li></ul></li></ul></li></ul><h4 id="8-2-Gradleによるアプローチ"><a href="#8-2-Gradleによるアプローチ" class="headerlink" title="8.2 Gradleによるアプローチ"></a>8.2 Gradleによるアプローチ</h4><p>Gradleは前述のビルドツールの要件をすべて満たしている<br>かんたんにかけるので紹介します</p><h4 id="8-2-1-環境差異の吸収"><a href="#8-2-1-環境差異の吸収" class="headerlink" title="8.2.1 環境差異の吸収"></a>8.2.1 環境差異の吸収</h4><ul><li><p>ビルドツールなら環境差異を吸収する仕組みを持っていることはあたりまえだが、</p></li><li><p>Gradleならシンプルにかける</p></li><li><p>方法は２つ</p><ul><li>環境ごとにファイルを用意する</li><li>１ファイル内でグループ化して切り替える</li></ul></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// dev</span></span><br><span class="line">ext.app_url = <span class="string">'localhost'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pro</span></span><br><span class="line">ext.app_url = <span class="string">'xxx.xxx.xxx.xxx'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// build.gradle</span></span><br><span class="line">apply <span class="keyword">from</span>: <span class="string">"environments/$&#123;env&#125;/env.gradle"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> showURL &lt;&lt; &#123;</span><br><span class="line">  <span class="keyword">println</span> <span class="string">"App Server: $&#123;app_url&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// env.conf</span></span><br><span class="line">environments &#123;</span><br><span class="line">  dev &#123;</span><br><span class="line">    app_url = <span class="string">'localhost'</span></span><br><span class="line">  &#125;</span><br><span class="line">  production &#123;</span><br><span class="line">    app_url = <span class="string">'xxx.xxx.xxx.xxx'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// build.gradle</span></span><br><span class="line"><span class="keyword">task</span> showURL &lt;&lt; &#123;</span><br><span class="line">  <span class="keyword">def</span> url = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">'config/env.conf'</span>).toURL()</span><br><span class="line">  <span class="keyword">def</span> config = <span class="keyword">new</span> ConfigSlurper(<span class="string">"$env"</span>).parse(url)</span><br><span class="line">  <span class="keyword">println</span> <span class="string">'App Server: '</span> + config.app_url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-2-特定の範囲でテストを実行できること"><a href="#8-2-2-特定の範囲でテストを実行できること" class="headerlink" title="8.2.2 特定の範囲でテストを実行できること"></a>8.2.2 特定の範囲でテストを実行できること</h4><ul><li>種類<ul><li>パターンマッチングで特定して実行する</li><li>テスティングフレームワークの機能を利用して実行する</li><li>ソースセット単位で実行する</li></ul></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'java'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceCompatibility</span> = <span class="number">1.7</span></span><br><span class="line"><span class="keyword">targetCompatibility</span> = <span class="number">1.7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> defaultEncoding = <span class="string">'UTF-8'</span></span><br><span class="line">[compileJava, compileTestJava]*.<span class="keyword">options</span>*.encoding = defaultEncoding</span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    testCompile <span class="string">'junit:junit:4.11'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">filter &#123;</span><br><span class="line">includeTestsMatching <span class="string">'*UT'</span></span><br><span class="line">&#125;</span><br><span class="line">reports.html.destination = <span class="keyword">file</span>(<span class="string">"$&#123;reports.html.destination&#125;/unit"</span>)</span><br><span class="line">reports.junitXml.destination = <span class="keyword">file</span>(<span class="string">"$&#123;reports.junitXml.destination&#125;/unit"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> integrationTest(type: Test) &#123;</span><br><span class="line">filter &#123;</span><br><span class="line">includeTestsMatching <span class="string">'*IT'</span></span><br><span class="line">&#125;</span><br><span class="line">reports.html.destination = <span class="keyword">file</span>(<span class="string">"$&#123;reports.html.destination&#125;/integration"</span>)</span><br><span class="line">reports.junitXml.destination = <span class="keyword">file</span>(<span class="string">"$&#123;reports.junitXml.destination&#125;/integration"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TODO: 残りの説明割愛、必要になったら見返す</p><h4 id="8-2-3-スローテスト対策"><a href="#8-2-3-スローテスト対策" class="headerlink" title="8.2.3 スローテスト対策"></a>8.2.3 スローテスト対策</h4><h3 id="第9章-Android-プロジェクトでの適用"><a href="#第9章-Android-プロジェクトでの適用" class="headerlink" title="第9章 Android プロジェクトでの適用"></a>第9章 Android プロジェクトでの適用</h3><h3 id="第10章-統合開発環境（IDE）との連携"><a href="#第10章-統合開発環境（IDE）との連携" class="headerlink" title="第10章 統合開発環境（IDE）との連携"></a>第10章 統合開発環境（IDE）との連携</h3><h2 id="第4部発展編"><a href="#第4部発展編" class="headerlink" title="第4部発展編"></a>第4部発展編</h2><h3 id="第11章-Jenkins-との連携"><a href="#第11章-Jenkins-との連携" class="headerlink" title="第11章 Jenkins との連携"></a>第11章 Jenkins との連携</h3><h3 id="第12章-アーカイブの作成とファイルの公開"><a href="#第12章-アーカイブの作成とファイルの公開" class="headerlink" title="第12章 アーカイブの作成とファイルの公開"></a>第12章 アーカイブの作成とファイルの公開</h3><h3 id="第13章-エキスパートへの道"><a href="#第13章-エキスパートへの道" class="headerlink" title="第13章 エキスパートへの道"></a>第13章 エキスパートへの道</h3><h3 id="第14章-ほかのビルドツールからの移行"><a href="#第14章-ほかのビルドツールからの移行" class="headerlink" title="第14章 ほかのビルドツールからの移行"></a>第14章 ほかのビルドツールからの移行</h3><h2 id="付録-Gradleリファレンス"><a href="#付録-Gradleリファレンス" class="headerlink" title="付録 Gradleリファレンス"></a>付録 Gradleリファレンス</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Gradle徹底入門-次世代ビルドツールによる自動化基盤の構築&quot;&gt;&lt;a href=&quot;#Gradle徹底入門-次世代ビルドツールによる自動化基盤の構築&quot; class=&quot;headerlink&quot; title=&quot;Gradle徹底入門 次世代ビルドツールによる自動化基盤の構</summary>
      
    
    
    
    <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2徹底活用</title>
    <link href="http://yoursite.com/JAVA/2020-06_SpringBoot2%E5%BE%B9%E5%BA%95%E6%B4%BB%E7%94%A8/"/>
    <id>http://yoursite.com/JAVA/2020-06_SpringBoot2%E5%BE%B9%E5%BA%95%E6%B4%BB%E7%94%A8/</id>
    <published>2020-06-06T15:00:00.000Z</published>
    <updated>2020-07-14T01:58:04.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="現場至上主義SpringBoot2徹底活用"><a href="#現場至上主義SpringBoot2徹底活用" class="headerlink" title="現場至上主義SpringBoot2徹底活用"></a>現場至上主義SpringBoot2徹底活用</h1><h2 id="理解したこと"><a href="#理解したこと" class="headerlink" title="理解したこと"></a>理解したこと</h2><ul><li>Gradleを使ったビルドができる</li></ul><h2 id="書籍情報"><a href="#書籍情報" class="headerlink" title="書籍情報"></a>書籍情報</h2><ul><li><p>著者</p><ul><li>廣末 丈士／宮林 岳洋 著、高安 厚思 監修</li></ul></li><li><p>定価</p><ul><li>3,456円（本体価格　3,200円）</li></ul></li><li><p>発売日</p><ul><li>2018年11月30日</li></ul></li><li><p>ISBN</p><ul><li>978-4-8026-1185-5</li></ul></li><li><p>目次</p><ul><li>第1章 Spring Bootの構成</li><li>第2章 Webアプリケーションにおける共通処理</li><li>第3章 データアクセス</li><li>第4章 セキュリティ</li><li>第5章 画面開発</li><li>第6章 API開発</li><li>第7章 チーム開発</li><li>第8章 運用</li><li>第9章 （Spring Bootアプリケーションが想定している）システム構成</li><li>第10章 Spring5&#x2F;Spring Boot2の新機能</li><li>第11章 ローカル開発環境の構築について</li><li>第12章 サンプルアプリについて</li></ul></li><li><p>サンプルプログラム</p><ul><li><a href="https://github.com/miyabayt/spring-boot-doma2-sample">https://github.com/miyabayt/spring-boot-doma2-sample</a></li></ul></li></ul><h2 id="第1章-Spring-Bootの構成"><a href="#第1章-Spring-Bootの構成" class="headerlink" title="第1章 Spring Bootの構成"></a>第1章 Spring Bootの構成</h2><h3 id="1-1-SpringBootの基礎"><a href="#1-1-SpringBootの基礎" class="headerlink" title="1.1 SpringBootの基礎"></a>1.1 SpringBootの基礎</h3><ul><li><p>SpringBootとは「Spring Frameworkベースのアプリケーションを手軽に作成することができるフレームワーク」</p><ul><li>それ自体で完結するフレームワークではない</li><li>Spring MVCやSpring Batchなどの様々なフレームワークを組み合わせて素早く簡潔にアプリケーションを開発する機能を提供</li><li>SpringBootの中にTomcatが同梱されており、デフォルトでjarファイルをして、<code>java -jar</code>コマンドで引数に指定すると組み込まれたtomcatが立ち上がり開発したアプリケーションを実行できる</li></ul></li><li><p>代表的な特徴</p><ul><li>スターター<ul><li>依存関係をシンプルに定義するためのモジュール</li></ul></li><li>ビルドツール<ul><li>バージョン解決など、開発を効率化するためのプラグイン</li></ul></li><li>コンフィグレーションクラス<ul><li>XMLではなく、アノテーションとJavaで設定が書ける</li></ul></li><li>オートコンフィグレーション<ul><li>デフォルトのコンフィグレーションが適用されて、必要なところだけを設定すればよくなる</li></ul></li><li>メインアプリケーションクラス<ul><li>Javaコマンドで組み込みのTomcatを起動できる</li></ul></li><li>設定ファイル<ul><li>プロパティを外部ファイルに定義でき、動作使用を簡単に変更できる</li></ul></li></ul></li></ul><h4 id="スターター"><a href="#スターター" class="headerlink" title="スターター"></a>スターター</h4><ul><li><p>一連の依存関係をセットとしてそろえるためのモジュール</p></li><li><p>必要なライブラリを準備したり、それぞれのバージョンを選定したりする煩わしい作業から解放される</p></li><li><p>たとえば、<code>spring-boot-starter-web</code>を１つ依存関係に追加するだけで、SpringMVCやTomcatなど、Webアプリケーションに必要なライブラリがセットになって追加される</p></li><li><p>以下はスターターの例</p><ul><li><code>spring-boot-starter-web</code> : SpringMVC Tomcatが依存関係に追加される</li><li><code>spring-boot-starter-jdbc</code> : SpringJDBC Tomcat JDBC Pool が依存関係に追加される</li></ul></li><li><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-build-systems.html#using-boot-starter">スターターリファレンスページ</a></p></li><li><p>自分でスターターを作成する際は、<code>*-spring-boot-starter</code>という命名規則が定められていることに注意</p></li></ul><h4 id="ビルドツール"><a href="#ビルドツール" class="headerlink" title="ビルドツール"></a>ビルドツール</h4><ul><li><p>Spring Bootの推奨ビルドツール</p><ul><li>ApacheMaven</li><li>Gradle</li></ul></li><li><p>本書では<code>Gradle</code></p><ul><li>メリット<ul><li>スクリプトを記述するタイプのビルドツールのため、Antのようにタスクを自由に記述することができる</li><li>マルチプロジェクト構成の場合は、サブプロジェクトに対して一括設定して、必要に応じて個別に設定することができるため、記述量がMavenよりも少なくなる</li><li>Mavenの場合は、特殊な処理が必要になった時に独自プラグインを実装する必要があるのに対し、Gradleはスクリプトを書くだけで対応できる</li></ul></li></ul></li><li><p>Maven</p><ul><li>Mavenを利用する場合、<code>spring-boot-starter-parent</code>プロジェクトを親プロジェクトとして継承することで、プラグインのデフォルト設定、依存ライブラリのバージョンの定義、Javaコンパイラー準拠レベル、文字コードを引き継ぐことができる</li></ul></li><li><p>親プロジェクト設定</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>Gradle</p><ul><li>Spring Boot2.0.xはGradle4.0以降に対応している</li><li>GradleはMavenと違って、設定を引き継ぐための親プロジェクトが存在しないため、単に、スターターを依存関係として追加します</li><li>spring-boot-gradle-pluginというGradleプラグインが用意されており、実行可能なJarファイルを作成するためのタスクを利用できる</li></ul></li><li><p>ビルドスクリプトの処理内容</p><ol><li>spring-boot-gradle-plugin をビルドスクリプトの依存関係に追加する</li><li>spring-boot-gradle-plugin と dependency-management プラグインを利用することを宣言</li><li>Javaコンパイラー準拠レベルをデフォルトの1.8から11に変更</li><li>文字コードはUTF-8であることを指定する</li><li>スターターをアプリケーションの依存関係に追加する</li><li>テスト用のスターターをアプリケーションの依存関係に追加する</li></ol></li></ul><h4 id="依存関係の管理"><a href="#依存関係の管理" class="headerlink" title="依存関係の管理"></a>依存関係の管理</h4><ul><li>すべてのライブラリのバージョンを１つずつ指定するというような作業をする必要はない</li><li>依存関係に定義されているライブラリも一緒にバージョンアップする</li><li>Spring Bootのバージョンを上げる場合は、Project Wikiに載っているリリースノートを確認すること</li></ul><h4 id="コンフィグレーションクラス"><a href="#コンフィグレーションクラス" class="headerlink" title="コンフィグレーションクラス"></a>コンフィグレーションクラス</h4><ul><li><p>Spring BootはJavaベースのコンフィグレーションが好まれる</p></li><li><p>従来通りXMLファイルに記述できるが、推奨されるのは<code>@Configuration</code>アノテーションを付与したクラスによるコンフィグレーション</p></li><li><p>MVCの設定のこと？再度確認する</p></li></ul><h4 id="オートコンフィグレーション"><a href="#オートコンフィグレーション" class="headerlink" title="オートコンフィグレーション"></a>オートコンフィグレーション</h4><ul><li>Spring Bootは設定を変更しなければ、あらかじめ敷かれたレールに沿って動作するようになっている</li></ul><h4 id="メインアプリケーションクラス"><a href="#メインアプリケーションクラス" class="headerlink" title="メインアプリケーションクラス"></a>メインアプリケーションクラス</h4><ul><li><p>SpringBootのアプリケーションを起動するメソッドを呼び出すクラス</p></li><li><p>Javaアプリケーションのエントリポイントとなるmainメソッドの中で、SpringApplicationクラスのrunメソッドを呼び出すと、組み込みのTomcatが立ち上がり、SpringIoCコンテナの初期化が行われる</p></li><li><p>※再読</p></li></ul><h4 id="設定ファイル"><a href="#設定ファイル" class="headerlink" title="設定ファイル"></a>設定ファイル</h4><ul><li><p>アプリケーションを起動すると、次の場所にある<code>application.properties</code>設定ファイルを読み込む</p><ol><li>カレントディレクトリの<code>/config</code>サブディレクトリ</li><li>カレントディレクトリ</li><li>クラスパスの<code>/config</code>パッケージ</li><li>クラスパスのルート</li></ol></li><li><p>上から順番に優先度が高くなる</p></li><li><p>プロファイルという単位で別々の設定を持たせることも可能</p></li><li><p>設定ファイルは<code>yml</code>形式でもOK</p></li><li><p><code>application.yml</code>を配置することで使用可能</p></li><li><p>設定ファイルの値を参照するのも簡単</p></li></ul><h4 id="Colum-外部設定ファイルの種類"><a href="#Colum-外部設定ファイルの種類" class="headerlink" title="Colum 外部設定ファイルの種類"></a>Colum 外部設定ファイルの種類</h4><ul><li><p>環境変数</p></li><li><p>システムプロパティ</p></li><li><p>コマンドライン引数</p></li><li><p>いろんな渡し方がある</p></li><li><p>けど、アプリケーションプロパティしか使わないのではと思う</p></li></ul><h4 id="アプリケーションの起動"><a href="#アプリケーションの起動" class="headerlink" title="アプリケーションの起動"></a>アプリケーションの起動</h4><ul><li>コマンドラインで起動 <code>gradle bootRun</code></li><li>InteliJ IDEAを使って起動する</li></ul><h3 id="1-2-Spring-BootによるWebアプリケーション開発"><a href="#1-2-Spring-BootによるWebアプリケーション開発" class="headerlink" title="1.2 Spring BootによるWebアプリケーション開発"></a>1.2 Spring BootによるWebアプリケーション開発</h3><ul><li><p>Intelij IDEA 起動</p><ul><li><code>Cntl + Shift + A</code> -&gt; <code>compiler.automake.allow.when.app.running</code> を <code>ON</code> にすることでファイル変更時に自動更新する</li></ul></li><li><p>リソースの除外</p><ul><li>静的リソースの変更は単に再読み込みするだけで再起動は不要</li><li>デフォルト設定では、<ul><li><code>/META-INF/maven</code></li><li><code>/META-INF/resources</code></li><li><code>/resources</code></li><li><code>/static</code></li><li><code>/public</code></li><li><code>templates</code></li><li>に含まれるファイルへの変更は再起動がかからないようになっている</li></ul></li></ul></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 再起動のトリガーから除外するファイルを設定する</span></span><br><span class="line">spring.devtools.restart.<span class="keyword">exclude</span>=<span class="keyword">static</span><span class="comment">/**,public/**</span></span><br></pre></td></tr></table></figure><ul><li>LiveReload</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LiveReloadを無効化する</span></span><br><span class="line">spring.devtools.livereload.enabled=<span class="keyword">false</span></span><br></pre></td></tr></table></figure><h4 id="Restart-vs-Reload"><a href="#Restart-vs-Reload" class="headerlink" title="Restart vs Reload"></a>Restart vs Reload</h4><ul><li><p>JVM hot-swapping をよりよいものにしたい場合</p><ul><li><code>JRebel</code>(有償)または、<code>Spring Loaded</code>(無償:Grails2の内部で利用されている) の利用を検討する</li></ul></li><li><p>もう一つの方法として、<code>Dynamic Code Evolution VM(DCEVM)</code> HotSwapAgentを使ったJVM hot-swapping がある</p><ul><li>JDKにパッチをあててクラスの再定義機能を強化してくれる</li><li>Spring Loadedでは対応していないクラス追加に対してもhot-swappingが働く</li></ul></li><li><p>DCEVM + HotSwapAgentの導入方法</p><ul><li><code>jar</code>ファイルをインストール <a href="http://dcevm.github.io/">http://dcevm.github.io/</a></li><li><code>java -jar DCEVM-*-installer.jar</code> 実行</li></ul></li><li><p>Intelij IDEA プラグイン設定</p><ul><li>HotSwapAgent をインストール</li><li>Settingより設定する</li></ul></li></ul><h3 id="1-3-サンプルプロジェクトの構成"><a href="#1-3-サンプルプロジェクトの構成" class="headerlink" title="1.3 サンプルプロジェクトの構成"></a>1.3 サンプルプロジェクトの構成</h3><h4 id="マルチプロジェクト"><a href="#マルチプロジェクト" class="headerlink" title="マルチプロジェクト"></a>マルチプロジェクト</h4><ul><li>本書で用いるサンプルプロジェクトは複数のモジュールで構成されるマルチプロジェクト</li><li>メリット<ul><li>ビルドスクリプトを共通化することができるので記述量が減る</li><li>ローカル・リモートリポジトリにアーティファクトをアップロードしなくてもソースコードの変更が反映される</li><li>それぞれのプロジェクトを関連付けてタスクを実行できる</li></ul></li></ul><h4 id="アプリケーション・アーキテクチャ"><a href="#アプリケーション・アーキテクチャ" class="headerlink" title="アプリケーション・アーキテクチャ"></a>アプリケーション・アーキテクチャ</h4><ul><li>プレゼンテーション層<ul><li>プレゼンテーション層は、入力された値を受け取って、値をチェックしたり、値の変換を行ったりする層</li><li>WebモジュールのFormクラス、FormValidatorクラスが該当</li></ul></li><li>アプリケーション層<ul><li>プレゼンテーション層から受け取った値をドメイン層に渡す層で、WebモジュールのControllerが該当する</li><li>ビジネスロジックは含まれないが、画面遷移先を制御したり、セッションを用いて、次画面に値を渡したりといった処理を行う</li></ul></li><li>ドメイン層<ul><li>ドメインオブジェクトを持ち、ビジネスロジックを処理するメインの層で、ドメインモジュールのServiceクラスが該当する</li><li>ドメインオブジェクトはすべての層から利用されるが、逆にドメイン層はほかの層に依存してはならない点に注意する！</li></ul></li><li>インフラストラクチャ層<ul><li>インフラストラクチャ層では、ドメイン層から渡されたデータを永続化する層</li><li>ドメインモジュールのRepositoryクラスが該当する</li><li>アプリケーション層の影響を受けないように、汎用的な部品としてつくるようにすること！</li></ul></li></ul><h4 id="サンプルプロジェクトのビルドスクリプト"><a href="#サンプルプロジェクトのビルドスクリプト" class="headerlink" title="サンプルプロジェクトのビルドスクリプト"></a>サンプルプロジェクトのビルドスクリプト</h4><ol><li>Spring Bootのバージョンを拡張プロパティにセット</li><li>テストコードはSpockフレームワークを利用するため、Groovyを扱えるようにする</li><li>すべてのサブプロジェクトにおいて spring-boot-gradle-plugin を利用できるようにする</li><li>すべてのサブプロジェクトにおいて dependency-management プラグインを利用できるようにする</li><li>Javaコンパイラー準拠レベルを１１に変更する</li><li><code>src/main/resources</code> をクラスパスに追加して、開発中の変更がすぐに反映されるようにする</li><li>リソースファイルの出力先をソースファイルの出力先に変更する</li><li>コンパイルの前に、リソースファイルの出力を行うようにする</li><li>Domaの依存関係にあるバージョン違いの Spring Boot を除外する</li><li>Spring Session モジュールを使ってセッション情報をデータベースに格納する</li><li>Gradleのプロジェクトプロパティを bootRun の引数に渡せるようにする</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// メインアプリケーションクラスを持たないモジュールの場合（build.gradle）</span></span><br><span class="line">bootJar &#123;</span><br><span class="line">  enabled = <span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Lombokを利用する"><a href="#Lombokを利用する" class="headerlink" title="Lombokを利用する"></a>Lombokを利用する</h4><ul><li>ボイラープレートコードの削減のため</li><li>アプリケーションの実行時には不要なので、スコープはcompileOnlyに設定</li><li>型<code>val</code>が使用できる<ul><li>MEMO: これを使うと長い型を３文字でかけるよっていうことらしい</li></ul></li></ul><h2 id="第2章-Webアプリケーションにおける共通処理"><a href="#第2章-Webアプリケーションにおける共通処理" class="headerlink" title="第2章 Webアプリケーションにおける共通処理"></a>第2章 Webアプリケーションにおける共通処理</h2><ul><li>サンプルプロジェクトにおける共通処理、その実装方法について説明</li></ul><table><thead><tr><th>種別</th><th>説明</th></tr></thead><tbody><tr><td>バリデーション</td><td>単項目・相関チェックを効率よく実施する</td></tr><tr><td>オブジェクトマッピング</td><td>入力値を他のエンティティに効率よく詰め替える</td></tr><tr><td>ログ出力</td><td>共通的に処理の開始・終了をログ出力する</td></tr><tr><td>ファイルダウンロード</td><td>CSV、Excel、PDFなどのファイルをダウンロードする</td></tr><tr><td>ファイルアップロード</td><td>アップロードされたファイルを、Domaを使ってデータベースに保存する</td></tr><tr><td>メール送信</td><td>本文をテンプレート処理してメールを送信できるようにする</td></tr></tbody></table><h3 id="2-1-バリデーション"><a href="#2-1-バリデーション" class="headerlink" title="2.1 バリデーション"></a>2.1 バリデーション</h3><ul><li>Spring MVC では単項目チェックを行うためのBean Validatorが用意されている</li><li>相関チェックのためのアノテーションはないので、効率よく相関チェックを行うために共通処理を実装する</li><li>Spring Bootでは <code>spring-boot-starter-validation</code>スターターを依存関係に追加することで、Bean Validation 2.0 と Spring Validatorが利用できる</li><li>バリデーションのポイント<ul><li>メッセージの設定</li><li>バリデーションの種類</li><li>単項目チェック</li><li>相関項目チェック</li></ul></li></ul><h4 id="メッセージの設定"><a href="#メッセージの設定" class="headerlink" title="メッセージの設定"></a>メッセージの設定</h4><ul><li><p>Bean Validator はメッセージを外部ファイルで管理するためのMessageSourceを内包している</p></li><li><p>デフォルトでは文字コードが<code>UTF-8</code> になっていないので、エラーメッセージを表示する際に文字化けてしまう</p></li><li><p><code>application.yml</code></p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 共通の設定を定義する</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  messages:</span></span><br><span class="line">    <span class="comment"># メッセージ定義ファイルのパスを含めて設定する</span></span><br><span class="line"><span class="attr">    basename:</span> <span class="string">messages,ValidationMessages</span></span><br><span class="line"><span class="attr">    cache-duration:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    encoding:</span> <span class="string">UTF-8</span> <span class="comment"># P40. デフォルトのままだと文字化けするため指定</span></span><br></pre></td></tr></table></figure><h4 id="Colum-メッセージを定義するファイルを分割する"><a href="#Colum-メッセージを定義するファイルを分割する" class="headerlink" title="Colum メッセージを定義するファイルを分割する"></a>Colum メッセージを定義するファイルを分割する</h4><ul><li><code>application.yml</code>のbasenameにカンマ区切りで複数指定可能<ul><li><code>ValidationMessage</code>:バリデーションのエラーメッセージを定義する</li><li><code>PropertyNames</code>:エラー項目の項目名を入力フォームごとに定義する</li><li><code>messages</code>:バリデーションとは関係ないシステムメッセージなどを定義する</li></ul></li></ul><h4 id="バリデーションの種類"><a href="#バリデーションの種類" class="headerlink" title="バリデーションの種類"></a>バリデーションの種類</h4><ul><li><p>バリデーションの種類</p><ul><li>クライアントサイド</li><li>サーバーサイド</li></ul></li><li><p>本書はサーバーサイドのバリデーションについて説明</p></li><li><p>単項目チェック：<code>Bean Validation API</code>で提供されるアノテーションを利用できる</p></li><li><p>相関項目チェック：<code>org.springframework.validation.Validator</code>インターフェースの実装クラスを作成するか、自作のアノテーションを実装する</p></li></ul><h4 id="単項目チェック"><a href="#単項目チェック" class="headerlink" title="単項目チェック"></a>単項目チェック</h4><ul><li><code>javax.validation.constraints</code>パッケージに定義されている</li></ul><table><thead><tr><th>アノテーション</th><th>チェック内容</th></tr></thead><tbody><tr><td>Min,DecimalMin</td><td>数値の最小値を下回らないこと</td></tr><tr><td>Max,DecimalMax</td><td>数値の最大値を超えないこと</td></tr><tr><td>NotNull</td><td>NULL値ではないこと</td></tr><tr><td>Pattern</td><td>正規表現を満たすこと</td></tr><tr><td>NotBlank</td><td>値があること（空白を許さない）</td></tr><tr><td>NotEmpty</td><td>値があること（空白を許す）</td></tr><tr><td>Digits</td><td>数値であること</td></tr><tr><td>Past</td><td>過去であること</td></tr><tr><td>Future</td><td>未来であること</td></tr></tbody></table><ul><li><code>spring-boot-starter-validation</code>スターターは <code>Bean Validation</code>の実装ライブラリーとして、<code>Hibernate Validator</code>を依存関係に追加しているので、Hibernateで定義されたアノテーションも使うことができる</li></ul><table><thead><tr><th>アノテーション</th><th>チェック内容</th></tr></thead><tbody><tr><td>CreditCardNumber</td><td>正しいクレジットカード番号であること</td></tr><tr><td>Length</td><td>NULL値ではないこと</td></tr><tr><td>Range</td><td>範囲内の値であること</td></tr><tr><td>SafeHtml</td><td>妥当なHTML書式であること</td></tr><tr><td>URL</td><td>正しいURLであること</td></tr></tbody></table><ul><li><p>参考URL</p><ul><li><a href="https://beanvalidation.org/2.0/">https://beanvalidation.org/2.0/</a></li></ul></li><li><p>Formオブジェクトに<code>@NotEmpty</code>などのアノテーション付与</p></li><li><p><code>Controller</code>の<code>@PostMapping(&quot;/new&quot;)</code>を付与したメソッドの引数に<code>@Validated</code>を付与し、Formオブジェクトを第一引数に指定</p></li><li><p>チェック結果が、第二引数の<code>BindingResult</code>に入るので結果をチェックする</p></li></ul><h4 id="Column-PRGパターンについて"><a href="#Column-PRGパターンについて" class="headerlink" title="Column PRGパターンについて"></a>Column PRGパターンについて</h4><ul><li>PRGパターンでは、Post-Redirect-Getメソッドを組み合わせて、以下の流れで登録処理を行う実装パターン</li></ul><ol><li>保存ボタンを押したとき、POSTメソッドを使い、サーバーにリクエストする（P:Post）</li><li>入力値をDBに保存するといった一連の処理を行い、詳細画面にリダイレクトする（R:Redirect）</li><li>GETメソッドで詳細画面が表示される（G:Get）</li></ol><ul><li>サンプルプロジェクトはほぼすべての機能において、PRGパターンを適用している</li><li>メリット<ul><li>ブラウザの戻るボタンを押しても、フォーム再送信のダイアログを表示しないようにすることができる</li></ul></li></ul><h4 id="相関項目チェック"><a href="#相関項目チェック" class="headerlink" title="相関項目チェック"></a>相関項目チェック</h4><h3 id="2-2-オブジェクトマッピング"><a href="#2-2-オブジェクトマッピング" class="headerlink" title="2.2 オブジェクトマッピング"></a>2.2 オブジェクトマッピング</h3><ul><li><p>ModelMapperを使用した詰め替え例の紹介</p></li><li><p>Dozerなどもあるのでお好みで使用すること</p></li><li><p>Strictモードにしないと意図しない詰め替えが発生する可能性があるので注意</p></li><li><p>MEMO: ここはOrikaを採用することにしたので割愛</p></li></ul><h3 id="2-3-ログ出力"><a href="#2-3-ログ出力" class="headerlink" title="2.3 ログ出力"></a>2.3 ログ出力</h3><ul><li><p>MDCを使ってログに値を埋め込む設定</p><ul><li>コントローラに関数名を返却する処理を埋め込む</li><li>リクエストごとに乱数を生成して埋め込む（リクエストトラッキング）</li></ul></li><li><p>ログローテーションの設定について</p></li></ul><h3 id="2-4-ファイルダウンロード"><a href="#2-4-ファイルダウンロード" class="headerlink" title="2.4 ファイルダウンロード"></a>2.4 ファイルダウンロード</h3><p>ファイルの出力処理を共通処理にするとソースコードの記述量を削減市、統一された方法に揃えることで微妙な動作の違いを生まない用にすることができます。</p><p>ファイルダウンロード機能は、エンタープライズのアプリケーション開発に限らず、とてもよくある機能の１つ</p><p><code>org.springframework.web.servlet.View</code>インターエースを実装することで、汎用的なロジックで様々なファイルダウンロードに対応できる用になる</p><h4 id="PDFファイルのダウンロード"><a href="#PDFファイルのダウンロード" class="headerlink" title="PDFファイルのダウンロード"></a>PDFファイルのダウンロード</h4><p>帳票出力の代表的なライブラリとして、JasperReportsがある<br>JasperReportsは、<code>.jrxml</code>という拡張子のXMLファイルで帳票のレイアウトをテンプレートとして定義して帳票を出する際に対象データを引数に渡すことで帳票を出力します。<br>テンプレートファイルはJasperSoftStudioというEclipseベースの帳票デザインツールを使って作成</p><p>SpringMVCには、JasperReportsをサポートするViewクラスが提供されていたが、SpringFramework5から機能が除外されている</p><p>そのため、JasperReportsライブラリを直接使ってPDF出力するPDFViewクラスを実装して、引数にデータを渡すだけでPDF出力ができるようにします。</p><h4 id="CSVファイルのダウンロード"><a href="#CSVファイルのダウンロード" class="headerlink" title="CSVファイルのダウンロード"></a>CSVファイルのダウンロード</h4><p>CSVファイルのダウンロードは、<code>jackson-dataformat-csv</code>を利用するとシンプルに実装することができる</p><ul><li>CsvViewクラス</li><li>Entityクラス</li><li>Controllerクラス</li></ul><h4 id="Excelファイルのダウンロード"><a href="#Excelファイルのダウンロード" class="headerlink" title="Excelファイルのダウンロード"></a>Excelファイルのダウンロード</h4><p>Excelファイルのダウンロードの場合は、<code>org.springframework.web.servlet.view.document.AbstractXlsxView</code>を利用<br>AbstractXlsxViewはApachePOIに依存しているのでバージョンまで指定して依存関係を記述します<br>PDFファイルの場合と同様で、ファイル名に日本語文字が含まれると文字化けが生じてしまうので、子クラスを作成して対応</p><h3 id="2-5-ファイルアップロード"><a href="#2-5-ファイルアップロード" class="headerlink" title="2.5 ファイルアップロード"></a>2.5 ファイルアップロード</h3><p>ファイルダウンロードと同様によく実装する機能の１つ</p><p>SpringBootでは、アップロードファイルのサイズ上限などの設定を適切に行わないと、オートコンフィグレーションによるデフォルトの動作仕様では要件を満たせないこともありえるので注意が必要<br>SpringBootでは、ServletAPI3.0で利用できる<code>javax.servlet.http.Part</code>を内包するMultipartResolverがオートコンフィグレーションされるので、なにもしなくてもMultipartFileインターフェースを使ってファイルを受け取ることができる</p><h4 id="ファイルサイズの設定"><a href="#ファイルサイズの設定" class="headerlink" title="ファイルサイズの設定"></a>ファイルサイズの設定</h4><ul><li>１ファイルのサイズ上限は１MBで、１リクエストで受け付ける上限は１０MBになっている</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  servlet:</span></span><br><span class="line"><span class="attr">    multipart:</span></span><br><span class="line"><span class="attr">      max-file-size:</span> <span class="bullet">-1</span> <span class="comment"># デフォルトは1MB　-1だと無制限</span></span><br><span class="line"><span class="attr">      max-request-size:</span> <span class="number">20</span><span class="string">MB</span> <span class="comment"># デフォルトは10MB</span></span><br></pre></td></tr></table></figure><h4 id="ファイルの取扱"><a href="#ファイルの取扱" class="headerlink" title="ファイルの取扱"></a>ファイルの取扱</h4><h4 id="ファイルのデータベースへの格納"><a href="#ファイルのデータベースへの格納" class="headerlink" title="ファイルのデータベースへの格納"></a>ファイルのデータベースへの格納</h4><ul><li>TODO: 後で画像保存する処理実装する</li></ul><h3 id="2-6-メール送信"><a href="#2-6-メール送信" class="headerlink" title="2.6 メール送信"></a>2.6 メール送信</h3><ul><li>MEMO: 省略</li></ul><h2 id="第3章-データアクセス"><a href="#第3章-データアクセス" class="headerlink" title="第3章 データアクセス"></a>第3章 データアクセス</h2><p>本chapterでは、O&#x2F;RマッパーとしてDomaを使った実装方法を説明<br>Domaは2way-SQLと呼ばれるSQLテンプレートを利用できるので、SQL分の見通しがよくなるという特徴がある</p><p>実行時にSQLテンプレートとJavaソースコードとの不整合を検知して間違いを指摘する機能も備わっていて、とても使い勝手がよいO&#x2F;Rマッパーです</p><h3 id="3-1-スターター"><a href="#3-1-スターター" class="headerlink" title="3.1 スターター"></a>3.1 スターター</h3><ul><li>2way-SQLとは<ul><li>SQLのコメントに条件分岐を記述することで、プログラムのSQLテンプレートとしての利用と、囲うせずにそのままツールでの利用という２通りの使い方が可能になっているSQL文</li></ul></li></ul><h3 id="3-2-Domaの使い方"><a href="#3-2-Domaの使い方" class="headerlink" title="3.2 Domaの使い方"></a>3.2 Domaの使い方</h3><h3 id="3-3-エンティティ共通処理"><a href="#3-3-エンティティ共通処理" class="headerlink" title="3.3 エンティティ共通処理"></a>3.3 エンティティ共通処理</h3><p>すべてのエンティティにシステム固有のシステム制御項目（作成者、作成日時、更新者、更新日時、削除者、削除日時）を用いて、エンティティを取り扱うときに、すべてのテーブルに共通のルールを適用する場合の共通処理について説明</p><h4 id="エンティティ基底クラス"><a href="#エンティティ基底クラス" class="headerlink" title="エンティティ基底クラス"></a>エンティティ基底クラス</h4><p>エンティティ基底クラスを用意し、共通的に使うフィールドを定義することができる</p><p><code>@Entity</code>アノテーションにリスナーを指定すると、更新・登録・削除のタイミングで共通的な処理を実行することができる</p><ul><li>TODO: 共通項目実装</li></ul><h3 id="3-4-ページング処理"><a href="#3-4-ページング処理" class="headerlink" title="3.4 ページング処理"></a>3.4 ページング処理</h3><ul><li><p>DOMAはページング処理を行うための仕組みとして検索オプションを提供している</p></li><li><p>TODO: 要実装</p></li></ul><h3 id="3-5-排他制御"><a href="#3-5-排他制御" class="headerlink" title="3.5 排他制御"></a>3.5 排他制御</h3><h4 id="楽観的排他制御"><a href="#楽観的排他制御" class="headerlink" title="楽観的排他制御"></a>楽観的排他制御</h4><p>データ不整合を保険的に防ぐ方法<br>複数人が同じデータを編集してしまった場合に、先に保存したほうの編集内容が後から保存した内容で上書きされてしまうといったことを防ぐことができる</p><p>Domaを使って楽観的排他制御を行うには以下の条件を満たす必要がある</p><ul><li><p>エンティティのフィールドに<code>@Version</code>アノテーションが付与されている</p></li><li><p>Daoインターフェースに付与したアノテーションのignoreVersionをtrueにしていない</p></li><li><p>テーブルに数値型の改定番号カラムが定義されている</p></li><li><p>流れ</p><ol><li>Formオブジェクト二改定番号のフィールドを定義する</li><li>コントローラに<code>@SessionAttribute</code>アノテーションを付与する。</li><li>編集画面の初期表示処理で改定番号を含めてデータを取得して、Formオブジェクトに詰め替える</li><li>更新処理で、更新対象データを取得して、そのデータをFormオブジェクトの値で上書きする</li><li>Daoの更新処理を呼び出す（ここで排他制御がかかる</li><li>不要になったFormオブジェクトをセッションからクリアする</li></ol></li><li><p>TODO: 楽観的排他制御について深堀り、実装→悲観的排他制御だけでアプリとしては回せそう</p></li><li><p>Column セッション情報の格納先について</p><ul><li>楽観的排他制御の説明の中でSessionAttributeを使ってFormオブジェクトをセッション情報に保存する方法を紹介しました。サンプルプロジェクトでは、SpringSessionモジュールを依存関係に追加しているので、SpringBootによるオートコンフィグレーションが行われます。SpringSessionには、以下の格納先に対するオートコンフィグレーションが用意されています。<ul><li>JDBC</li><li>Redis</li><li>Hazelcast</li><li>MongoDB</li></ul></li><li>セッション情報の格納先を変更したい場合は、設定ファイルにリスト3.11を記述することで変更することができます。<ul><li>redisにする場合：<code>spring.session.store-type=redis</code></li></ul></li></ul></li><li><p>TODO: セッションの格納先はREDISにする</p></li></ul><h4 id="悲観的排他制御"><a href="#悲観的排他制御" class="headerlink" title="悲観的排他制御"></a>悲観的排他制御</h4><p>データベースの行ロック機能を使った排他制御で、在庫数のような頻繁に同時更新がかかるようなデータの整合性を担保する方法として利用される</p><p>Domaでは、悲観的排他制御を行うための仕組みも用意されていて、ページング処理の説明と同じ用に検索オプションを使う</p><p>悲観的排他制御を行うときに注意すべきなのは、検索結果が０件になるような条件で検索すると、行ロックではなくテーブルロックがかかる点です！！！<br>処理時間が長い処理でテーブルロックがかかってしまうと、処理の滞留が発生してしまい、システム全体が不安定な状態二なることもあるので注意する</p><h3 id="3-6-論理削除"><a href="#3-6-論理削除" class="headerlink" title="3.6 論理削除"></a>3.6 論理削除</h3><p>DBのレコードを削除するのではなく、削除フラグによってレコードの削除を表すという方法</p><h4 id="更新機能による実現"><a href="#更新機能による実現" class="headerlink" title="更新機能による実現"></a>更新機能による実現</h4><ul><li><code>@Update(excludeNull = true) // Nullの項目は更新対象にしない</code></li></ul><h4 id="エンティティリスナーによる共通処理"><a href="#エンティティリスナーによる共通処理" class="headerlink" title="エンティティリスナーによる共通処理"></a>エンティティリスナーによる共通処理</h4><ul><li>リスナーの中の<code>preUpdate</code>メソッドの中で、メソッド名が論理削除のメソッド名と一致するかを確認する</li></ul><h4 id="論理削除レコードの除外"><a href="#論理削除レコードの除外" class="headerlink" title="論理削除レコードの除外"></a>論理削除レコードの除外</h4><ul><li><p>論理削除を行うことをアプリケーション内で統一している場合は、データ取得のSQLに、論理削除フラグによる削除データの除外が行われる用にする必要がある</p></li><li><p>Column 参考文献</p><ul><li>BLOG.IK.AM <a href="https://blog.ik.am/">https://blog.ik.am/</a><ul><li>初めてのSpringBoot著者</li></ul></li><li>SlideShare Toshiaki Maki <a href="https://www.slideshare.net/makingx">https://www.slideshare.net/makingx</a></li></ul></li></ul><h2 id="第4章-セキュリティ"><a href="#第4章-セキュリティ" class="headerlink" title="第4章 セキュリティ"></a>第4章 セキュリティ</h2><p>本chapterでは、SpringSecurityを使った認証・認可とそれらにまつわる課題を解決する実装方法を説明</p><h3 id="4-1-スターター"><a href="#4-1-スターター" class="headerlink" title="4.1 スターター"></a>4.1 スターター</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'org.thymeleaf.extras'</span>, name: <span class="string">'thymeleaf-extras-springsecurity5'</span>, version: <span class="string">'3.0.4.RELEASE'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'org.springframework.boot:spring-boot-starter-security'</span></span><br></pre></td></tr></table></figure><h3 id="4-2-認証"><a href="#4-2-認証" class="headerlink" title="4.2 認証"></a>4.2 認証</h3><h4 id="認証情報の取得"><a href="#認証情報の取得" class="headerlink" title="認証情報の取得"></a>認証情報の取得</h4><ul><li>UserDetailsServiceをimplementsして実装する方法</li><li>TODO: 権限周りが実装できていないので見ておく</li></ul><h4 id="ログイン機能"><a href="#ログイン機能" class="headerlink" title="ログイン機能"></a>ログイン機能</h4><p>ログイン機能のコントローラを実装します。<br>デフォルトでも組み込みのログイン画面を表示することが可能ですが、ほとんどの場合において画面を変更する必要があるので、Thymeleafテンプレートを使ってログイン画面を表示する用に実装し、それ以降の処理はSpringSecurityと連携するようにします。</p><ul><li>TODO: タイムアウト処理やログイン成功処理など実装の必要があればサンプルを基に実装する<ul><li>&#x2F;authorize　にfowardできなくて、formオブジェクト経由のエラーチェックが実装できなかった</li></ul></li></ul><h3 id="4-3-RememberMe"><a href="#4-3-RememberMe" class="headerlink" title="4.3 RememberMe"></a>4.3 RememberMe</h3><p>一般的なWebサービスでは、ログイン画面に「ログインしたままにする」というチェックボックスがあることがしばしばある<br>一定期間内であればセッションがタイムアウトしても自動ログイン処理が行われる機能が提供されるので、何度もログイン画面でパスワードを入力する不便さを解消することができる</p><h4 id="ログイン記録の永続化"><a href="#ログイン記録の永続化" class="headerlink" title="ログイン記録の永続化"></a>ログイン記録の永続化</h4><ul><li>TODO: 自動ログイン機能は必要になれば実装しておきたい<ul><li>合わせて不要なレコードを削除する機能も実装する必要がある</li></ul></li></ul><h3 id="4-4-認可"><a href="#4-4-認可" class="headerlink" title="4.4 認可"></a>4.4 認可</h3><p>管理機能を備えたWebアプリケーションにおいては、ログインユーザーごとに権限を付与して、特定のユーザーのみが操作することができるように制御することがよくある<br>このようなアクセス制御を行う場合は、以下の要件が満たされていると汎用的に使えるためとても便利</p><ul><li><p>要件</p><ul><li>システムを利用するユーザーは、複数のロール（役割）を持つことができる</li><li>特定リソースの操作を識別する単位として権限を定義することができる</li><li>ロールは、複数の権限を持つことができる</li><li>システムの移動中にロールの持つパーミッションや対象のリソースを変更することができる</li></ul></li><li><p>SpringSecurityを使った認可の実装方法としては、アノテーションを使う方法と、JavaConfigでURLベースの条件式をていk技する方法がある</p></li><li><p>これらの方法では、システムの稼働中に新たに役割に権限を追加したり、することが困難</p></li><li><p>認証処理の中でデータベースからロール権限を取得して、コントローラのメソッドレベルでの認可制御を行うようにしている</p></li></ul><h4 id="権限管理データをロード"><a href="#権限管理データをロード" class="headerlink" title="権限管理データをロード"></a>権限管理データをロード</h4><h4 id="権限とメソッドの紐付け"><a href="#権限とメソッドの紐付け" class="headerlink" title="権限とメソッドの紐付け"></a>権限とメソッドの紐付け</h4><h4 id="認可制御のインターセプター"><a href="#認可制御のインターセプター" class="headerlink" title="認可制御のインターセプター"></a>認可制御のインターセプター</h4><ul><li>TODO: 権限管理はあとで見直す</li></ul><h3 id="4-5-CSRF対策"><a href="#4-5-CSRF対策" class="headerlink" title="4.5 CSRF対策"></a>4.5 CSRF対策</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下を追加するとformにhiddenでcsrfトークンが埋め込まれる</span></span><br><span class="line">http.csrf()</span><br><span class="line">  .csrfTokenRepository(<span class="keyword">new</span> CookieCsrfTokenRepository());</span><br></pre></td></tr></table></figure><h3 id="4-6-二重送信防止"><a href="#4-6-二重送信防止" class="headerlink" title="4.6 二重送信防止"></a>4.6 二重送信防止</h3><ul><li><p>二重送信防止するためのチェック方法</p><ul><li>JavaScriptでボタンを連打できないようにする</li><li>PostRedirectGetパターンを適用</li><li>トークンを使った送信済みチェックをする</li></ul></li><li><p>TODO: ここで紹介されているやり方だと、二重送信防止チェックをするのは、UPDATEが伴う処理のみに限定できる</p><ul><li>ページ遷移や検索処理で二重送信が行われた場合は除外できるという仕組みになっている</li><li>ここの実装方法の方がより現実的なので後で真似る</li></ul></li></ul><h2 id="第5章-画面開発"><a href="#第5章-画面開発" class="headerlink" title="第5章 画面開発"></a>第5章 画面開発</h2><h3 id="5-1-Thymeleaf"><a href="#5-1-Thymeleaf" class="headerlink" title="5.1 Thymeleaf"></a>5.1 Thymeleaf</h3><p>SpringMVCといえばJSP一択だったが、HTML5に準拠した形で管理できる方が望ましい</p><ul><li>メリット<ul><li>Spring推奨</li><li>HTML5準拠</li><li>デザイナとの分業がしやすい</li><li>ブラウザで直接参照できる</li></ul></li></ul><h3 id="5-2-Formバインディング"><a href="#5-2-Formバインディング" class="headerlink" title="5.2 Formバインディング"></a>5.2 Formバインディング</h3><ul><li>FormBeanの定義方法とバリデーション方法</li></ul><h3 id="5-3-事前評価"><a href="#5-3-事前評価" class="headerlink" title="5.3 事前評価"></a>5.3 事前評価</h3><p>アプリケーションで扱うデータは特定の変換処理をかけたいことがよくある<br>Thymeleafでは事前評価をサポートしている</p><h4 id="事前評価の実装例"><a href="#事前評価の実装例" class="headerlink" title="事前評価の実装例"></a>事前評価の実装例</h4><ul><li>表示する言語を翻訳する例が紹介されている</li><li>FormBeanの値と、実際に表示したい値が異なる場合に有用だと思う</li><li><code>&lt;p th:text=&quot;${@myapp.translator.Translator@translateToEnglish(textVar)}&quot;&gt;some text here ...&lt;/p&gt;</code></li></ul><h3 id="5-4-テンプレート共有"><a href="#5-4-テンプレート共有" class="headerlink" title="5.4 テンプレート共有"></a>5.4 テンプレート共有</h3><h4 id="テンプレートの部品化"><a href="#テンプレートの部品化" class="headerlink" title="テンプレートの部品化"></a>テンプレートの部品化</h4><ul><li>includeとreplaceの話</li></ul><h4 id="テンプレートの共通化"><a href="#テンプレートの共通化" class="headerlink" title="テンプレートの共通化"></a>テンプレートの共通化</h4><p>レイアウトという機能でテンプレートの共通化をサポートします<br>HTMLのレイアウトやJavaScriptおよびCSSのインクルードを一元管理できる<br>本機能を用いてテンプレートの共通化を採用することでソースコードの保守性や品質も向上するため、積極的に導入すべき機能</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span>(<span class="string">'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:2.3.0'</span>) &#123;</span><br><span class="line">  <span class="keyword">exclude</span> <span class="keyword">group</span>: <span class="string">"org.codehaus.groovy"</span>, module: <span class="string">"groovy"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> LayoutDialect <span class="title">layoutDialect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LayoutDialect();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>レイアウト機能を利用するために、<code>xmlns:layout=&quot;http://www.ultraq.net.nz/thymeleaf/layout&quot;</code>を指定する</p></li><li><p><code>layout:fragment=&quot;任意の文字列&quot;</code>で各ページで差し替えるエリアを指定する</p></li><li><p>MEMO: Spring徹底入門でも紹介されていたが、画面の全体像がわかりづらくなりやすいためincludeを用いることにする</p></li></ul><h3 id="5-5-Thymeleafのその他の機能"><a href="#5-5-Thymeleafのその他の機能" class="headerlink" title="5.5 Thymeleafのその他の機能"></a>5.5 Thymeleafのその他の機能</h3><h4 id="エスケープなしのテキスト"><a href="#エスケープなしのテキスト" class="headerlink" title="エスケープなしのテキスト"></a>エスケープなしのテキスト</h4><ul><li><p>通常、クロスサイトスクリプティング対策のためSpringはタグ文字列をエスケープして表示している</p></li><li><p>場合によってはエスケープしないで、文字列を表示したいケースがある</p></li><li><p><code>&lt;p th:utext=&quot;#{home.welcom}&quot;&gt;Welcom to our grocery store!&lt;/p&gt;</code></p></li><li><p>このutextを利用する場合は、XSSの脆弱性を含まない用に注意が必要</p></li></ul><h4 id="日付操作拡張"><a href="#日付操作拡張" class="headerlink" title="日付操作拡張"></a>日付操作拡張</h4><p>Thymeleafでは、Date&#x2F;TimeAPIをデフォルトでサポートしていないため拡張ライブラリーを使用する必要がある</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-java8time</span></span><br><span class="line"><span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'org.thymeleaf.extras'</span>, name: <span class="string">'thymeleaf-extras-java8time'</span>, version: <span class="string">'3.0.4.RELEASE'</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"holidayDate"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">th:value</span>=<span class="string">"$&#123;(value != null) ? #temporals.format(value, 'yyyy/MM/dd') : '' &#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>※その他にもThymeleafは各種の拡張機能をサポートしている</p><h3 id="5-6-静的コンテンツ管理"><a href="#5-6-静的コンテンツ管理" class="headerlink" title="5.6 静的コンテンツ管理"></a>5.6 静的コンテンツ管理</h3><p>BtoCのアプリケーションを構築する際、UI&#x2F;UXの向上が欠かせないため、クライアントサイドライブラリを有効活用する必要がある<br>JavaScriptやCSSを適切に管理していない状況では、次の問題が発生することがありました。</p><ul><li><p>JavaScriptやCSSが適切にバージョニングされていないため、ブラウザキャッシュにより、リリース時に古いバージョンが提供されてしまう。</p></li><li><p>JavaScriptやCSSライブラリが構成管理されていないため、安易な外部ライブラリの利用により障害が発生してしまう</p></li><li><p>本節では、Webアプリケーションの静的コンテンツについて</p><ul><li>配置場所</li><li>キャッシュ制御</li><li>アクセス制御</li><li>クライアントライブラリの構成管理方法<ul><li>を解説！！</li></ul></li></ul></li></ul><h4 id="静的コンテンツの配置場所"><a href="#静的コンテンツの配置場所" class="headerlink" title="静的コンテンツの配置場所"></a>静的コンテンツの配置場所</h4><p>SpringBootでは、SpringMVCのオートコンフィグレーションに以下の設定がされており、デフォルトでは次の４点のパスに静的コンテンツを配置できる</p><ul><li>&#x2F;resources&#x2F;</li><li>&#x2F;static&#x2F;</li><li>&#x2F;public&#x2F;</li><li>&#x2F;META-INF&#x2F;resources&#x2F;</li></ul><h4 id="キャシュ制御"><a href="#キャシュ制御" class="headerlink" title="キャシュ制御"></a>キャシュ制御</h4><p>キャッシュする時間は、application.(properties|yml) や ResourceHandlerRegistryのオーバーラードで調整</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="comment">#    cache-period: 86400 # 1日間キャッシュさせる</span></span><br><span class="line"><span class="attr">    chain:</span></span><br><span class="line"><span class="attr">      strategy:</span></span><br><span class="line"><span class="attr">        content:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span> <span class="comment"># 静的コンテンツのキャッシュ無効設定 MD5ハッシュが計算される バージョン管理戦略と呼ばれるらしい</span></span><br><span class="line"><span class="attr">          paths:</span> <span class="string">/**</span></span><br></pre></td></tr></table></figure><ul><li>TODO: バージョン管理戦略を実施した場合のキャッシュの挙動を確認しておく</li></ul><h4 id="アクセス制御"><a href="#アクセス制御" class="headerlink" title="アクセス制御"></a>アクセス制御</h4><p>Faviconなどの画像ファイルやクライアントライブラリは未認証、認証にかかわらずアクセスできる必要がある<br>SpringBootでは、SpringSecurityのオートコンフィグレーションにリストの設定がされており、デフォルトで次の５点のパスはpublicアクセス可能</p><p>しかし、SEOに必要なrobots.txtやsitemap.xmlは含まれないため、これらのファイルをPublicアクセス可能とするには、JavaConfigで設定を上書きする必要がある</p><ul><li><p>デフォルトで許可されている５点</p><ul><li>&#x2F;css&#x2F;</li><li>&#x2F;js&#x2F;</li><li>&#x2F;images&#x2F;</li><li>&#x2F;webjars&#x2F;</li><li>favicon.ico</li></ul></li><li><p>TODO: SEO対策に必要な知識を習得しておく必要がある</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] STATIC_RESOURCES = &#123;</span><br><span class="line">    <span class="string">"/favicon.ico"</span>, <span class="string">"/css/**"</span>, <span class="string">"/js/**"</span>, <span class="string">"/img/**"</span>, <span class="string">"/lib/**"</span>, <span class="string">"/font/**"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// セキュリティ対策が不要なリソースがある場合、SpringSecurityの処理を適用しないようにする</span></span><br><span class="line">  <span class="comment">//    web.ignoring().antMatchers("/resources/static/**");</span></span><br><span class="line">  web.ignoring().antMatchers(STATIC_RESOURCES);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="クライアントライブラリの構成管理"><a href="#クライアントライブラリの構成管理" class="headerlink" title="クライアントライブラリの構成管理"></a>クライアントライブラリの構成管理</h4><p>サーバサイドエンジニア中心のチーム構成だとフロントライブラリの管理が抜けてしまうことがよくある</p><p>本項では、WebJarsを用いてクライントライブラリを管理する方法を紹介</p><ul><li>Dependenciesの追加方法を説明</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://mvnrepository.com/artifact/org.webjars/webjars-locator-core</span></span><br><span class="line"><span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'org.webjars'</span>, name: <span class="string">'webjars-locator-core'</span>, version: <span class="string">'0.45'</span></span><br></pre></td></tr></table></figure><h2 id="第6章-API開発"><a href="#第6章-API開発" class="headerlink" title="第6章 API開発"></a>第6章 API開発</h2><p>金融機関でのAPI公開の動きが急激に加速しているように、APIというキーワードはビジネス領域でもよく目にする用になってきている<br>システム開発でも迅速に機能をリリースしていくためにはAPI連携は書かせず、API連携の重要度は日に日に高まってきている</p><h3 id="6-1-Spring-でのAPI開発"><a href="#6-1-Spring-でのAPI開発" class="headerlink" title="6.1 Spring でのAPI開発"></a>6.1 Spring でのAPI開発</h3><p>MSA(Micro Service Architecture)開発やSPA開発ではAPI連携が必須<br>一方小売業界ではオムニチャネルといった言葉が生まれている</p><p>チャネルの違いを意識しないようにするには、バックエンドのサービスをAPI化し、PC&#x2F;スマホ&#x2F;他サービスなどの複数のチャネルから透過的に利用できるようにする必要がある</p><h4 id="API仕様"><a href="#API仕様" class="headerlink" title="API仕様"></a>API仕様</h4><h4 id="リソース実装"><a href="#リソース実装" class="headerlink" title="リソース実装"></a>リソース実装</h4><h4 id="コントローラ実装"><a href="#コントローラ実装" class="headerlink" title="コントローラ実装"></a>コントローラ実装</h4><h4 id="エラーハンドリング実装"><a href="#エラーハンドリング実装" class="headerlink" title="エラーハンドリング実装"></a>エラーハンドリング実装</h4><p><code>@RestControllerAdvice</code>アノテーションを指定して作成</p><h3 id="6-2-SpringでのAPI連携"><a href="#6-2-SpringでのAPI連携" class="headerlink" title="6.2 SpringでのAPI連携"></a>6.2 SpringでのAPI連携</h3><p>現在のシステム開発でアジリティを追求するためにはAPI連携は欠かせません</p><h4 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h4><p>SpringではRestTemplateというRESTクライアントを提供している<br>RestTemplateを用いると、Javaオブジェクトとレスポンスボディの変換も容易に実現できる</p><h4 id="ユーザー一覧取得APIへの連携"><a href="#ユーザー一覧取得APIへの連携" class="headerlink" title="ユーザー一覧取得APIへの連携"></a>ユーザー一覧取得APIへの連携</h4><h4 id="ユーザー作成APIへの連携"><a href="#ユーザー作成APIへの連携" class="headerlink" title="ユーザー作成APIへの連携"></a>ユーザー作成APIへの連携</h4><h3 id="6-3-API開発効率の最大化"><a href="#6-3-API開発効率の最大化" class="headerlink" title="6.3 API開発効率の最大化"></a>6.3 API開発効率の最大化</h3><p>API開発でクライアント側でモックを用意して実装をすすめる必要がある</p><p>API定義をExcelなどのドキュメントで管理し、Excelなどのドキュメントに基づきクライアント側でモックの準備をすすめると、仕様の認識齟齬が発生することが多くなってしまいます。</p><p>またAPIの仕様変更時の連携のオーバーヘッドも大きくなってしまいます。</p><p>本節では、現在の開発での必須要素であるAPI連携をより円滑にすすめるためにAPI管理にSwaggerを用い、API開発の効率を上げる方法を説明</p><h4 id="Swaggerとは"><a href="#Swaggerとは" class="headerlink" title="Swaggerとは"></a>Swaggerとは</h4><p>OpenAPI仕様に基づくAPI開発ツールのフレームワークであり、APIのライフサイクル全体に渡って、設計から文書の管理、テストおよびデプロイまでを可能にします。</p><ul><li><p>大きな利点は以下の４つ</p><ul><li>OpenAPI準拠</li><li>YAMLを用いた宣言的な記法</li><li>コード自動生成</li><li>エコシステムの充実（SwaggerHub）</li></ul></li><li><p>OpenAPI準拠</p><ul><li>マイクロソフト、Googleなどの大手の企業を含むOpenAPIInitiativeがLinuxFoundationの協力のもとで結成され、APIの記述のために採用したのがSwagger</li><li>API管理のデファクトスタンダードと呼ばれるほど普及している</li></ul></li><li><p>YAMLを用いた宣言的な記法</p><ul><li>SwaggerはAPI定義をYAML(JSON)により宣言的に記載できます。</li><li>また、定義したYAMLからSwaggerUIというツールを用いると、HTMLベースの定義書やモックを作成できます。</li><li>SwaggerUIを利用し、APIを公開すると、クライアント側は動く仕様としてAPIを参照できるため、API連詠によるコミュニケーションコストを低下させることができます。</li></ul></li><li><p>コード自動生成</p><ul><li>Swaggerには、Swagger CodegenというSwaggerUIで公開されたAPI仕様を基にコードを自動生成するツールがある</li></ul></li></ul><p>TODO: Dockerを用いてSwaggerCodegenを用いたスタブサーバーの起動例　確認しておく</p><ul><li>エコシステムの充実(SwaggerHub)<ul><li>SwaggerCodegenを用いてスタブサーバーを起動し、開発チームで共有する方針も悪くないですが、ホスト環境の管理やAPI仕様の変更の都度、コードの再生成および再起動が必要になります。</li><li>Swaggerはエコシステムも充実しており、SwaggerHubというAPI管理のプラットフォームがあります。</li><li>SwaggerHubはSwaggerを使ったモックサーバーやテスト環境などAPI管理に関するサービスをまとめて提供しているため、APIの管理工数を下げることが可能です。</li><li>SwaggerHubはAPIドキュメントの編集&#x2F;表示、モックサーバーの立ち上げ、SwaggerCodegenの機能などをブラウザベースで提供しています。</li></ul></li></ul><p>TODO: SwaggerHubは一回使ってみる必要あり！！！<br>→お金かかるから断念… チーム開発に有用かも？</p><h4 id="Springでの利用-SpringFox"><a href="#Springでの利用-SpringFox" class="headerlink" title="Springでの利用(SpringFox)"></a>Springでの利用(SpringFox)</h4><p>SwaggerでのAPI管理がデファクトスタンダードになっていること、Swaggerを利用することのメリットを説明しました。<br>本項では、SwaggerをSpringで利用する方法を説明します。</p><p>Springでは、SpringFoxを用いるとAPIドキュメントの自動生成が可能<br>SpringFoxはSwaggerUIの提供もサポートしているため、APIを用いたチーム開発を円滑にすすめることができる<br>次の手順に従い、SpringFoxの利用方法を説明</p><ul><li>依存関係の設定</li><li>共通設定カスタマイズ</li><li>個別エンドポイントのカスタマイズ</li><li>静的ドキュメント生成</li></ul><ol><li>依存関係の設定</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://mvnrepository.com/artifact/io.springfox/springfox-swagger2</span></span><br><span class="line"><span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'io.springfox'</span>, name: <span class="string">'springfox-swagger2'</span>, version: <span class="string">'2.9.2'</span></span><br><span class="line"><span class="comment">// https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui</span></span><br><span class="line"><span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'io.springfox'</span>, name: <span class="string">'springfox-swagger-ui'</span>, version: <span class="string">'2.9.2'</span></span><br></pre></td></tr></table></figure><ol start="2"><li>共通設定カスタマイズ(JavaConfig)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123; ThymeleafConfig.class, <span class="comment">// Thymeleafを使用することを明示</span></span><br><span class="line">    GoogleAutoConfiguration.class &#125;)</span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>APIControllerのみグルーピングする方法を紹介</p><ol start="3"><li>個別エンドポイントのカスタマイズ</li></ol><p>アノテーションでAPIごとの説明を追加できる</p><ol start="4"><li>静的ドキュメント生成</li></ol><p>SwaggerUIを動的に生成する方法は、API連携開発の効率を上げてくれるため、開発フェーズでは導入しておくと効果的</p><p>しかし本番サービス稼働後に上述の手順を有効化しておくと、SwaggerUIの外部公開制御が必要になります</p><p>本項では、別のアプローチとして、SwaggerのAPI定義から静的ドキュメントを生成する方法を紹介</p><ul><li><p>依存関係の設定</p></li><li><p>テストクラスの追加</p></li><li><p>HTML変換</p></li><li><p>依存関係の設定</p><ul><li>SwaggerからAsciiDocへの変換をサポートしているSwagger2Markupというライブラリがある</li><li>Swagger2MarkupをSpring向けにカスタマイズした、springfox-staticdocsを依存関係に追加する</li></ul></li><li><p>テストクラスの追加</p><ul><li>テストコードを作成し、CIサイクルに含めておくと、静的なドキュメントのAsciiDocが自動生成される</li></ul></li><li><p>HTML変換</p><ul><li>HTMLへの変換はasciidoctorを利用する</li></ul></li></ul><p>TODO: HTMLへ変換するCI構築する</p><h4 id="Spring-REST-Docs"><a href="#Spring-REST-Docs" class="headerlink" title="Spring REST Docs"></a>Spring REST Docs</h4><p>Springでのドキュメント生成の自動化には、Spring REST Docsを採用する方法もある</p><ul><li><p>利点</p><ul><li>テストをパスしないドキュメントは作成されないため、「動く仕様書」として信頼できる。</li><li>asciidoctorを用いた簡潔な記法</li></ul></li><li><p>手順</p><ul><li>依存関係の設定</li><li>雛形生成</li><li>テストコード生成</li></ul></li></ul><h2 id="第7章-チーム開発"><a href="#第7章-チーム開発" class="headerlink" title="第7章 チーム開発"></a>第7章 チーム開発</h2><p>システム開発では、１人ですべての作業を簡潔させることはできません。</p><p>最近のシステム開発で主流となってきている機能ごとに分割して開発する手法のMSA(MicroServieceArchitecture)開発でも、５～８人でのチーム開発（Two Pizza Team）が良いとされています。</p><h3 id="7-1-インフラの構成管理"><a href="#7-1-インフラの構成管理" class="headerlink" title="7.1 インフラの構成管理"></a>7.1 インフラの構成管理</h3><p>ローカルPC、検証環境、本番環境（オンプレミスもしくはクラウド）など、プログラムは様々な環境で動く可能性があります。</p><p>本節では、特定の環境にロックインされないようにする方法を紹介<br>旧来のシステム開発では、Excelなどで作成された手順書を用いて、半日～２日かけて開発環境を構築することが当たり前でした<br>しかし最近では、Infrastracture as Code(IaC)やDockerをはじめとするコンテナ技術が広く普及してきたことにより、上述のような方法を採用することはとても効率的とは言えません</p><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><p>「私のローカル環境では再現しません」をなくそう<br>秘伝のたれ的な作業が影響して、このような環境差異によるトラブルが発生しがち</p><p>コンテナ技術のDockerを用いて、環境構築手順をコード化してGithubなどにコミットし、環境の使い捨てができる状態にしておくことで、上述のようなトラブルを抑制できる</p><ul><li><p>メリット</p><ul><li>インフラ構築手順のコード化（Dockerfile）</li><li>環境依存性による問題の排除</li><li>廃棄容易姓</li></ul></li><li><p>Column クラウドベースの統合開発環境（AWS Cloud9）</p><ul><li>ここ数年、ブラウザのみでコードを記述、実行、デバッグできる統合開発環境の利用が活発化している</li><li>ブラウザベースの統合開発環境の有名なサービスとして、AWS Cloud9がある</li><li>AWS Cloud9を利用すると、開発には非力なマシン（ipadなど）でも、いつでもどこでも開発が可能</li></ul></li><li><p>インフラ構築手順のコード化（Dockerfile）</p><ul><li>開発に関わる全ての文書は構成管理の対象とすることが望ましい</li><li>チーム開発では、アプリケーションプログラムは必然的に構成管理の対象となりますが、設計文書やインフラ構築手順は構成管理の対象外になってしまうことがある</li><li>インフラ構築手順のコード（Dockerfile）をSCMにコミットすることで、利用しているディストリビューション、設定ファイルの状態がコードで明確化されるため、インフラに関わるトラブルを抑制できる</li></ul></li><li><p>環境依存性による問題の排除</p></li><li><p>廃棄容易姓</p></li><li><p>Column Tweleve-Factor App</p><ul><li>コンテナ開発が活発になってきているのと同時に、クラウドアプリケーション開発のベストプラクティスの１つとして、The Twelve-Factor Appが取り上げ垂れることが多くなってきています。</li><li>The Twelve-Factor Appは、Herokuのプラットフォーム開発での治験をプラクティスに落とし込んだもので、コードベース、依存関係、プロセス、並行性、廃棄容易姓、開発&#x2F;本番一致などの１２の要素から構成されます。</li><li>アプリケーションをThe Twelve-Factor Appに適用させることができれば、コンテナベースの開発に適用していることになるため、オンプレミス、クラウドなどの実行環境に関わらずアプリケーションをデプロイできます。</li></ul></li></ul><p>TODO: The Twelve-Factor Appについて深堀り</p><ul><li>Windows10proではHyper-Vを有効化することでDockerを利用できます。</li><li>ここでは、Windows10 Pro以外でDockerを利用する方法を紹介します</li><li>VagrantとVirtualBoxでDocker環境を構築</li></ul><p>TODO: VagrantとDockerのコマンドについて説明しているので再度理解した上で読んで見る<br>SpringBootで利用するための設定についても記載があるので組み込んでおく</p><h3 id="7-2-データベースの構成管理"><a href="#7-2-データベースの構成管理" class="headerlink" title="7.2 データベースの構成管理"></a>7.2 データベースの構成管理</h3><ul><li>データベースの構成管理をするための、OSSのDBマイグレーションツールのFlywayを紹介</li></ul><h4 id="Flywayの利用"><a href="#Flywayの利用" class="headerlink" title="Flywayの利用"></a>Flywayの利用</h4><ul><li>SpringBootで利用するための設定<ul><li>依存下院系の設定</li><li>プロパティ設定</li><li>マイグレーションファイルの準備</li></ul></li></ul><h3 id="7-3-メンテナブルなテストコード"><a href="#7-3-メンテナブルなテストコード" class="headerlink" title="7.3 メンテナブルなテストコード"></a>7.3 メンテナブルなテストコード</h3><p>テストコードは重要<br>本節では、GroovyベースのテスティングフレームワークのSpockを用いてテストコードの可読性を上げる方法を紹介</p><h4 id="Spock"><a href="#Spock" class="headerlink" title="Spock"></a>Spock</h4><p>言語仕様に、RSpecやScalaなどのよい点を取り入れており、大きく次の３点の利点がある</p><ul><li>可読性</li><li>データ駆動テスト</li><li>Power Assertions</li></ul><p>TODO: SpringでのSpockの利用方法を紹介<br>GroovyやScalaなどをキャッチアップする必要がありそう</p><h3 id="7-4-ドキュメント生成ツールの活用"><a href="#7-4-ドキュメント生成ツールの活用" class="headerlink" title="7.4 ドキュメント生成ツールの活用"></a>7.4 ドキュメント生成ツールの活用</h3><ul><li><p>設計書が適切に管理できていない例</p><ul><li>詳細設計書がそもそもない</li><li>Textファイル、Excel、Wikiなどにドキュメントが散乱している</li><li>Excelなどで納品ドキュメントとして管理されているが、ソースコードと乖離している、および設計書がないプログラムがある</li></ul></li><li><p>本節では、チーム開発で共有するドキュメントについて述べる</p></li><li><p>ドキュメント管理ツールのSphinxを紹介</p></li></ul><h4 id="Sphinx"><a href="#Sphinx" class="headerlink" title="Sphinx"></a>Sphinx</h4><ul><li><p>Sphinxはドキュメントを簡単に作ることができるようにするツール</p></li><li><p>セットアップ</p><ul><li>Pythonを利用しているため、Pythonの実行環境が必要</li><li>Dockerを用いた方法を紹介</li></ul></li></ul><p>TODO: 後ほど実施</p><ul><li>Sphinxの特徴<ul><li>テキスト(MarkDown)形式</li><li>CIとの相性がよい</li><li>様々な出力形式をサポート</li></ul></li></ul><h3 id="7-5-ソースジェネレータ"><a href="#7-5-ソースジェネレータ" class="headerlink" title="7.5 ソースジェネレータ"></a>7.5 ソースジェネレータ</h3><p>SpringMVCに基づいた画面開発では、１つの機能を追加するために、多岐にわたるファイルの作成が必要<br>画面開発のたびに発生するファイル作成作業を効率化することで開発生産性を向上させることができる</p><p>通常のプロジェクト開発では多くの画面を開発する必要があり、大規模なプロジェクトだと数百画面もの開発が必要になってくる<br>プロジェクト開発で必要になってくる画面開発にかかる以下のコストを削減することで、開発生産性をさらに向上させることができる</p><ul><li>開発メンバー参画の際のパッケージ構成のベストプラクティスの共有</li><li>新規画面開発の際の必要なソースコード一式の作成作業</li></ul><p>この方法論は古くから知られており、有名なプロダクトとしては、YEOMANやAngularJSでも同様のツールセットが用意されている<br>  → AngularCliのことか</p><p>ここでは、Thymeleafを用いて、Gradleのカスタムプラグインとして、ソースジェネレータを作成する方法を紹介</p><h4 id="ソースジェネレータプラグインの導入"><a href="#ソースジェネレータプラグインの導入" class="headerlink" title="ソースジェネレータプラグインの導入"></a>ソースジェネレータプラグインの導入</h4><ul><li>次の手順で導入  <ul><li>GradlePluginの実装</li><li>GradlePluginの利用</li></ul></li></ul><p>TODO: 余裕があればソースコード生成の自動化を組めたら</p><ul><li>メンバー全員に自動生成の仕組みが浸透していない状態で導入すると、ごちゃごちゃするのであまりおすすめできないらしい</li></ul><h2 id="第8章-運用"><a href="#第8章-運用" class="headerlink" title="第8章 運用"></a>第8章 運用</h2><p>システム開発は、「開発を完了させること」＝「業務やサービスの提供が滞りなく進むこと」ではない<br>システムは、システムトラブルなどの望まない状態を排除・軽減し、利用者に継続的に使われていくことではじめて価値を生んでいきます。<br>IPAによると、運用コストはシステム開発の全体の3&#x2F;4以上のコストを占め、運用の重要性が高まってきている</p><h3 id="8-1-環境ごとの設定管理"><a href="#8-1-環境ごとの設定管理" class="headerlink" title="8.1 環境ごとの設定管理"></a>8.1 環境ごとの設定管理</h3><h4 id="Spring-Profiles"><a href="#Spring-Profiles" class="headerlink" title="Spring Profiles"></a>Spring Profiles</h4><p>開発&#x2F;本番環境の柔軟な切り替え</p><h4 id="環境ごとの設定管理"><a href="#環境ごとの設定管理" class="headerlink" title="環境ごとの設定管理"></a>環境ごとの設定管理</h4><p>ファイルを分ける方法を記載→理解しているので飛ばす</p><h3 id="8-2-アプリケーションサーバー設定"><a href="#8-2-アプリケーションサーバー設定" class="headerlink" title="8.2 アプリケーションサーバー設定"></a>8.2 アプリケーションサーバー設定</h3><p>本設では、SringBootで提供している組み込み型のWebサーバー（Embedded Web Servers）を配備するサーバーの設定方法を紹介</p><h4 id="実行可能Jar"><a href="#実行可能Jar" class="headerlink" title="実行可能Jar"></a>実行可能Jar</h4><p>以下を加えることでビルド時に依存下院系のあるライブラリを梱包したJarを容易に作成できる</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bootJar &#123;</span><br><span class="line">  launchScript()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="アプリケーションサーバーの設定及びリリース"><a href="#アプリケーションサーバーの設定及びリリース" class="headerlink" title="アプリケーションサーバーの設定及びリリース"></a>アプリケーションサーバーの設定及びリリース</h4><ul><li>systemdを用いたアプリケーションサーバーの設定</li></ul><p>TODO:　jarファイルの生成とDocker組み合わせまでできたらやってみる</p><h3 id="8-3-アプリケーションの状態確認"><a href="#8-3-アプリケーションの状態確認" class="headerlink" title="8.3 アプリケーションの状態確認"></a>8.3 アプリケーションの状態確認</h3><p>システム開発では、利用者に見える機能開発や画面デザインが優先されてしまい、SLAの検討が後回しになることが少なくありません。</p><p>本設では、SpringBootでのアプリケーションの状態の確認方法について紹介</p><h4 id="SpringBootActuator"><a href="#SpringBootActuator" class="headerlink" title="SpringBootActuator"></a>SpringBootActuator</h4><p>SpringBootには、Actuatorという安定運用に寄与する強力な機能があるActuatorを有効にすると、HTTPやJMX経由でアプリケーションの状態を確認でき、自前でヘルスチェックのエンドポイントを実装する必要はなくなる</p><ul><li>SpringBootActuatorを有効化する</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator</span></span><br><span class="line"><span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'org.springframework.boot'</span>, name: <span class="string">'spring-boot-starter-actuator'</span>, version: <span class="string">'2.3.0.RELEASE'</span></span><br></pre></td></tr></table></figure><p>上記の設定だけで、デフォルトではシャットダウンを除く全てのエンドポイントが有効になります</p><h4 id="主要なエンドポイント"><a href="#主要なエンドポイント" class="headerlink" title="主要なエンドポイント"></a>主要なエンドポイント</h4><ul><li><p>Beans</p><ul><li>アプリケーションに登録されたBeanの一覧を取得します。Curlでのリクエスト例を紹介</li></ul></li><li><p>Environment</p><ul><li>アプリケーションで利用している環境変数の一覧を取得</li></ul></li><li><p>Health</p><ul><li>アプリケーションのヘルスチェック。AutoConfigurationの状態をもとにデータベース接続やDiskFullのチェックを実施します</li></ul></li><li><p>HeapDump</p><ul><li>ヒープダンプファイルをHTTPエンドポイントから取得できる</li></ul></li><li><p>Mappings</p><ul><li>アプリケーションのエンドポイントとリクエストパスのマッピング情報を出力します。SpringFoxなどを導入しなくてもアプリケーションのエンドポイントの詳細な情報が取得できる</li></ul></li><li><p>Metrics</p><ul><li>アプリケーションの現在の状態を出力</li></ul></li><li><p>Thread Dump</p><ul><li>スレッドダンプを取得します</li></ul></li><li><p>Prometheus</p><ul><li>インフラサービス監視ツールのPrometheusへ連携するメトリクスを出力するエンドポイント</li><li>2018&#x2F;10現在、Prometheusエンドポイントを有効にするためには、ライブラリを追加する必要があるらしい</li></ul></li><li><p>Column Prometheusとは</p><ul><li>サーバーやインフラなどのメトリクスを取得できるOSSの統合監視ソリューション</li><li>Prometheusはインストールや設定が容易で、かつ十分な機能を持ち管理しやすいという特徴を持ちます。</li><li>Go言語で開発されており、バイナリと設定ファイルを用意するだけで利用できる他、Zabbixなどと異なり、データを格納するデータベースを別途用意する必要もありません。</li><li>また、DockerやKubernetesといったコンテナ&#x2F;クラスター管理ツールとの連携機能もあり、容易に監視対象を設定できるため、マイクロサービス開発を推進している企業での導入が増加</li></ul></li></ul><h4 id="エルスチェックのカスタマイズ"><a href="#エルスチェックのカスタマイズ" class="headerlink" title="エルスチェックのカスタマイズ"></a>エルスチェックのカスタマイズ</h4><p>Actuatorのデフォルトのヘルスチェックも強力ですが、ヘルスチェックをカスタマイズすることも可能</p><p>システム独自のチェックをすることができる</p><p>HealthIndicatorインターフェースを実装するBeanを登録することで実現できる</p><h4 id="SpringBootActuatorのセキュリティ制御"><a href="#SpringBootActuatorのセキュリティ制御" class="headerlink" title="SpringBootActuatorのセキュリティ制御"></a>SpringBootActuatorのセキュリティ制御</h4><p>アプリケーションの機密情報を取得できるため、システム管理者以外からのアクセスは遮断する必要がある</p><p>Spring Boot 2系では、&#x2F;info, &#x2F;health以外のエンドポイントはデフォルトで認可ありとなります。<br>認可なしにしつつ、Listenポートの変更及び接続元IPを制限する設定は以下</p><h3 id="8-4-アプリケーション監視"><a href="#8-4-アプリケーション監視" class="headerlink" title="8.4 アプリケーション監視"></a>8.4 アプリケーション監視</h3><p>システムを運用していくためには、アプリケーション状態の可視化およびアプリケーション異常を迅速に検知する必要がある</p><p>クラウドを用いた開発が普通（ニューノーマル）となった現在では、監視設計についてもクラウドに適したものにしていく必要があります。<br>本設では、システム運用に欠かせないアプリケーション監視について、Prometheusを用いる方法を説明</p><h4 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h4><ul><li>メリット<ul><li>導入の敷居の低さ</li><li>クラウドネイティブ時代に適した設計</li><li>オープンソース</li></ul></li></ul><p>なお、本番環境のトータルの運用コストを見据える場合は、有償の監視サービスのMackerelやDatadogも検討対象にしてみる</p><h4 id="Prometheusの導入"><a href="#Prometheusの導入" class="headerlink" title="Prometheusの導入"></a>Prometheusの導入</h4><ul><li><p>インストール方法は次の３つ</p><ul><li>バイナリのダウンロード</li><li>Docker</li><li>ソースビルド</li></ul></li><li><p>PrometheusのDownloadページよりターゲットOSのファイルをダウンロードし、展開するだけでインストールは完了</p></li></ul><h4 id="Prometheusのサービスディスカバリー"><a href="#Prometheusのサービスディスカバリー" class="headerlink" title="Prometheusのサービスディスカバリー"></a>Prometheusのサービスディスカバリー</h4><p>Prometheusにはサービスディスカバリ機能が備わっており、サービスの拡張に自動で追従します。<br>例えば、AWS EC2を利用している場合、サーバーの増減に自動で追従します</p><h4 id="Springアプリケーションとの連携"><a href="#Springアプリケーションとの連携" class="headerlink" title="Springアプリケーションとの連携"></a>Springアプリケーションとの連携</h4><ul><li>SpringActuatorとPrometheusは連携できる</li><li>設定する方法を記載</li></ul><h4 id="メトリクスの可視化"><a href="#メトリクスの可視化" class="headerlink" title="メトリクスの可視化"></a>メトリクスの可視化</h4><p>単体でもメトリクスの可視化はできるが、Grafanaと連携すればより強力にビジュアライズできる</p><ul><li>ダウンロード<ul><li>バイナリのダウンロード</li><li>パッケージマネージャインストール</li></ul></li></ul><h4 id="アラート通知"><a href="#アラート通知" class="headerlink" title="アラート通知"></a>アラート通知</h4><p>Prometheusは複数のコンポーネントで構成されており、アラート通知もオプション構成となっている</p><ul><li><p>AlertManagerのインストール</p><ul><li>アラート通知を実現するためには、Prometheus本体のPush通知を処理するAlertManagerのインストールが必要</li><li>バイナリファイルをダウンロードして展開する</li></ul></li><li><p>Slack通知設定</p><ul><li>本書では、Slack通知の設定方法を説明</li><li>AlertManagerはメール、HipChatなどの連携をデフォルトでサポートしています</li></ul></li></ul><p>TODO:　このあたりは見返して設定していきたい</p><h3 id="8-5-リクエスト追跡"><a href="#8-5-リクエスト追跡" class="headerlink" title="8.5 リクエスト追跡"></a>8.5 リクエスト追跡</h3><p>本番環境では、可用性要件を考慮の上、アプリケーションサーバーを冗長化することが多く行われます。<br>また並行性を考慮するとアプリケーションサーバーは状態をNoSQLやRDBに保持させるステートレス構成とし、<br>スケールアウト及びスケールイン構成とすることも多く行われます。</p><p>アプリケーションが多層で連携する場合、各層でリクエストを処理するサーバーが不定となるため、ユーザーの行動履歴をトレースするためには、リクエスト追跡の仕掛けを導入する必要があります。本節では、リクエスト追跡の方法としてnginxを用いる方法を紹介</p><h4 id="nginxトレース"><a href="#nginxトレース" class="headerlink" title="nginxトレース"></a>nginxトレース</h4><p>静的コンテンツ配信の最適化やプロキシ用途でnginxを導入することは多く行われる</p><p>nginxは以下の用に設定すると、リクエストIDがCookieに付与される</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">userid           on;</span><br><span class="line">userid_name      uid;</span><br><span class="line">userid_domain    example.com;</span><br><span class="line">userid_path      &#x2F;;</span><br><span class="line">userid_expires   365d;</span><br></pre></td></tr></table></figure><h4 id="nginxとのトレースIDの統合"><a href="#nginxとのトレースIDの統合" class="headerlink" title="nginxとのトレースIDの統合"></a>nginxとのトレースIDの統合</h4><p>前項では、ミドルウェア（nginx）でリクエスト追跡IDを発行する方法を紹介<br>リクエスト追跡を切れ目なく実現するために、nginxとリクエスト追跡IDの統合の方法を紹介</p><p>リクエスト追跡機能は横断的関心事（cross-cutting concerns）のため、SpringAOPで実装する方針が望ましいと言えます</p><ul><li><p><code>RequestTrackingInterceptor.java</code>に実装した内容のことを説明していた</p></li><li><p>Column ログ集約ソリューション</p><ul><li>複数台構成のアプリケーションをステートレスにと持つことを望ましい構成とすると、各アプリケーションサーバーにSSH接続してログを確認する方法では運用が大変</li><li>上述の課題に対応するためには、ログ集約の仕組みを導入する方法がよい</li><li>ログ集約のソリューションとしては、商用のSplunk、DatadogやOSSのFluentd、Logs、AzureではLogAnalyticsなどの仕組みがある。アプリケーションを複数台で運用する際はこれらのソリューションの導入も検討してみて</li></ul></li></ul><p>TODO: OSSのFluentdは使ってみたい</p><h3 id="8-6-レイテンシ分析"><a href="#8-6-レイテンシ分析" class="headerlink" title="8.6 レイテンシ分析"></a>8.6 レイテンシ分析</h3><p>リクエスト追跡が可能な構成で、かつ応答遅延が発生した場合は、ボトルネック箇所を特定し対応を検討する必要がある<br>また、MSA開発では、多層、多数のサービスが連携するため、サービスのどこがボトルネックであるか特定できる仕組みの導入が望ましいと言えます。</p><p>本節では、SpringエコシステムであるSpringCloudプロジェクトのSpringCloudSleuthを用いてレイテンシ分析する方法を紹介</p><h4 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud Sleuth"></a>Spring Cloud Sleuth</h4><p>FrontentとBackendで同じIDを出力して処理を追うことができますよっていう説明<br>RestTemplateを使用する必要があるみたい</p><p>ここでレイテンシが図られる様子<br>Zipkinで可視化できるみたい</p><h3 id="8-7-無停止デプロイ"><a href="#8-7-無停止デプロイ" class="headerlink" title="8.7 無停止デプロイ"></a>8.7 無停止デプロイ</h3><p>BtoCサービス開発の場合、サービスに影響をおよぼさず無停止でアプリケーションをデプロイする必要が多くあります。<br>特に利用者が多い場合は、必須の要件となります。</p><p>本節では、オンプレミスの条件付きで、無停止でアプリケーションを更新する方法を紹介</p><h4 id="ローリングデプロイ"><a href="#ローリングデプロイ" class="headerlink" title="ローリングデプロイ"></a>ローリングデプロイ</h4><h4 id="ローリングデプロイ作業フロー"><a href="#ローリングデプロイ作業フロー" class="headerlink" title="ローリングデプロイ作業フロー"></a>ローリングデプロイ作業フロー</h4><ul><li>Step1. アプリサーバー#1へのデプロイ<ul><li>プロキシサーバーからアプリサーバー#1へのリクエスト振り分けを停止</li><li>アプリサーバー#1のアプリケーションをデプロイ</li></ul></li></ul><h4 id="ローリングデプロイ作業手順"><a href="#ローリングデプロイ作業手順" class="headerlink" title="ローリングデプロイ作業手順"></a>ローリングデプロイ作業手順</h4><p>TODO: nginxの設定ファイルの変更方法も記載しているので後で参考にして設定しておきたい</p><h3 id="8-8-コンテナオーケストレーションツールへのデプロイ"><a href="#8-8-コンテナオーケストレーションツールへのデプロイ" class="headerlink" title="8.8 コンテナオーケストレーションツールへのデプロイ"></a>8.8 コンテナオーケストレーションツールへのデプロイ</h3><p>コンテナをデプロイする基盤としてのコンテナオーケストレーションツールは、激しい開発競争が繰り広げられましたが、Kubernetesがデファクトスタンダードとなっている</p><p>本節では、SpringBootアプリケーションを、Dockerコンテナを用い、コンテナオーケストレーションツールのKubernetesを用いてデプロイする方法を紹介</p><h4 id="コンテナイメージの作成"><a href="#コンテナイメージの作成" class="headerlink" title="コンテナイメージの作成"></a>コンテナイメージの作成</h4><p>TODO: Kubernetesを使ったコンテナ管理…後でDockerを一通り使い倒した後確認する</p><h2 id="第9章-（Spring-Bootアプリケーションが想定している）システム構成"><a href="#第9章-（Spring-Bootアプリケーションが想定している）システム構成" class="headerlink" title="第9章 （Spring Bootアプリケーションが想定している）システム構成"></a>第9章 （Spring Bootアプリケーションが想定している）システム構成</h2><p>どんなにアプリケーションコードが優れていても、システム・アーキテクチャ設計が適切でないと安定的にサービスを提供できません。本ChapterではSpringBootで作成したアプリケーションを中心とした本番環境のシステム・アーキテクチャ構成について検討します。</p><h3 id="9-1-システム・アーキテクチャ考察"><a href="#9-1-システム・アーキテクチャ考察" class="headerlink" title="9.1 システム・アーキテクチャ考察"></a>9.1 システム・アーキテクチャ考察</h3><p>データベースを用いるSpringBootで作成したアプリケーションの場合、１つの仮想サーバーにアプリケーションおよびデータベースを構築することで、最小限の構成によるサービスの提供は可能</p><p>クラウドネイティブが常識となった現在では、クラウドベンダーが提供するマネージドサービスの特性を理解し、適切なアーキテクチャ設計を行う必要があります。</p><h4 id="システムが必要とする要件"><a href="#システムが必要とする要件" class="headerlink" title="システムが必要とする要件"></a>システムが必要とする要件</h4><ul><li>要件<ul><li>可用性：稼働率は99.9%以上を目標とすること</li><li>拡張性：スループットの増加に対して、サービスが低下しない性能を維持するための資源の追加が容易に行えること</li><li>完全性：データの操作にはACIDを保証し、データの堅牢性を実現すること</li></ul></li></ul><h4 id="システム要件の検討"><a href="#システム要件の検討" class="headerlink" title="システム要件の検討"></a>システム要件の検討</h4><ul><li><p>可用性</p><ul><li>システム構築ではSLAが明記されることが普通</li><li>サービス品質がSLAの保証値を著しく下回った場合には、ペナルティが発生することもあります。</li><li>SLAに可用性99.9%と記載されている場合、数値として年間にして９時間弱、月間にして４４分弱以内の停止しか許さないシステム構成を検討する必要がある</li></ul></li><li><p>拡張性</p><ul><li>システム構築では、サービス特性によりシステムへの負荷がばらついたり、突発的な高負荷が発生したりすることがあります。</li><li>可能な限りシステムリソースのスケールアウト及びスケールインできるように設計することが望ましいと言えます。</li></ul></li><li><p>完全性</p><ul><li>システム構築では、システムじの状態をRDBなどのデータストアに保管することが普通</li><li>システムで保管した情報資産が正当な権利を持たない人により変更されていないことを確実にしておくよう設計する必要があります。また、データの消失を防ぐための対策も実施していく必要があります</li></ul></li><li><p>コスト</p><ul><li>Capter8で解説したように、運用コストはシステム開発全体の3&#x2F;4以上のコストを締めます。<ul><li>システムリソースの運用コスト（ハードウェアコストやライセンスコストなど）</li><li>システム運用のコスト（人件費など）</li></ul></li></ul></li></ul><h3 id="9-2-システム・アーキテクチャ案"><a href="#9-2-システム・アーキテクチャ案" class="headerlink" title="9.2 システム・アーキテクチャ案"></a>9.2 システム・アーキテクチャ案</h3><p>AWSを利用したアーキテクチャ例を記載している</p><h4 id="構成要素一覧"><a href="#構成要素一覧" class="headerlink" title="構成要素一覧"></a>構成要素一覧</h4><h4 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h4><h4 id="拡張性"><a href="#拡張性" class="headerlink" title="拡張性"></a>拡張性</h4><h4 id="コスト"><a href="#コスト" class="headerlink" title="コスト"></a>コスト</h4><h3 id="9-3-構築チュートリアル"><a href="#9-3-構築チュートリアル" class="headerlink" title="9.3 構築チュートリアル"></a>9.3 構築チュートリアル</h3><p>Teraformを利用した環境構築を紹介している</p><h2 id="第10章-Spring5-x2F-Spring-Boot2の新機能"><a href="#第10章-Spring5-x2F-Spring-Boot2の新機能" class="headerlink" title="第10章 Spring5&#x2F;Spring Boot2の新機能"></a>第10章 Spring5&#x2F;Spring Boot2の新機能</h2><p>2017年にリリースされたSpring5,2018年にリリースされたSpringBoot2の新機能のうち、<br>今後重要になると考えられるWebFluxについて説明</p><h3 id="10-1-WebFlux"><a href="#10-1-WebFlux" class="headerlink" title="10.1 WebFlux"></a>10.1 WebFlux</h3><p>HTTPを利用したシステムの範囲が拡大し、同時アクセスが増えていくにつれて、Webアプリケーションにおけるコンピュータリソースに対して待ちが多いことがわかってきました。<br>そのため非同期処理を用いたWebアプリケーションが求められる様になりました。その解決案の１つとしてリアクティブプログラミングが選ばれ、Srping5&#x2F;SpringBoot2においてはWebFlux飛ばれるリアクティブプログラミングを用いたWebプログラムを書くことができるようになりました。<br>このプログラムは同期ではないのでブロックされることなく、実施されてI&#x2F;O待ちのような状態にはならず、I&#x2F;Oが発生したタイミングで実施されることになります。</p><p>TODO:　実装ハードル高そう。色々考えること多いので後で見返す</p><h2 id="第11章-ローカル開発環境の構築について"><a href="#第11章-ローカル開発環境の構築について" class="headerlink" title="第11章 ローカル開発環境の構築について"></a>第11章 ローカル開発環境の構築について</h2><h2 id="第12章-サンプルアプリについて"><a href="#第12章-サンプルアプリについて" class="headerlink" title="第12章 サンプルアプリについて"></a>第12章 サンプルアプリについて</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;現場至上主義SpringBoot2徹底活用&quot;&gt;&lt;a href=&quot;#現場至上主義SpringBoot2徹底活用&quot; class=&quot;headerlink&quot; title=&quot;現場至上主義SpringBoot2徹底活用&quot;&gt;&lt;/a&gt;現場至上主義SpringBoot2徹底活用&lt;/</summary>
      
    
    
    
    <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>Spring徹底入門</title>
    <link href="http://yoursite.com/JAVA/2020-05_Spring%E5%BE%B9%E5%BA%95%E5%85%A5%E9%96%80/"/>
    <id>http://yoursite.com/JAVA/2020-05_Spring%E5%BE%B9%E5%BA%95%E5%85%A5%E9%96%80/</id>
    <published>2020-04-30T15:00:00.000Z</published>
    <updated>2020-05-29T16:24:02.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring徹底入門"><a href="#Spring徹底入門" class="headerlink" title="Spring徹底入門"></a>Spring徹底入門</h1><ul><li><p>目次</p><ul><li>第1章　Spring Frameworkとは</li><li>第2章　Spring Core（DI×AOP）</li><li>第3章　データアクセス（Tx、JDBC）</li><li>第4章　Spring MVC</li><li>第5章　Webアプリケーションの開発</li><li>第6章　RESTful Webサービスの開発</li><li>第7章　Spring MVC の応用</li><li>第8章　Spring Test</li><li>第9章　Spring Security</li><li>第10章　Spring Data JPA</li><li>第11章　Spring ＋ MyBatis</li><li>第12章　Spring＋Thymeleaf</li><li>第13章　Spring Boot</li><li>第14章　チュートリアル</li></ul></li><li><p>形式：書籍</p></li><li><p>発売日：2016年07月20日</p></li><li><p>ISBN：9784798142470</p></li><li><p>価格：本体4,000円＋税</p></li><li><p>仕様：B5変・744ページ</p></li></ul><h2 id="第1章-Spring-Frameworkとは"><a href="#第1章-Spring-Frameworkとは" class="headerlink" title="第1章　Spring Frameworkとは"></a>第1章　Spring Frameworkとは</h2><ul><li><p>Spring Frameworkの概要</p><ul><li>「Spring Frameworkは、開発当初より古いインフラ環境上でも新しいインフラ環境上でも、最新のプログラミング思想で開発出来ることを設計思想にしている」</li></ul></li><li><p>Spring Frameworkの歴史</p><ul><li>2003年：Interface21 Framework → Spring Frameworkへと変更になった (Expert One-one-One: J2EE Design and Development)</li><li>2004年：EJBを使わずにSpringFramework1.0で開発する方法</li><li>2005年：SpringFramework1.2 の機能をカバーした書籍が刊行 SpringをStruts,Hibernateと組み合わせて使う（SSH）</li><li>2006年：SpringFramework2.0がリリース</li><li>2007年：SpringFramework2.5 アノテーションベースのDIやMVC<ul><li>米国に拠点を移す SpringToolSuiteなど統合開発環境の提供が始まる</li></ul></li><li>2009年：SpringFramework3.0がリリース JSR330に対応</li><li>2013年：SpringFramework4.0がリリース WebsocketやWebメソッドなどをサポート<ul><li>Pivotalという新しい会社にスピンオフ</li></ul></li><li>2014年：昨今注目されているSpringBootやSpringIOPlatformプロジェクトが始まる</li></ul></li><li><p>Springの各種プロジェクトについて</p><ul><li>SpringMVC: Webアプリケーションを開発するためのフレームワークであり、MVCパターンを利用している<ul><li>MVCパターンには、「アクションベースフレームワーク」と「コンポーネントベースフレームワーク」の２パターンある<ul><li>アクションベースフレームワーク<ul><li>リクエストによって実行する処理（アクション）を決定し、処理の結果としてレスポンスを返すフレームワーク</li></ul></li><li>コンポーネントベースフレームワーク<ul><li>リクエストやレスポンスを抽象化（隠蔽）し、画面を構成するコンポーネントをベースにWebアプリケーションを開発するフレームワーク</li><li>JSFはコンポーネントベースのフレームワーク<ul><li>MEMO: JavaEE徹底入門読んで理解した！</li></ul></li></ul></li></ul></li><li>各種サードパーティとの連携機能もある<ul><li>Jackson</li><li>ApacheTiles</li><li>FreeMarker</li><li>Rome</li><li>JasperReports<ul><li>また、Thymeleafなど、サードパーティ自体がSpringMVCをサポートしているケースも有る</li></ul></li></ul></li></ul></li></ul></li><li><p>Spring Security</p><ul><li>Authentication(認証)</li><li>Authorization(認可)などのセキュリテイ要件を用意に実現するためのフレームワーク<ul><li>非常に多くの認証方式に対応している<ul><li>Basic認証</li><li>ダイジェスト認証</li><li>X.509クライアント証明証</li><li>LDAP</li><li>OpenID</li></ul></li></ul></li></ul></li><li><p>Spring Data</p><ul><li>Spring Dataはリレーショナル・データベースやNoSQL、Key-Valueストアなど様々なデータストアへのデータアクセスを用意にするためのもの<ul><li>Spring Data Commons</li><li>Spring Data JPA</li><li>Spring Data MongoDB, Spring Data Redis, Spring Data Solr, etc…</li></ul></li></ul></li><li><p>Spring Batch</p><ul><li>バッチアプリケーション向けの軽量フレームワーク</li><li>大容量のデータ処理に必要な共通機能を提供している</li><li>もともと、Accentureが開発したバッチアプリケーション向けのフレームワークをベースとしており、2008年にSpringBatchとしてバージョン1.0がリリース</li></ul></li><li><p>Spring Integration</p><ul><li>Enterprise Integration Patterns(EIP)としてよく知られているさまざまなシステム間を連携させるアーキテクチャパターンに基づく開発をサポートするフレームワーク</li><li>同様の機能を実現するOSSとして、ApacheCamelが有名です。</li></ul></li><li><p>Spring Cloud</p><ul><li>分散環境でCloud Nativeなアプリケーションを開発するためのフレームワーク及びツール群<ul><li>SpringCloudConfig</li><li>SpringCloudBus</li><li>SpringCloudConnectors</li><li>SpringCloudNetflix</li></ul></li></ul></li><li><p>Spring tool Suite</p><ul><li>Eclipseベースの統合開発環境</li></ul></li><li><p>Spring IO Platform</p><ul><li>依存関係を管理するためのライブラリー</li></ul></li><li><p>Spring Boot</p><ul><li>最小限の設定でプロダクションレベルのSpringアプリケーションを容易に開発するためのSpringプロジェクト</li></ul></li><li><p>JavaEEとの関係</p><ul><li>差は縮まっている</li><li>Springのほうが新しい技術を取り込むサイクルが早い</li></ul></li></ul><h2 id="第2章-Spring-Core（DI×AOP）"><a href="#第2章-Spring-Core（DI×AOP）" class="headerlink" title="第2章　Spring Core（DI×AOP）"></a>第2章　Spring Core（DI×AOP）</h2><ul><li><p>DIコンテナメリット</p><ul><li>インスタンスのスコープを制御できる</li><li>インスタンスのライフサイクルを制御できる</li><li>共通機能を組み込める</li><li>コンポーネント間が疎結合になるため、単体テストがしやすい</li></ul></li><li><p>SpringFramework以外の有名なDIコンテナのフレームワーク</p><ul><li>CDI(Contexts&amp;DependencyInjection) ：JavaEE6で導入されたコンテキストに対応したDIの仕様</li><li>Google Guice</li><li>Dagger</li></ul></li><li><p>ApplicationContextとBean定義</p><ul><li>SpringFrameworkではApplicationContextがDIコンテナの役割を担う<ul><li>DIコンテナに登録するコンポーネントのことを「Bean」</li><li>Configurationのことを「Bean定義」</li><li>DIコンテナからBeanを取得することを「ルックアップ」という</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserService userService = context.getBean(UserService.class);</span><br><span class="line">UserService userService = context.getBean(<span class="string">"userService"</span>,UserService.class);</span><br><span class="line">UserService userService = (UserService)context.getBean(<span class="string">"userService"</span>);</span><br></pre></td></tr></table></figure><ul><li><p>代表的なBean定義の方法</p><ul><li>JavaベースConfiguration</li><li>XMLベースConfiguration</li><li>アノテーションベースConfiguration</li></ul></li><li><p>それぞれ１つだけを使用して実装もできるが、通常は</p><ul><li>JavaベースConfigurationとアノテーションベースConfigurationの組み合わせ、または</li><li>XMLベースConfigurationとアノテーションベースConfigurationの組み合わせを用いてBean定義を行う</li></ul></li><li><p>Configuration方法</p></li><li><p>javaベース、XMLベース、アノテーションベースの説明</p></li><li><p>インジェクションの種類</p><ul><li>セッターインジェクション</li><li>コンストラクタインジェクション</li><li>フィールドインジェクション</li></ul></li><li><p>オートワイヤリング</p><ul><li><code>@Bean</code>メソッドや<code>&lt;bean&gt;</code>要素で明示的にBean定義しなくても自動的にＤＩコンテナにインジェクションさせる仕組み</li><li>解決方法は２つ<ul><li>型によるもの（by Type）</li><li>名前によるもの（by Name）</li></ul></li></ul></li><li><p>型による解決</p><ul><li>デフォルトでインジェクションされる事が必須</li><li>対象の型を持つ<code>Bean</code>が１つも登録されていないと<code>org.springframework.beans.factory.NoSuchBeanDefinitionException</code>が発生</li></ul></li></ul><p>required &#x3D; false を指定するか</p><ul><li><p>Spring4からは、<code>required = false</code>の代わりに、JavaSE8から導入された、<code>java.util.Optional</code>を使用することが出来る</p><ul><li>MEMO: <code>Optional&lt;T&gt;</code>で実装できる！絶対こっちのほうがいい　関数型プログラミングの本で知った。</li></ul></li><li><p>名前による解決</p><ul><li>同じ親クラスを持つ２つの実装クラスに<code>Bean</code>定義をして、インジェクションする場合</li><li><code>@Qualifier</code>で名前を指定してあげないといけない</li><li><code>@Primary</code>を使えば、名前を指定しなかった時にインジェクションされるデフォルトを指定できる</li><li>名前には、実装クラス名を記載するべきではない。呼び出し側で実装を特定してしまうとDIの意味がなくなる。用途名を指定するべき。</li><li>用途は文字列ではなく、アノテーションでも指定できる。</li></ul></li><li><p><input disabled="" type="checkbox"> 用途を指定するためのアノテーション作成してみたい</p></li><li><p><input disabled="" type="checkbox"> 独自アノテーションを作成してみる</p></li><li><p>名前によるオートワイヤリング</p><ul><li><code>@Resource</code>を付与</li><li>フィールド名がBean名に一致するパターン</li><li>プロパティ名がBean名に一致するパターン</li></ul></li><li><p>コレクションやmap型によるオートワイヤリング</p></li></ul><h3 id="2-1-6-コンポーネントスキャン"><a href="#2-1-6-コンポーネントスキャン" class="headerlink" title="2.1.6 コンポーネントスキャン"></a>2.1.6 コンポーネントスキャン</h3><ul><li><p>デフォルトのコンポーネントスキャン</p><ul><li>以下のアノテーションが付いたクラスがＤＩコンテナに登録される<ul><li><code>@org.springfrwamework.stereotype.Component</code></li><li><code>@org.springfrwamework.stereotype.Controller</code></li><li><code>@org.springfrwamework.stereotype.Service</code></li><li><code>@org.springfrwamework.stereotype.Repository</code></li><li><code>@org.springfrwamework.context.annotation.Configuration</code></li><li><code>@org.springfrwamework.web.bind.annotation.RestController</code></li><li><code>@org.springfrwamework.web.bind.annotation.ControllerAdvice</code></li><li><code>@javax.annotation.ManagedBean</code></li><li><code>@javax.inject.Named</code></li></ul></li></ul></li><li><p>コンポーネントスキャンは広範囲な程処理が遅くなるので不適切</p><ul><li><code>@ComponentScan(basePackages = &quot;com&quot;)</code></li><li><code>@ComponentScan(basePackages = &quot;com.example&quot;)</code></li></ul></li><li><p>対象のアプリケーションのトップレベル、あるいはもう１階層下をスキャン対象にすべき</p><ul><li><code>@ComponentScan(basePackages = &quot;com.example.demo&quot;)</code></li><li><code>@ComponentScan(basePackages = &quot;com.example.demo.app&quot;)</code></li></ul></li><li><p>value属性は basePackages属性の別名であり、どちらを使用しても構いません。この属性を省略した場合、コンフィグレーションクラスと同じパッケージ配下をスキャンすることに注意する事</p></li><li><p>スキャン対象のアノテーションとしては以下の４種類がよく使われる</p></li></ul><table><thead><tr><th>アノテーション</th><th>説明</th></tr></thead><tbody><tr><td>@Controller</td><td>MVCパターンのC(Controller)の役割を担うコンポーネントであることを示すアノテーション。このアノテーションを付与したコンポーネントでは、クライアントからのリクエストとクライアントへのレスポンスに関わる処理を実装する。ビジネスロジックは、<code>@Service</code>を付与したコンポーネントで行う</td></tr><tr><td>@Service</td><td>ビジネスロジック（ビジネスルール）を提供するコンポーネントであることを示すアノテーション。このアノテーションを付与したコンポーネントでは、ビジネスルールが関わる処理を実装する。データの永続化に関わる処理は<code>@Repository</code>を付与したコンポーネントで行う。</td></tr><tr><td>@Repository</td><td>データの永続化に悪化÷処理を提供するコンポーネントであることを示すアノテーション。このアノテーションを付与したコンポーネントでは、ORM(Object-Relational Mapper)などの永続化ライブラリ等を使用して、データのCRUD処理を実装する</td></tr><tr><td>@Component</td><td>上記３に当てはまらないコンポーネント（ユーティリティクラスやサポートクラスなど）に付与するアノテーション</td></tr></tbody></table><ul><li><p>フィルタを明示したコンポーネントスキャン</p><ul><li>アノテーションによるフィルタ</li><li>代入可能な型によるフィルタ</li><li>正規表現によるフィルタ</li><li>AspectJパターンによるフィルタ</li></ul></li><li><p><input disabled="" type="checkbox"> フィルタを駆使するパターンについてメリットがあまり分からないため飛ばす.. あとで調べる</p></li></ul><h3 id="2-1-7-Beanのスコープ"><a href="#2-1-7-Beanのスコープ" class="headerlink" title="2.1.7 Beanのスコープ"></a>2.1.7 Beanのスコープ</h3><ul><li>DIコンテナを使用するメリット<ul><li>Beanのスコープ（生存期間）の管理をコンテナに任せる事が出来ること</li></ul></li></ul><table><thead><tr><th>スコープ</th><th>説明</th></tr></thead><tbody><tr><td>singleton</td><td>DIコンテナの起動時にBeanのインスタンスを生成し、同一のインスタンスを共有して利用する。デフォルトの設定であり、スコープを設定しない場合はsingletonとして扱われる</td></tr><tr><td>prototype</td><td></td></tr><tr><td>session</td><td></td></tr><tr><td>request</td><td></td></tr><tr><td>globalSession</td><td></td></tr><tr><td>application</td><td></td></tr><tr><td>カスタムスコープ(独自の命名)</td><td></td></tr></tbody></table><ul><li>覚書<ul><li><code>@Bean</code>アノテーションの使いどころ<ul><li><code>@Configuration</code>クラスの中に定義しているメソッドに付与して使う</li><li>DIコンテナに登録され、デフォルトではsingletonで参照出来る</li></ul></li></ul></li></ul><h3 id="2-1-8-Beanのライフサイクル"><a href="#2-1-8-Beanのライフサイクル" class="headerlink" title="2.1.8 Beanのライフサイクル"></a>2.1.8 Beanのライフサイクル</h3><ol><li>初期化フェーズ</li><li>利用フェーズ</li><li>終了フェーズ</li></ol><h3 id="2-1-9-Configurationの分割"><a href="#2-1-9-Configurationの分割" class="headerlink" title="2.1.9 Configurationの分割"></a>2.1.9 Configurationの分割</h3><ul><li><p>DIコンテナで管理するBeanが多くなるとConfigurationも肥大化してしまう</p></li><li><p>Configurationの範囲を明確にし、可読性を上げるために、必要に応じてConfigurationの分割を行う</p></li><li><p><code>@import</code>を使えば複数のConfigurationクラスに分割ができる</p><ul><li>MEMO: importでまとめなくても、<code>@Configuration</code>でコンポーネントスキャンされるので関係ないと思う</li><li>Contextから取得してわざわざアクセスしていた際に有用な方法だったと考える</li></ul></li></ul><h3 id="2-1-10-Configurationのプロファイル化"><a href="#2-1-10-Configurationのプロファイル化" class="headerlink" title="2.1.10 Configurationのプロファイル化"></a>2.1.10 Configurationのプロファイル化</h3><ul><li><p>Springでは異なる環境や目的ごとにConfigurationをグループ化することができる</p></li><li><p>このグループを「プロファイル」といいます。</p></li><li><p>例えば、環境ごとに「developmentプロファイル」「testプロファイル」などを作成することが考えられる</p></li></ul><p><code>@Profile</code>アノテーションを使用して指定する</p><ul><li><p>使用するプロファイルの選択方法</p><ul><li>JVM引数 <code>-Dspring.profiles.acrive=production</code></li><li>環境変数 <code>export SPRING_PROFILES_ACTIVE=production</code></li><li>WEB.xmlに記載することもできる（割愛）</li><li><code>application.yml</code> に指定することもできる（割愛）</li></ul></li><li><p>MEMO: 環境ごとの情報を定義するためのJavaクラスにアノテーションを付与して実現するのは微妙だと思うので、</p><ul><li><code>application.yml</code>で管理するのが良いだろうと思う</li></ul></li></ul><h3 id="2-1-11-JSR-330-Dependency-Injection-for-Java"><a href="#2-1-11-JSR-330-Dependency-Injection-for-Java" class="headerlink" title="2.1.11 JSR 330: Dependency Injection for Java"></a>2.1.11 JSR 330: Dependency Injection for Java</h3><ul><li>Springで、Java標準のJSR330で定められたAPI（主にアノテーション）を使用することができる</li></ul><table><thead><tr><th>Spring</th><th>JSR</th><th>説明</th></tr></thead><tbody><tr><td><code>@Autowired</code></td><td><code>@Inject</code></td><td><code>@Inject</code>には必須チェック（required属性）がない</td></tr><tr><td><code>@Component</code></td><td><code>@Named</code></td><td>Springの場合はデフォルトでSingletonスコープであるが、JSR330の場合はデフォルトでprototypeスコープである</td></tr><tr><td><code>@Qualifier</code></td><td><code>@Named</code></td><td><code>@Named</code>が兼用される</td></tr><tr><td><code>@Scope</code></td><td><code>@Scope</code></td><td>JSR330の<code>@Scope</code>はスコープを定義するカスタムアノテーションを作るためのメタアノテーション</td></tr></tbody></table><ul><li>Springを使うのであれば、特にこだわりがなければ、Springのアノテーションを使うのがいいでしょう</li></ul><h3 id="2-2-AOP"><a href="#2-2-AOP" class="headerlink" title="2.2 AOP"></a>2.2 AOP</h3><ul><li><p>ロギング処理、キャッシュ処理など本質的ではない処理がいろいろなロジック中に散在するようになる</p></li><li><p>複数のモジュールにまたがって存在する処理は、「横断的関心事（Cross-Cutting Concern）」と呼ばれる</p></li><li><p>代表的なものとしては以下</p><ul><li>セキュリティ</li><li>ログ出力</li><li>トランザクション</li><li>モニタリング</li><li>キャッシュ</li><li>例外ハンドリング</li></ul></li><li><p>プログラムの中から横断的関心事を取り除き、一箇所に集めることを「横断的関心事の分離（Separation Of Cross-Cutting Concerns）」と呼び</p></li><li><p>これを実現する手法をアスペクト指向プログラミングといいます</p></li></ul><h3 id="2-2-1-AOPの概要"><a href="#2-2-1-AOPの概要" class="headerlink" title="2.2.1 AOPの概要"></a>2.2.1 AOPの概要</h3><ul><li><p>AOPはDIと並ぶSpringFrameworkの重要な機能</p></li><li><p>AOPのコンセプト</p><ul><li>Aspect<ul><li>AOPの単位となる横断的な関心事を示すモジュールそのもの</li></ul></li><li>Join Point<ul><li>横断的な関心事を実行するポイント（メソッド実行時や例外スロー時など）</li><li>Join PointはAOPライブラリーによって使用が決められている</li><li>SpringのAOPでは、Join Pointはメソッドの実行時</li></ul></li><li>Advice<ul><li>特定のJoin Pointで実行されるコードのことで、横断的な関心事を実装する箇所</li><li>Adviceには、Around,Before,Afterなど複数の種類が存在する</li></ul></li><li>PointCut<ul><li>実行対象のJoin Pointを選択する表現式のこと</li><li>SpringAOPではBean定義ファイルやアノテーションを利用してPointCutを定義</li></ul></li><li>Weaving<ul><li>アプリケーションコードの適切なポイントにAspectを入れ込む処理のこと</li><li>AOPライブラリにはWeavingをコンパイル時に行うもの、クラスロード時に行うもの、実行時に行うものがあり、SpringAOPは実行時にWeavingを行う</li></ul></li><li>Target<ul><li>AOP処理によって、処理フローが変更されたオブジェクトのこと</li><li>TargetオブジェクトはAdvisedオブジェクトと呼ばれることもある</li></ul></li></ul></li></ul><h3 id="2-2-2-Spring-AOP"><a href="#2-2-2-Spring-AOP" class="headerlink" title="2.2.2 Spring AOP"></a>2.2.2 Spring AOP</h3><ul><li>SpringAOP は現場で広く使われているAOPフレームワークであるAspectJを利用している</li></ul><h3 id="2-2-3-Adviceの実装方法"><a href="#2-2-3-Adviceの実装方法" class="headerlink" title="2.2.3 Adviceの実装方法"></a>2.2.3 Adviceの実装方法</h3><ul><li>Before</li><li>After Returning</li><li>After Throwing など記載していく</li><li>括弧にPointCut式を記載する</li></ul><h3 id="2-2-4-XMLでAdviceの実装"><a href="#2-2-4-XMLでAdviceの実装" class="headerlink" title="2.2.4 XMLでAdviceの実装"></a>2.2.4 XMLでAdviceの実装</h3><p>XMLに記載する方法について</p><h3 id="2-2-5-Pointcut式"><a href="#2-2-5-Pointcut式" class="headerlink" title="2.2.5 Pointcut式"></a>2.2.5 Pointcut式</h3><p>Joint Pointを指すPointCutとして<code>execution(* *..*ServiceImple.*(..))</code>という式を使ってきたがその打ち合わけを記載</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">                                                ↓メソッド</span><br><span class="line"><span class="meta">@After</span>(execution(* com.example.domain.*Service.find*(..)))</span><br><span class="line">                 ↑戻り値　↑パッケージ   ↑型、クラス     ↑引数</span><br></pre></td></tr></table></figure><ul><li><p>PointCut式で利用可能なワイルドカード</p><ul><li><code>*</code></li><li><code>..</code></li><li><code>+</code></li></ul></li><li><p>名前付きポイントカットの書き方</p></li></ul><h3 id="2-2-6-Springプロジェクトで利用されているAOP"><a href="#2-2-6-Springプロジェクトで利用されているAOP" class="headerlink" title="2.2.6 Springプロジェクトで利用されているAOP"></a>2.2.6 Springプロジェクトで利用されているAOP</h3><ul><li>トランザクション管理処理：メソッドに<code>@Transaction</code>アノテーションを付与</li><li>認可処理：<code>@PreAuthorize</code>アノテーションを付与</li><li>キャッシュ処理：<code>@Cacheable(&quot;key&quot;)</code>ですでにキャッシュがある場合はメソッドを実行せずにキャッシュされた値を返す</li><li>非同期処理：<code>@Async</code>をメソッドに付与、指定された戻り値（<code>CompletableFuture&lt;Result&gt;</code>）を指定することで非同期実行ができる</li><li>リトライ処理：<code>@Retryable(maxAttempts=3)</code>をメソッドに付与。信頼性をコントロールできない外部接続先の呼び出しなどで有用</li></ul><h3 id="2-3-データバインディングと型変換"><a href="#2-3-データバインディングと型変換" class="headerlink" title="2.3 データバインディングと型変換"></a>2.3 データバインディングと型変換</h3><ul><li>本来であれば、<code>HttpServletRequestクラス</code>からパラメータをgetしてBeanに１つ１つ設定しなければ行けないが、</li><li>型変換しなければ行けない場面もあり面倒でミスが起きやすい</li><li>Springのデータバインディングを利用するとこれらの問題を解消できる</li></ul><h3 id="2-3-1-Springのデータバインディング"><a href="#2-3-1-Springのデータバインディング" class="headerlink" title="2.3.1 Springのデータバインディング"></a>2.3.1 Springのデータバインディング</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EmployeeForm form = <span class="keyword">new</span> EmployeeForm();</span><br><span class="line">ServletRequestDataBinder dataBinder = <span class="keyword">new</span> ServletRequestDataBinder(form);</span><br><span class="line">dataBinder.bind(request);</span><br></pre></td></tr></table></figure><ul><li>これを記載することで、３行でデータバインディングができる</li><li>また、SpringMVCの機能を使えば１行で済む （恐らく、<code>@ModelAttribute</code>を付与することを言っているのだと思う）</li></ul><h3 id="2-3-2-Springの型変換"><a href="#2-3-2-Springの型変換" class="headerlink" title="2.3.2 Springの型変換"></a>2.3.2 Springの型変換</h3><ul><li>型変換を行うための仕組みとして以下の３つを提供している<ul><li>PropertyEditor</li><li>Type Conversion</li><li>Field Formatting</li></ul></li></ul><h3 id="2-4-プロパティ管理"><a href="#2-4-プロパティ管理" class="headerlink" title="2.4 プロパティ管理"></a>2.4 プロパティ管理</h3><ul><li><p>ハードコーディングを避けるためにプロパティから値を読み込む仕組みがある</p></li><li><p>Strutsを使用していたときはプロパティファイルの値取得はResourceBundleでUtilクラス経由で取得していたのに対して、</p></li><li><p>SpringのDIであれば、<code>@Value(xxxx)</code>を引数やフィールドに指定するだけで取得できる</p></li><li><p>MEMO: これは必ず使用する</p><ul><li>:で区切って記載すればデフォルト値も指定できる！</li><li><code>@Value(xxxx:5)</code>などのように</li></ul></li></ul><h3 id="2-5-Spring-Expression-Language-SpEL"><a href="#2-5-Spring-Expression-Language-SpEL" class="headerlink" title="2.5 Spring Expression Language(SpEL)"></a>2.5 Spring Expression Language(SpEL)</h3><ul><li><p>Spring Expression Language (SpEL)は、SpringFrameworkが提供しているExpression Language</p></li><li><p>MEMO: 使用しないことにする</p></li></ul><h3 id="2-5-1-SpELのセットアップ"><a href="#2-5-1-SpELのセットアップ" class="headerlink" title="2.5.1 SpELのセットアップ"></a>2.5.1 SpELのセットアップ</h3><ul><li>pom.xmlの例</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-2-SpEl-APIの利用"><a href="#2-5-2-SpEl-APIの利用" class="headerlink" title="2.5.2 SpEl APIの利用"></a>2.5.2 SpEl APIの利用</h3><ul><li>直接APIを使用するケースはないと思うが、SpELの仕組みを理解するために使用方法を説明</li></ul><h3 id="2-5-3-Bean定義でのSpELの利用"><a href="#2-5-3-Bean定義でのSpELの利用" class="headerlink" title="2.5.3 Bean定義でのSpELの利用"></a>2.5.3 Bean定義でのSpELの利用</h3><ul><li><p>SpELで定義した値をコンストラクタの引数に渡す方法の説明</p></li><li><p>アノテーションの場合は、<code>@Value(&quot;#{T(java.util.UUID).randomUUID().toString()}&quot;) String id</code>のような形で定義する</p></li><li><p>SpELは様々なアノテーションの中で利用することができる</p><ul><li><code>@EventListener</code></li><li><code>@TransactionalEventListener</code></li><li><code>@Cacheable</code></li><li><code>@CachePut</code></li><li>TODO:後で調べる</li></ul></li></ul><h3 id="2-5-4-SpELで使用可能な式の表現"><a href="#2-5-4-SpELで使用可能な式の表現" class="headerlink" title="2.5.4 SpELで使用可能な式の表現"></a>2.5.4 SpELで使用可能な式の表現</h3><ul><li><p>リテラル値</p></li><li><p>オブエジェクトの生成</p></li><li><p>プロパティへの参照</p></li><li><p>メソッドの呼び出し</p></li><li><p>型の解決</p></li><li><p>変数の参照</p></li><li><p>Beanの参照</p></li><li><p>演算子</p></li><li><p>テンプレート</p></li><li><p>コレクションの操作</p></li><li><p>MEMO:テンプレートエンジン使うなら、SpELいらないのは説</p></li></ul><h3 id="2-6-リソースの抽象化"><a href="#2-6-リソースの抽象化" class="headerlink" title="2.6 リソースの抽象化"></a>2.6 リソースの抽象化</h3><ul><li>アプリケーションは様々なリソースにアクセスする必要がある</li><li>これらのリソースが格納されている場所は<ul><li>ファイルシステム上のディレクトリ</li><li>クラスパス上のディレクトリ</li><li>サーブレットコンテナ上のwarファイル</li><li>jarファイル</li><li>別のWebサーバー<ul><li>など多岐に渡る</li></ul></li></ul></li></ul><h3 id="2-6-1-Resourceインターフェースと実装クラス"><a href="#2-6-1-Resourceインターフェースと実装クラス" class="headerlink" title="2.6.1 Resourceインターフェースと実装クラス"></a>2.6.1 Resourceインターフェースと実装クラス</h3><ul><li><p>Resourceインターフェース実装クラス</p><ul><li>ClassPathResource</li><li>FileSystemResource</li><li>PathResource</li><li>UrlResource</li><li>ServletContextResource</li></ul></li><li><p>TODO: Resourceインターフェースを実装しているクラスをいくつか紹介してくれているが、</p><ul><li>実際にこれらのクラスを使ってみる必要あり</li></ul></li></ul><h3 id="2-6-2-ResourceLoaderインターフェース"><a href="#2-6-2-ResourceLoaderインターフェース" class="headerlink" title="2.6.2 ResourceLoaderインターフェース"></a>2.6.2 ResourceLoaderインターフェース</h3><ul><li>MEMO: ResourceLoaderインターフェースと上記のつながりが理解できてないので再確認<ul><li>ResourceLoader経由のほうがよい？</li><li>上記の実装クラスを使わなくて済むならこっちのほうがよいと考える</li></ul></li></ul><h3 id="2-6-3-Resourceインターフェースを利用したリソースアクセス"><a href="#2-6-3-Resourceインターフェースを利用したリソースアクセス" class="headerlink" title="2.6.3 Resourceインターフェースを利用したリソースアクセス"></a>2.6.3 Resourceインターフェースを利用したリソースアクセス</h3><ul><li>TODO: 実際に使ってみる必要あり</li></ul><h3 id="2-6-4-XMLファイル上でのリソースの指定"><a href="#2-6-4-XMLファイル上でのリソースの指定" class="headerlink" title="2.6.4 XMLファイル上でのリソースの指定"></a>2.6.4 XMLファイル上でのリソースの指定</h3><ul><li><p>割愛</p></li><li><p>MEMO: リソース取得先の指定はプロパティファイルにまとめるべき！</p><ul><li>すべて<code>@Value()</code>で記載すればよい</li></ul></li></ul><h3 id="2-7-メッセージ管理"><a href="#2-7-メッセージ管理" class="headerlink" title="2.7 メッセージ管理"></a>2.7 メッセージ管理</h3><ul><li>説明文や項目名などの固定文言</li><li>処理結果に通知するメッセージ</li><li>エラーメッセージなどを表示する際に</li><li>プロパティファイルなどの外部定義から取得することが求められるケースも多いはず</li><li>メッセージの外部化のメリット<ul><li>多言語サポートする要件を満たす</li><li>一箇所で一元管理する</li></ul></li></ul><h3 id="2-7-1-MessageSourceインターフェースと実装クラス"><a href="#2-7-1-MessageSourceインターフェースと実装クラス" class="headerlink" title="2.7.1 MessageSourceインターフェースと実装クラス"></a>2.7.1 MessageSourceインターフェースと実装クラス</h3><ul><li><p>MessageSource</p><ul><li>メッセージの格納先を抽象化するためのインターフェース</li></ul></li><li><p>MessageSourceResolvable</p><ul><li>メッセージ解決に必要な値（code,args,defaultMessage）を保持していることを示すインターフェース</li></ul></li><li><p>MessageSourceの実装クラス</p><ul><li>ResourceBundleMessageSource</li><li>ReloadableResourceBundleMessageSource</li></ul></li></ul><h3 id="2-7-2-MessageSourceの利用"><a href="#2-7-2-MessageSourceの利用" class="headerlink" title="2.7.2 MessageSourceの利用"></a>2.7.2 MessageSourceの利用</h3><ul><li>MessageSourceのBean定義</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">  messageSource.setBeannames(<span class="string">"messages"</span>); <span class="comment">// クラスパス上に格納されているプロパティファイル（拡張子は除く）を指定する</span></span><br><span class="line">  <span class="keyword">return</span> messageSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>メッセージの定義ファイルを作成</p></li><li><p>MessageSourceのAPI利用</p><ul><li>DIコンテナに登録したMessageSourceをインジェクションして<code>getMessage</code>メソッドを呼び出す</li></ul></li><li><p>MEMO: 感じたこと</p><ul><li>標準のクラスをDIコンテナで管理したい場合<code>@Bean</code>をメソッドにつけているのかなと思った</li><li>独自のクラスを作るのであれば、<code>@Component</code>でよいのではと</li></ul></li><li><p>MessageSourceResolvableの利用</p><ul><li>メッセージ引数もメッセージ定義で管理したい場合に利用するみたい</li></ul></li></ul><h2 id="第3章-データアクセス（Tx、JDBC）"><a href="#第3章-データアクセス（Tx、JDBC）" class="headerlink" title="第3章　データアクセス（Tx、JDBC）"></a>第3章　データアクセス（Tx、JDBC）</h2><ul><li>データアクセス機能について解説<ul><li>JDBC関連の機能</li><li>トランザクション管理機能</li><li>データアクセスエラーのハンドリング機能</li><li>その他ライブラリの機能（JPA、Hivernate、MyBatisといったORM）は以降の章で解説</li></ul></li></ul><h3 id="3-1-Springによるデータアクセス"><a href="#3-1-Springによるデータアクセス" class="headerlink" title="3.1 Springによるデータアクセス"></a>3.1 Springによるデータアクセス</h3><ul><li>まずはSpringが扱うことができるデータソースの種類について</li></ul><h3 id="3-1-1-データソースについて"><a href="#3-1-1-データソースについて" class="headerlink" title="3.1.1 データソースについて"></a>3.1.1 データソースについて</h3><p>データソースは、データベースにアクセスするためのコネクションをアプリケーションに提供する役割を担う</p><ul><li><p>Springが提供するデータベースアクセス機能では、以下に示す３つのデータソースを利用することができる</p><ul><li>アプリケーション内に定義したデータソース<ul><li>アプリ内にユーザや接続情報などを記載するパターン</li></ul></li><li>アプリケーションサーバーに定義したデータソース<ul><li>APサーバーに定義されたデータソースを利用するパターン<ul><li>MEMO: JavaEE徹底入門ではこのパターンでサンプル実装されていた</li></ul></li></ul></li><li>組み込みデータベースのデータソース<ul><li>HSQLDB、H2、Apache Derbyといった組み込みデータベースをデータソースとして利用する</li></ul></li></ul></li><li><p>MEMO: Commons DBCP はコネクションプール機能付きのデータソースを提供するライブラリー</p><ul><li>実際に定義を作成していく際に、コネクションプール設定方法について確認しておく</li></ul></li></ul><h3 id="3-1-2-データソースのコンフィギュレーション"><a href="#3-1-2-データソースのコンフィギュレーション" class="headerlink" title="3.1.2 データソースのコンフィギュレーション"></a>3.1.2 データソースのコンフィギュレーション</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>アプリケーション定義のデータソース</p><ul><li>アノテーション定義の例（詳細略）</li><li>XML定義の例（詳細略）</li></ul></li><li><p>アプリケーションサーバー定義のデータソース</p><ul><li>Jndiを指定して参照する（詳細略）</li></ul></li><li><p>組み込みデータソース</p><ul><li>（詳細略）</li></ul></li><li><p>TODO: 実際に上記の３種類で接続をしてみる必要がある</p></li></ul><h3 id="3-2-Spring-JDBC"><a href="#3-2-Spring-JDBC" class="headerlink" title="3.2 Spring JDBC"></a>3.2 Spring JDBC</h3><ul><li>前節ではSpring JDBCを使用するために必要となるデータソースのBean定義方法を紹介した</li><li>データアクセス処理を記述するための中心的な役割を持つJdbcTempleteクラスの使用方法を紹介<ul><li>SQLを実行する方法</li><li>SQLへ値をバインドする方法</li><li>SQLの実行結果からデータを取得する方法</li></ul></li></ul><h3 id="3-2-1-Spring-JDBCとは"><a href="#3-2-1-Spring-JDBCとは" class="headerlink" title="3.2.1 Spring JDBCとは"></a>3.2.1 Spring JDBCとは</h3><p>SQLの内容にかかわらす共通に行われる定型的なJDBCの処理をSpringが代替する機能</p><ul><li>定型的な処理<ul><li>コネクションのオープンやクローズ</li><li>SQLステートメントの実行</li><li>処理結果行の繰り返し処理</li><li>例外ハンドリング</li></ul></li><li>SpringJDBCを利用することで、実装範囲を以下のような重要な処理に限定できる<ul><li>SQLの定義</li><li>パラメータの設定</li><li>ResultSetの取得結果において、各レコードに対して実行したい処理</li></ul></li></ul><h3 id="3-2-2-JdbcTempleteクラスを利用したCRUD操作"><a href="#3-2-2-JdbcTempleteクラスを利用したCRUD操作" class="headerlink" title="3.2.2 JdbcTempleteクラスを利用したCRUD操作"></a>3.2.2 JdbcTempleteクラスを利用したCRUD操作</h3><ul><li>JdbcTempleteクラスを用いたCRUD操作の説明</li><li>MEMO: ORMを使用したほうが効率が良さそう<ul><li>念の為読んでおく程度で、覚えておかなくても良いと考える</li></ul></li></ul><h3 id="3-2-3-取得結果の変換処理"><a href="#3-2-3-取得結果の変換処理" class="headerlink" title="3.2.3 取得結果の変換処理"></a>3.2.3 取得結果の変換処理</h3><ul><li><p>SpringJDBCでは取得結果を変換できる３つのインターフェースを用意している</p><ul><li><code>RowMapper</code><ul><li>ResultSetの１行を特定のPOJOインスタンスに変換する</li></ul></li><li><code>ResultSetExtractor</code><ul><li>複数行から１つのインスタンスを生成できる</li></ul></li><li><code>RowCallbackHandler</code><ul><li>ResultSetを参照してなんらかの処理を行うためのインターフェース</li><li>戻り値を返さない。取得結果のファイル出力や、データのチェックなどを行う場合に利用します。</li></ul></li></ul></li><li><p>RowMapperの実装方法</p><ul><li>RowMapperインターフェースを実装したクラスにメソッドを作成して使用する</li><li>BeanPropertyRowMapperクラスを利用することもできる<ul><li>制約はありルールに沿ってBean定義すればかんたんにResultSetを設定可能</li></ul></li></ul></li><li><p>ResultSetExtractorの実装</p><ul><li>割愛</li></ul></li><li><p>RowCallbackHandlerの実装</p><ul><li>割愛</li></ul></li></ul><h3 id="3-2-4-応用的なCRUD操作"><a href="#3-2-4-応用的なCRUD操作" class="headerlink" title="3.2.4 応用的なCRUD操作"></a>3.2.4 応用的なCRUD操作</h3><ul><li>SQLのバッチ実行<ul><li><code>batchUpdate()</code>メソッドを利用する</li></ul></li><li>ストアドプロシージャの呼び出し<ul><li><code>JdbcTemplate</code>の<code>call</code>メソッドや<code>execute</code>メソッドを利用することで呼び出すことができる</li><li>TODO: ストアド・プロシージャ使ってみる。使ったことないので。。</li></ul></li></ul><h3 id="3-3-トランザクション管理"><a href="#3-3-トランザクション管理" class="headerlink" title="3.3 トランザクション管理"></a>3.3 トランザクション管理</h3><ul><li>アノテーションを用いたトランザクション管理方法</li><li>プログラム内に直接commitメソッドやrollbackメソッドを記述する明示的なトランザクション管理について説明</li></ul><h3 id="3-3-1-トランザクションマネージャ"><a href="#3-3-1-トランザクションマネージャ" class="headerlink" title="3.3.1 トランザクションマネージャ"></a>3.3.1 トランザクションマネージャ</h3><ul><li><p><code>PlatformTransactionManager</code>: Springのトランザクション管理の中心となるインターフェース</p></li><li><p>トランザクションマネージャの定義</p><ul><li><code>PlatformTransactionManager</code>のBeanを定義する</li><li>トランザクション対象とするメソッドを定義する</li></ul></li><li><p>ローカルトランザクションを利用する場合</p><ul><li>単一データベースに対する複数の操作</li><li>XMLにTransactionManagerの定義を記載する方法を紹介</li><li>BeanIDは<code>transactionManager</code>を指定することを推奨</li></ul></li><li><p>グローバルトランザクションを利用する場合</p><ul><li>異なるデータベースに対する複数の操作</li><li>グローバルトランザクションの仕組みはJTAというJavaEEの仕様として標準化されておりアプリケーション・サーバーからJTAの仕組みが提供されている</li><li>実装クラスとして<code>JtaTransactionManager</code>を使用する</li><li>ただし、製品ごとの<code>JtaTransactionManager</code>が提供されているのでそちらを使う 自動的に最適なクラスを使う仕組みが用意されているらしい</li></ul></li></ul><h3 id="3-3-2-宣言的トランザクション"><a href="#3-3-2-宣言的トランザクション" class="headerlink" title="3.3.2 宣言的トランザクション"></a>3.3.2 宣言的トランザクション</h3><ul><li><p>宣言的トランザクションとは</p><ul><li>事前に宣言されたルールに従い、トランザクションを制御する方法のこと</li><li>メリット<ul><li>トランザクションの開始やコミット、ロールバックなどの典型的な処理をビジネスロジックの中に記述する必要がなくなる</li></ul></li><li>利用方法<ul><li><code>@Transactional</code></li><li>XMLコンフィギュレーション</li></ul></li></ul></li><li><p><code>@Transactional</code>を利用した宣言的トランザクション</p></li><li><p>トランザクション制御で必要となる情報</p><ul><li>アノテーションの引数について説明（割愛）</li><li>クラスに付与するかメソッドに付与するか</li></ul></li><li><p>コンフィギュレーションクラスに定義する方法も紹介している</p></li><li><p>XMLコンフィギュレーションによる宣言的トランザクション</p><ul><li>割愛</li></ul></li></ul><h3 id="3-3-3-明示的トランザクション"><a href="#3-3-3-明示的トランザクション" class="headerlink" title="3.3.3 明示的トランザクション"></a>3.3.3 明示的トランザクション</h3><ul><li><p>明示的トランザクションとは</p><ul><li>コミットやロールバックといったトランザクション制御に関する処理をソースコードに明示的に記述する方法</li></ul></li><li><p><code>PlatformTransactionManager</code>を利用した明示的トランザクション制御</p><ul><li>commit(),rollback()などを直接書く</li></ul></li><li><p><code>TransactionTemplete</code>を利用した明示的トランザクション制御</p><ul><li>@ConfigurationクラスにBean定義する際にトランザクションを設定</li></ul></li><li><p>MEMO: 明示的トランザクションはどちらも使いにくいような印象</p></li></ul><h3 id="3-3-4-トランザクションの分離レベルと伝播レベル"><a href="#3-3-4-トランザクションの分離レベルと伝播レベル" class="headerlink" title="3.3.4 トランザクションの分離レベルと伝播レベル"></a>3.3.4 トランザクションの分離レベルと伝播レベル</h3><ul><li>TODO: ★見返して実装に組み込む</li><li>トランザクション分離レベル<ul><li>TODO: トランザクション分離レベルについて復習すべし</li></ul></li><li>トランザクション伝播レベル<ul><li>MEMO: 伝播レベルについて意識したことはなかった</li><li>トランザクション処理が入れ子になったときに初めて意識することになる。</li><li>通常の処理の場合はデフォルトの<code>Required</code>で問題ないような気がする。</li><li>TODO: 逆に入れ子にするパターンってどのような要件が考えられるか確認する<ul><li>→本書に解説があった。<ul><li>業務ロジックのトランザクションとは別に、ログ出力用の処理でDBアクセスがある場合</li><li>業務ロジックでロールバックが発生すると、ログ出力用のデータもロールバックされてしまう。</li><li>こうならないように、ログ出力用のトランザクションは<code>REQUIRES_NEW</code>で生成しておく必要があるとのこと</li><li>そもそもDBにログを貯める仕様が良くないのではと思う</li></ul></li></ul></li></ul></li></ul><h3 id="3-4-データアクセスエラーのハンドリング"><a href="#3-4-データアクセスエラーのハンドリング" class="headerlink" title="3.4 データアクセスエラーのハンドリング"></a>3.4 データアクセスエラーのハンドリング</h3><ul><li>データアクセス処理でエラーが発生した際のハンドリング処理を実装しておく必要がある</li><li>Springにおけるデータアクセス例外の抽象化の考えかたを理解した上で、エラーハンドリング処理の実装方法や抽象化のカスタマイズ方法を紹介</li></ul><h3 id="3-4-1-Springが提供するデータアクセス例外"><a href="#3-4-1-Springが提供するデータアクセス例外" class="headerlink" title="3.4.1 Springが提供するデータアクセス例外"></a>3.4.1 Springが提供するデータアクセス例外</h3><ul><li><p>DataAccessExceptionを親クラスとするデータアクセス例外の階層構造</p><ul><li>MEMO: かなり多くの種類のエラーが、<code>DataAccessException</code>から切られていることを確認した</li></ul></li><li><p>非検査例外によるDataAccessExceptionの実装</p><ul><li>DataAccessExceptionはRuntimeExceptionが親クラスなので、例外ハンドリングが強制されてませんよという説明</li></ul></li><li><p>実装を隠蔽したデータアクセス例外</p><ul><li>DBごとに例外コードが異なるが、Springのデータアクセス機能で共通の例外クラスに変換している</li><li>MEMO: これは画期的ですごい便利だと感じた→当たり前でもあるか..</li></ul></li></ul><h3 id="3-4-2-データアクセス例外のハンドリング"><a href="#3-4-2-データアクセス例外のハンドリング" class="headerlink" title="3.4.2 データアクセス例外のハンドリング"></a>3.4.2 データアクセス例外のハンドリング</h3><ul><li><p>非検査例外のため、ハンドリングを行いたい場所だけcatchする、行いたくない場所は何もする必要が無い</p></li><li><p>データアクセス例外のハンドリングを行う実装例</p><ul><li>Springが提供している例外でcatchできるようにtry-catchで囲む</li><li>catch後は、プロジェクトの例外を再throwする</li></ul></li></ul><h3 id="3-4-3-データアクセス例外の変換ルールのカスタマイズ"><a href="#3-4-3-データアクセス例外の変換ルールのカスタマイズ" class="headerlink" title="3.4.3 データアクセス例外の変換ルールのカスタマイズ"></a>3.4.3 データアクセス例外の変換ルールのカスタマイズ</h3><ul><li>各データベースのエラーコードとデータアクセス例外の対応はspring-jdbc-xxx.jarに含まれるsql-error-codes.xmlに定義されているが、クラスパス直下にsql-error-codes.xmlを配置することでこの定義をカスタマイズすることができる</li></ul><h2 id="第4章-Spring-MVC"><a href="#第4章-Spring-MVC" class="headerlink" title="第4章　Spring MVC"></a>第4章　Spring MVC</h2><ul><li><p>第三章までで得た知識で開発できるのは、データベースにアクセスするスタンドアロンアプリケーション</p></li><li><p>本章から７章までにかけて、SpringMVCの機能を利用したWebアプリケーションの開発方法について解説</p></li><li><p>本章</p><ul><li>SpringMVCの特徴を簡単に説明</li><li>シンプルなサンプルアプリケーションを作成しながらSpringMVCの基礎を学ぶ</li><li>SpringMVCのアーキテクチャについて説明</li></ul></li></ul><h3 id="4-1-Spring-MVC-とは"><a href="#4-1-Spring-MVC-とは" class="headerlink" title="4.1 Spring MVC とは"></a>4.1 Spring MVC とは</h3><ul><li>フレームワークのアーキテクチャとしてMVCパターンを採用している<ul><li>TODO: MVC以外のアーキテクチャについて理解を深める</li></ul></li><li>Springは正確に言うと、フロントコントローラパターンを採用しているらしい詳細は4.3SpringMVCのアーキテクチャで解説</li></ul><h3 id="4-1-1-Webアプリケーション開発における特徴"><a href="#4-1-1-Webアプリケーション開発における特徴" class="headerlink" title="4.1.1 Webアプリケーション開発における特徴"></a>4.1.1 Webアプリケーション開発における特徴</h3><ul><li><p>SpringMVCはWebアプリケーションをストレスなく快適に開発することができるフレームワークで、次のような特徴がある</p><ul><li>POJO（Plain Old Java Object）での実装<ul><li>フレームワーク独自のインターフェースを実装する必要が無いため、作成するクラスの単体テストのテスタビリティを確保</li></ul></li><li>アノテーションを使用した定義情報の指定</li><li>柔軟なメソッドシグネチャの定義<ul><li>Controllerに渡す引数や戻り値も様々な形がサポートされている</li></ul></li><li>ServletAPIの抽象化<ul><li>ServletAPI（HttpServletRequest,HttpServletResponse,HttpSessionなどのAPI）を抽象化する仕組みを提供</li><li>テスタビリティを確保</li></ul></li><li>Viewの実装技術の抽象化<ul><li>コントローラはView名（Viewの論理名）を返却し、SpringMVCのフレームワーク処理が呼び出すViewを決定</li><li>ControllerはViewの実装技術（Thymeleaf,ServletAPI,FreeMarkerなど）を意識する必要がなくなる</li></ul></li><li>SpringのDIコンテナとの連携<ul><li>SpringMVCはSpringのDIコンテナ上で動作するフレームワーク</li><li>DIやAOPなどの仕組みを活用できる</li></ul></li></ul></li><li><p>MEMO: この辺は開発で感触をつかめているのですんなり理解できた</p></li></ul><h3 id="4-1-2-MVCフレームワークとしての特徴"><a href="#4-1-2-MVCフレームワークとしての特徴" class="headerlink" title="4.1.2 MVCフレームワークとしての特徴"></a>4.1.2 MVCフレームワークとしての特徴</h3><ul><li><p>豊富な拡張ポイントの提供</p><ul><li>処理の役割に応じてインターフェースを定義している</li></ul></li><li><p>エンタープライズアプリケーション向けの機能の提供</p><ul><li>メッセージ管理</li><li>セッション管理</li><li>国際化</li><li>ファイルアップロードといったエンタープライズアプリケーション向けのWebアプリケーションを開発する際に必要となる機能も提供</li></ul></li><li><p>サードパーティのライブラリとの連携部品の提供</p><ul><li>★Jackson(JSON&#x2F;XML操作) → JSON操作は他に、org.jsonがあるみたいだが、Jacksonの方が良さそう</li><li>Apache Tiles(レイアウトエンジン) → レイアウトを組める。Thymeleafのincludeで十分なので使わない</li><li>FreeMarker(テンプレートエンジン) → 変数を持つ定型文言を作成しておき（*.ftlファイル）</li><li>★Rome(RSS&#x2F;Feed操作) → 他に、Informaというのがあるらしい。</li><li>★JsperReports(帳票出力) → 他にも色々なライブラリがあるみたいだが、一旦これを使用したい<ul><li><a href="https://weblabo.oscasierra.net/java-pdf-lib-2017/">https://weblabo.oscasierra.net/java-pdf-lib-2017/</a></li></ul></li><li>★Apache POI(Excel操作)</li><li>★Hibernate Validator(Bean Validation)</li><li>Joda Time(日付操作) → Java7時代の日付操作</li><li>など</li><li>サードパーティ自体がSpringMVCとの連携部品を提供しているケースもある。<ul><li>Thymeleaf(テンプレートエンジン)</li><li>★HDIV(セキュリティ強化)</li></ul></li></ul></li><li><p>TODO: ★つけたライブラリーは使用したい</p></li></ul><h3 id="4-2-はじめてのSpring-MVCアプリケーション"><a href="#4-2-はじめてのSpring-MVCアプリケーション" class="headerlink" title="4.2 はじめてのSpring MVCアプリケーション"></a>4.2 はじめてのSpring MVCアプリケーション</h3><h3 id="4-2-1-開発プロジェクトの作成"><a href="#4-2-1-開発プロジェクトの作成" class="headerlink" title="4.2.1 開発プロジェクトの作成"></a>4.2.1 開発プロジェクトの作成</h3><ul><li><p>InteliJ IDEA でプロジェクトを作成することにした</p></li><li><p>mavenプロジェクトをstartarのアーキタイプで作成</p></li><li><p>pom.xmlをサンプルアプリに合わせる</p><ul><li>mavenがうまく動かない不具合発生</li><li>原因: urlがmavenレポジトリを向いていなかったため<ul><li>結果: 解消しなかった</li></ul></li></ul></li><li><p>Intelijだとうまくいかないと判断し、Eclipseで実施</p></li><li><p>Eclipseでサンプルプログラムを配置</p></li><li><p>mavenの設定をサンプルに合わせる</p></li><li><p>javaeeのモジュールがデフォルトで読み込めなくなったみたいなので、pomに定義を入れる</p></li><li><p>tomcat9サーバーを立ち上げる</p></li><li><p>context-pathはデフォルトでプロジェクト名？になるみたいなので、<code>http://localhost:8080/firstapp4-2</code>でアクセスするとうまく行った</p></li><li><p>Web.xmlに<code>jsp-config</code>というものを定義すると、すべてのjspに対してデフォルトでincludeさせることができるみたい</p></li><li><p>TODO: spring bootで生成したプロジェクトだと、web.xmlが必要ない？ そのあたりの仕組みが理解できていない</p></li></ul><h3 id="4-2-2-Spring-MVCの適用"><a href="#4-2-2-Spring-MVCの適用" class="headerlink" title="4.2.2 Spring MVCの適用"></a>4.2.2 Spring MVCの適用</h3><h3 id="4-2-3-トップ画面表示処理の実装"><a href="#4-2-3-トップ画面表示処理の実装" class="headerlink" title="4.2.3 トップ画面表示処理の実装"></a>4.2.3 トップ画面表示処理の実装</h3><h3 id="4-2-4-入力画面表示処理の実装"><a href="#4-2-4-入力画面表示処理の実装" class="headerlink" title="4.2.4 入力画面表示処理の実装"></a>4.2.4 入力画面表示処理の実装</h3><h3 id="4-2-5-送信処理の実装"><a href="#4-2-5-送信処理の実装" class="headerlink" title="4.2.5 送信処理の実装"></a>4.2.5 送信処理の実装</h3><h3 id="4-2-6-入力チェック処理の実装"><a href="#4-2-6-入力チェック処理の実装" class="headerlink" title="4.2.6 入力チェック処理の実装"></a>4.2.6 入力チェック処理の実装</h3><ul><li><p>ここまででサンプルアプリケーションの説明終了</p><ul><li>Controllerクラス</li><li>フォームクラス</li><li>View(JSPなどのテンプレートファイル)</li></ul></li><li><p>本来であれば、JSPではなくThymeleafとかを使うべきだと思うので、詳細な実装はサラッと流し読み</p></li></ul><h3 id="4-2-7-XMLファイルを使用したBean定義"><a href="#4-2-7-XMLファイルを使用したBean定義" class="headerlink" title="4.2.7 XMLファイルを使用したBean定義"></a>4.2.7 XMLファイルを使用したBean定義</h3><ul><li>割愛</li></ul><h3 id="4-3-Spring-MVCのアーキテクチャ"><a href="#4-3-Spring-MVCのアーキテクチャ" class="headerlink" title="4.3 Spring MVCのアーキテクチャ"></a>4.3 Spring MVCのアーキテクチャ</h3><h3 id="4-3-1-フレームワークのアーキテクチャ"><a href="#4-3-1-フレームワークのアーキテクチャ" class="headerlink" title="4.3.1 フレームワークのアーキテクチャ"></a>4.3.1 フレームワークのアーキテクチャ</h3><ul><li><p>Spring MVCは「フロントコントローラパターン」と呼ばれるアーキテクチャを採用している</p><ul><li>クライアントからのリクエストをフロントコントローラと呼ばれるコンポーネントが受け取り、リクエストの内容に応じて実行するHandler(Controller)を選択するアーキテクチャ</li></ul></li><li><p>フロントコントローラが担う処理</p><ul><li>クライアントからのリクエストの受付</li><li>リクエストデータのJavaオブジェクトへの変換</li><li>入力チェックの実行（Bean Validation）</li><li>Handlerの呼び出し</li><li>Viewの解決</li><li>クライアントへのレスポンスデータの応答</li><li>例外ハンドリング</li></ul></li><li><p>TODO: Springフレームワークの全体を把握したときにもう一度見直す</p></li></ul><h2 id="第5章-Webアプリケーションの開発"><a href="#第5章-Webアプリケーションの開発" class="headerlink" title="第5章　Webアプリケーションの開発"></a>第5章　Webアプリケーションの開発</h2><h3 id="5-1-Webアプリケーションの種類"><a href="#5-1-Webアプリケーションの種類" class="headerlink" title="5.1 Webアプリケーションの種類"></a>5.1 Webアプリケーションの種類</h3><ul><li><p>SpringMVCは大きく分けて以下の２種類のアプリケーションを作成するための機能を提供</p><ul><li>画面を応答するアプリケーション</li><li>データのみを応答するアプリケーション（RESTful Webサービス）</li></ul></li><li><p>メモ</p><ul><li>SpringMVCの仕組みは使用していないが、Spring4.0よりWebSocketの連携モジュールが提供されている</li><li>フロントとサーバーサイドの双方向通信用</li><li>TODO: 使ってみる</li></ul></li><li><p>Hamdlerメソッド作成</p><ul><li><code>@RequestMapping()</code>は使用せずに、<code>@GetMapping()</code>を使用する</li></ul></li><li><p>Handlerメソッドの引数に指定可能な型、アノテーションを紹介</p><ul><li>TODO: 再度確認する</li></ul></li><li><p>暗黙的な引数の解決！覚えておく</p><ul><li>引数の型がStringやIntegerといったシンプル型の場合、引数名に一致するリクエストパラメータの値を取得</li><li>引数の方がJavaBeansだった場合、デフォルトの属性名に一致するオブジェクトをModelから取得する<ul><li>該当するオブジェクトがModelに存在しない場合、デフォルトコンストラクタを呼び出して新しいオブジェクトを生成</li></ul></li></ul></li><li><p>ServletAPI(HttpServletRequest,HttpServletResponse,HttpSession,Partなど)や低レベルのJavaAPI(InputStream,Reader,OutputStream, Writer,Map)なども指定できるが、これらのAPIを自由に使うとメンテナンス性を低下させる可能性があるので、使用しないようにする必要がある</p></li><li><p>TODO: コーディング規約として利用を制限していくべき！</p></li></ul><h4 id="5-3-5-Handlerメソッドの戻り値"><a href="#5-3-5-Handlerメソッドの戻り値" class="headerlink" title="5.3.5 Handlerメソッドの戻り値"></a>5.3.5 Handlerメソッドの戻り値</h4><ul><li><p>Handlerメソッドは戻り値として様々なオブジェクトを返却できる</p></li><li><p>メモ</p><ul><li>返却できるオブジェクトは<code>org.springframework.web.method.support.HandlerMethodReturnValueHandler</code>インターフェースの実装クラスを作成することで拡張できる</li></ul></li><li><p>SpringMVCがサポートしている主な型</p><ul><li><code>java.lang.String</code></li><li>Model</li><li>ModelAndView</li><li>void</li><li>ResponseEntity&lt;?&gt;</li><li>HttpHeaders</li></ul></li></ul><h4 id="5-3-6-View-Controllerの利用"><a href="#5-3-6-View-Controllerの利用" class="headerlink" title="5.3.6 View Controllerの利用"></a>5.3.6 View Controllerの利用</h4><ul><li>Viewを呼び出すだけであれば、SpringMVCが提供しているViewControllerの仕組みを利用することができる</li></ul><h3 id="5-4-リクエストマッピング"><a href="#5-4-リクエストマッピング" class="headerlink" title="5.4 リクエストマッピング"></a>5.4 リクエストマッピング</h3><ul><li><p><code>@RequestMapping</code>の属性値を使ってリクエストマッピングの条件を指定する</p></li><li><p>指定可能な属性</p><ul><li>value</li><li>path</li><li>method</li><li>params</li><li>headers: リクエストヘッダー</li><li>consumes: Content-Typeヘッダー</li><li>produces: Acceptヘッダー</li><li>name</li></ul></li><li><p>value,pathは複数指定することができる</p><ul><li>or条件として扱われる</li></ul></li><li><p>パスパターンの使用</p><ul><li>URIテンプレート形式のパスパターン</li><li>正規表現も使える</li><li>Antスタイルのパスパターン</li></ul></li><li><p>paramsはメソッドが実行される条件としてパラメータの有無も入る</p></li></ul><h3 id="5-5-リクエストデータの取得"><a href="#5-5-リクエストデータの取得" class="headerlink" title="5.5 リクエストデータの取得"></a>5.5 リクエストデータの取得</h3><ul><li>種類<ul><li><code>@PathVariable</code></li><li><code>@RequestParam</code></li><li><code>@RequestHeader</code></li><li>リクエストパラメータ値の一括取得</li></ul></li></ul><h4 id="5-5-4-コンパイルオプションの注意点"><a href="#5-5-4-コンパイルオプションの注意点" class="headerlink" title="5.5.4 コンパイルオプションの注意点"></a>5.5.4 コンパイルオプションの注意点</h4><ul><li><code>@PathVariable</code>,<code>@RequestParam</code>,<code>@RequestHeader</code>,<code>@CookieValue</code>のvalue属性を省略する場合、</li><li><code>-g</code>オプションまたはJavaSE8から追加された<code>-parameters</code>オプションのどちらかのコンパイルオプションを有効にしておく必要がある<ul><li>TODO: バインドされないとき確認</li></ul></li></ul><h4 id="5-5-7-アノテーションを使用したフォーマットの指定"><a href="#5-5-7-アノテーションを使用したフォーマットの指定" class="headerlink" title="5.5.7 アノテーションを使用したフォーマットの指定"></a>5.5.7 アノテーションを使用したフォーマットの指定</h4><ul><li><p><code>@org.springframework.format.annotation.DateTimeFormat</code></p></li><li><p><code>@org.springframework.format.annotation.NumberFormat</code></p></li><li><p>JSR354 : Money and Currency APIというものがあるらしい</p><ul><li>TODO: 後で確認する</li></ul></li></ul><h3 id="5-6-フォームクラスの実装"><a href="#5-6-フォームクラスの実装" class="headerlink" title="5.6 フォームクラスの実装"></a>5.6 フォームクラスの実装</h3><h4 id="5-6-1-フォームオブジェクトのスコープ"><a href="#5-6-1-フォームオブジェクトのスコープ" class="headerlink" title="5.6.1 フォームオブジェクトのスコープ"></a>5.6.1 フォームオブジェクトのスコープ</h4><ul><li><p>スコープの種類</p><ul><li>リクエストスコープ</li><li>フラッシュスコープ：PRGパターンのリクエスト間でオブジェクトを共有するためのスコープ</li><li>セッションスコープ：HttpSessionに格納され、明示的に破棄するまで残り続ける</li></ul></li><li><p>フラッシュスコープ</p><ul><li><code>RedirectAttributes</code>の<code>addFlashAttribute()</code>メソッドを使用して詰める</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"create"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @Validated AccountCreateForm form, BindingResult result,</span></span></span><br><span class="line"><span class="function"><span class="params">  RedirectAttributes redirectAttributes)</span> </span>&#123;</span><br><span class="line">    redirectAttributes.addFlashAttribute(form);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/account/create?complete"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="5-6-2-フォームクラスの作成"><a href="#5-6-2-フォームクラスの作成" class="headerlink" title="5.6.2 フォームクラスの作成"></a>5.6.2 フォームクラスの作成</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFormRequestDto</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Serializableインターフェスを実装しておく。これが必要なのはオブジェクトをセッションスコープで管理する場合だが、スコープに関係なく定義しておくのが無難</li></ul><h3 id="5-7-入力チェック"><a href="#5-7-入力チェック" class="headerlink" title="5.7 入力チェック"></a>5.7 入力チェック</h3><ul><li>SpringMVCではBeanValidationの仕組みを利用して、リクエストパラメータ値がバインドされたフォームクラス（またはコマンドクラス）に対して入力チェックを行う</li></ul><h4 id="5-7-1-入力チェックの有効化"><a href="#5-7-1-入力チェックの有効化" class="headerlink" title="5.7.1 入力チェックの有効化"></a>5.7.1 入力チェックの有効化</h4><ul><li>入力チェックを行う場合、<ul><li>入力チェックを行うメソッドの引数にフォームクラスを定義して、<ul><li><code>@org.springframework.validation.annotation.Validated</code>または</li><li><code>@org.springframework.validation.annotation.Valid</code> を指定する<ul><li><code>@Validated</code>を使用すると、BeanValidationのバリデーショングループの仕組みが使用できるらしい</li></ul></li></ul></li></ul></li></ul><h4 id="5-7-2-入力チェック結果の判定"><a href="#5-7-2-入力チェック結果の判定" class="headerlink" title="5.7.2 入力チェック結果の判定"></a>5.7.2 入力チェック結果の判定</h4><ul><li>BindingResultで処理する</li></ul><h4 id="5-7-3-未入力の扱い"><a href="#5-7-3-未入力の扱い" class="headerlink" title="5.7.3 未入力の扱い"></a>5.7.3 未入力の扱い</h4><ul><li><p>未入力は許容するが、入力された場合は６文字移譲であること</p><ul><li>という要件をBeanValidation標準アノテーションを使用して満たすことができない</li></ul></li><li><p>この場合は、Springが提供している<code>org.springframework.beans.propertyeditors.StringTrimerEditor</code>を使用することを検討</p></li><li><p>TODO: 普通に独自アノテーションを作成した方がシンプルなような気がする</p></li></ul><h4 id="5-7-5-ネスト下JavaBeansの入力チェック"><a href="#5-7-5-ネスト下JavaBeansの入力チェック" class="headerlink" title="5.7.5 ネスト下JavaBeansの入力チェック"></a>5.7.5 ネスト下JavaBeansの入力チェック</h4><ul><li><p>ネストしたJavaBeansやコレクション内のJavaBeansに定義したプロパティに対して入力チェックを行いたい場合は、<code>@Valid</code>を指定する</p><ul><li>チェック対象とすることを明示する必要がある</li></ul></li><li><p><code>@Valid</code>と<code>@Validated</code>の違い  </p><ul><li><a href="http://moondream.hatenablog.com/entry/20131006/1381031027">http://moondream.hatenablog.com/entry/20131006/1381031027</a></li></ul></li></ul><h4 id="5-7-6-入力チェックルールの追加"><a href="#5-7-6-入力チェックルールの追加" class="headerlink" title="5.7.6 入力チェックルールの追加"></a>5.7.6 入力チェックルールの追加</h4><ul><li><p>独自の入力チェックツール追加方法２つ</p><ul><li>既成ルールを合成して作成する方法</li><li>独自のバリデータを実装して作成する方法</li></ul></li><li><p>既成ルールを合成して作成する方法</p><ul><li>→こっちは使った方がよい</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.RetentionPolicy.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ReportAsSingleViolation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = &#123;&#125;)</span><br><span class="line"><span class="meta">@Target</span>(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER &#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="meta">@ReportAsSingleViolation</span></span><br><span class="line"><span class="meta">@Pattern</span>(regexp = <span class="string">"[a-zA-Z0-9]*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AlphaNumeric &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "</span>&#123;validation.AlphaNumeric.message&#125;<span class="string">";</span></span><br><span class="line"><span class="string">  Class&lt;?&gt;[] groups() default &#123;&#125;;</span></span><br><span class="line"><span class="string">  Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  @Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER &#125;)</span></span><br><span class="line"><span class="string">  @Retention(RUNTIME)</span></span><br><span class="line"><span class="string">  @Documented</span></span><br><span class="line"><span class="string">  public @interface List &#123;</span></span><br><span class="line"><span class="string">    AlphaNumeric[] value();</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>メモ TODO: 覚えておく</p><ul><li>上の例では１つしか既成ルールを使用していないが、既成ルールを複数まとめた合成アノテーションを作成することもできる<ul><li>なお、既成ルールをまとめた合成アノテーションを作成する場合、<code>@ReportAsSingleViolation</code>も付与するのが一般的で、付与すると、message属性で指定したメッセージが利用される用になる。付与しない場合は、既成ルールに指定したメッセージが利用される</li></ul></li></ul></li><li><p>独自のバリデータを実装して作成する方法</p><ul><li>→冗長になりがちだと思うので作成しないほうが良いのでは？<ul><li>相関チェックも実装できそうだが、<code>@AssertTrue</code>を使用したほうがシンプル</li></ul></li></ul></li><li><p><code>@AssertTrue</code>の使用方法</p><ul><li><a href="https://qiita.com/t-iguchi/items/ea3dd8691d52d7abe695">https://qiita.com/t-iguchi/items/ea3dd8691d52d7abe695</a></li></ul></li></ul><h4 id="5-7-7-入力チェックツールの切り替え"><a href="#5-7-7-入力チェックツールの切り替え" class="headerlink" title="5.7.7 入力チェックツールの切り替え"></a>5.7.7 入力チェックツールの切り替え</h4><ul><li>コントローラーのメソッドでパラメータ指定して、呼び出すメソッドを変更することで実現する例を記載している</li></ul><h4 id="5-7-8-エラー情報の表示"><a href="#5-7-8-エラー情報の表示" class="headerlink" title="5.7.8 エラー情報の表示"></a>5.7.8 エラー情報の表示</h4><ul><li><p><code>&lt;form:errors path=&quot;name&quot;&gt;</code></p><ul><li>このように記載することでエラー情報取れますよという説明がある</li></ul></li><li><p>エラーメッセージ要素の構成案</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"error-message d-none"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form:errors</span> <span class="attr">path</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">".error-message"</span>).forEach(<span class="function"><span class="params">el</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(el.innerText) el.classList.remove(<span class="string">"d-none"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>みたいな感じにすればいいのではなかろうかと</li></ul><h4 id="5-7-9-エラーメッセージの解決"><a href="#5-7-9-エラーメッセージの解決" class="headerlink" title="5.7.9 エラーメッセージの解決"></a>5.7.9 エラーメッセージの解決</h4><ul><li><p>エラーメッセージの定義方法</p><ul><li>Springが提供するMessageSourceで読み込んだプロパティファイルにメッセージを定義する</li><li>BeanValidation管理のプロパティファイルにメッセージを定義する</li><li>制約アノテーションのmessage属性に直接メッセージを定義する</li></ul></li><li><p>Spring管理プロパティファイル</p><ul><li>制約アノテーションのクラス名＋「.」＋フォームオブジェクトの属性名＋「.」＋プロパティ名</li><li>制約アノテーションのクラス名＋「.」＋フォームオブジェクトの属性名</li><li>制約アノテーションのクラス名＋「.」＋プロパティ名</li><li>制約アノテーションのクラス名＋「.」＋プロパティの型名（FQCN）</li><li>制約アノテーションのクラス名</li></ul></li><li><p>BeanValidation管理のプロパティファイルにエラーメッセージを定義</p><ul><li>クラスパス直下のValidationMessages.propertiesにメッセージを定義する<ul><li>→あまり使用する機会無いのではと思う</li></ul></li></ul></li></ul><h4 id="5-7-10-BeanValidationのカスタマイズ"><a href="#5-7-10-BeanValidationのカスタマイズ" class="headerlink" title="5.7.10 BeanValidationのカスタマイズ"></a>5.7.10 BeanValidationのカスタマイズ</h4><ul><li>java configに設定<ul><li>→あまりメリットが理解できなかったのでスキップ</li></ul></li></ul><h4 id="5-7-11-Spring-Validatorの利用"><a href="#5-7-11-Spring-Validatorの利用" class="headerlink" title="5.7.11 Spring Validatorの利用"></a>5.7.11 Spring Validatorの利用</h4><ul><li>割愛</li></ul><h3 id="5-8-画面遷移"><a href="#5-8-画面遷移" class="headerlink" title="5.8 画面遷移"></a>5.8 画面遷移</h3><h4 id="5-8-1-遷移先の指定方法"><a href="#5-8-1-遷移先の指定方法" class="headerlink" title="5.8.1 遷移先の指定方法"></a>5.8.1 遷移先の指定方法</h4><ul><li>View名をHandlerメソッドの戻り値として返却することで実現</li></ul><h4 id="5-8-2-リクエストパスへのリダイレクト"><a href="#5-8-2-リクエストパスへのリダイレクト" class="headerlink" title="5.8.2 リクエストパスへのリダイレクト"></a>5.8.2 リクエストパスへのリダイレクト</h4><ul><li>View名に「redirect: + リダイレクト先のリクエストパス」</li><li>RedirectAttributesを使用してパラメータを設定する</li><li>パス変数を指定することもできる</li></ul><h4 id="5-8-3-リクエストパスへのフォワード"><a href="#5-8-3-リクエストパスへのフォワード" class="headerlink" title="5.8.3 リクエストパスへのフォワード"></a>5.8.3 リクエストパスへのフォワード</h4><ul><li>「forward: + 転送先のリクエストパス」</li><li><code>return &quot;forward:/auth/authenticate&quot;;</code></li><li>MEMO: 使い所が知りたい</li></ul><h4 id="5-8-4-Viewとのデータ連携"><a href="#5-8-4-Viewとのデータ連携" class="headerlink" title="5.8.4 Viewとのデータ連携"></a>5.8.4 Viewとのデータ連携</h4><ul><li>JavaオブジェクトをModelに格納する方法は、以下の２つがある<ul><li>ModelのAPIを直接呼び出す</li><li>ModelAttributeアノテーションを付与したメソッドを用意する</li></ul></li></ul><h4 id="5-8-5-リダイレクト先とのデータ連携"><a href="#5-8-5-リダイレクト先とのデータ連携" class="headerlink" title="5.8.5 リダイレクト先とのデータ連携"></a>5.8.5 リダイレクト先とのデータ連携</h4><ul><li>RedirectAttributesのフラッシュスコープの説明</li></ul><h3 id="5-9-Viewの解決"><a href="#5-9-Viewの解決" class="headerlink" title="5.9 Viewの解決"></a>5.9 Viewの解決</h3><ul><li>jspとかいろいろ使えるよ</li><li>JSP使うなら、ViewResolverRegistryに登録する必要があるよっていう説明</li></ul><h3 id="5-10-JSPの実装"><a href="#5-10-JSPの実装" class="headerlink" title="5.10 JSPの実装"></a>5.10 JSPの実装</h3><ul><li>JSP使用しないため割愛</li></ul><h3 id="5-11-SpringのHTMLフォーム用タグライブラリの利用"><a href="#5-11-SpringのHTMLフォーム用タグライブラリの利用" class="headerlink" title="5.11 SpringのHTMLフォーム用タグライブラリの利用"></a>5.11 SpringのHTMLフォーム用タグライブラリの利用</h3><ul><li>JSP使用しないため割愛</li></ul><h3 id="5-12-Springの汎用タグライブラリの利用"><a href="#5-12-Springの汎用タグライブラリの利用" class="headerlink" title="5.12 Springの汎用タグライブラリの利用"></a>5.12 Springの汎用タグライブラリの利用</h3><ul><li>Springで使用できるタグについて説明<ul><li>MEMO: 必要であれば読み返す</li><li>できるだけthymeleafだけの方が良いのではと思う</li></ul></li></ul><h3 id="5-13-例外ハンドリング"><a href="#5-13-例外ハンドリング" class="headerlink" title="5.13 例外ハンドリング"></a>5.13 例外ハンドリング</h3><h4 id="5-13-1-例外の種類"><a href="#5-13-1-例外の種類" class="headerlink" title="5.13.1 例外の種類"></a>5.13.1 例外の種類</h4><ul><li>Webアプリケーションで発生する例外は大きく３つある<ul><li>システム例外:処理を継続することができない例外<ul><li>アプリケーション自体のバグ</li><li>依存ライブラリのバグ</li><li>ミドルウェアやハードウェアの故障</li><li>システムリソースの枯渇</li><li>ネットワーク障害</li></ul></li><li>リクエスト不正を通知する例外：リクエストの内容が不正なときに発生する例外<ul><li>存在しないパスへのリクエスト</li><li>バインディングエラー</li><li>入力チェックエラー</li></ul></li><li>アプリケーション例外：ビジネスルールに違反したときに発生する例外<ul><li>ユーザー登録時のIDの重複エラー</li><li>排他エラー</li><li>在庫数の不足エラー</li></ul></li></ul></li></ul><h4 id="5-13-2-例外の発生箇所とハンドリング方法"><a href="#5-13-2-例外の発生箇所とハンドリング方法" class="headerlink" title="5.13.2 例外の発生箇所とハンドリング方法"></a>5.13.2 例外の発生箇所とハンドリング方法</h4><ul><li>以下の箇所で例外が発生する可能性があり、それぞれ例外ハンドリングの方法も異なる<ul><li><ol><li>Servlet Fileter</li></ol><ul><li>サーブレットコンテナへのエラーページ機能（web.xmlの<code>&lt;error-page&gt;</code>要素）を使用してエラー処理を実装する</li></ul></li><li><ol start="2"><li>DispatcherServlet: SpringMVCが提供する例外ハンドリングの仕組み（HandlerExceptionResolver）</li></ol></li><li><ol start="3"><li>アプリケーション(Controller, Service, Repositoryなど)：SpringMVCが提供する例外ハンドリングの仕組み（HandlerExceptionResolver）</li></ol></li><li><ol start="4"><li>View（JSPなど）</li></ol><ul><li>Viewの中で発生した例外は、サーブレットコンテナのエラーページ機能を使用して絵r-あ処理を実装</li></ul></li></ul></li></ul><h4 id="5-13-3-サーブレットコンテナのエラーページ機能を利用"><a href="#5-13-3-サーブレットコンテナのエラーページ機能を利用" class="headerlink" title="5.13.3 サーブレットコンテナのエラーページ機能を利用"></a>5.13.3 サーブレットコンテナのエラーページ機能を利用</h4><ul><li><code>web.xml</code>に<code>error-page</code>を記載する方法を紹介</li></ul><h4 id="5-13-5-ExceprtionHandlerメソッドの利用"><a href="#5-13-5-ExceprtionHandlerメソッドの利用" class="headerlink" title="5.13.5 @ExceprtionHandlerメソッドの利用"></a>5.13.5 @ExceprtionHandlerメソッドの利用</h4><ul><li><p>複数のController間で共通の処理</p><ul><li><code>@ControllerAdvice</code>を用いる</li><li><a href="https://terasolunaorg.github.io/guideline/5.0.1.RELEASE/ja/ImplementationAtEachLayer/ApplicationLayer.html#id160">https://terasolunaorg.github.io/guideline/5.0.1.RELEASE/ja/ImplementationAtEachLayer/ApplicationLayer.html#id160</a></li></ul></li><li><p><code>@ExceptionHandler</code>メソッドの引数</p><ul><li>Exception</li><li>HandlerMethod</li><li>java.util.Locale</li><li>java.util.Timezone</li><li>java.time.ZoneId</li><li>java.security.Principal</li></ul></li><li><p>戻り値について</p><ul><li>String</li><li>ModelAndView</li><li>void</li><li>ResponseEntity&lt;?&gt;</li></ul></li></ul><h4 id="5-13-6-ResponseStatusを指定した例外クラスの利用"><a href="#5-13-6-ResponseStatusを指定した例外クラスの利用" class="headerlink" title="5.13.6 @ResponseStatusを指定した例外クラスの利用"></a>5.13.6 @ResponseStatusを指定した例外クラスの利用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceNotFoundException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">  <span class="comment">// *****</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TODO: 独自Exceptionを作成していくべきかどうか</li></ul><h2 id="第6章-RESTful-Webサービスの開発"><a href="#第6章-RESTful-Webサービスの開発" class="headerlink" title="第6章　RESTful Webサービスの開発"></a>第6章　RESTful Webサービスの開発</h2><h3 id="6-1-REST-APIのアーキテクチャ"><a href="#6-1-REST-APIのアーキテクチャ" class="headerlink" title="6.1 REST APIのアーキテクチャ"></a>6.1 REST APIのアーキテクチャ</h3><ul><li>RESTは「REpresentational State Transfer」の略で、クライアントとサーバー間でデータをやり取りするアプリケーションを構築するためのアーキテクチャスタイルの１つ</li><li>最も重要なのは「リソース」という概念</li><li>REST APIはデータベースなどで管理している情報の中から、クライアントに提供する情報を「リソース」として抽出</li><li>抽出したリソースはWeb上に公開し、リソースにアクセスするための手段としてRESTAPIを用意します</li></ul><h4 id="6-1-1-Resouce-Oriented-Architecture-ROA"><a href="#6-1-1-Resouce-Oriented-Architecture-ROA" class="headerlink" title="6.1.1 Resouce Oriented Architecture (ROA)"></a>6.1.1 Resouce Oriented Architecture (ROA)</h4><h4 id="6-1-2-フレームワークのアーキテクチャ"><a href="#6-1-2-フレームワークのアーキテクチャ" class="headerlink" title="6.1.2 フレームワークのアーキテクチャ"></a>6.1.2 フレームワークのアーキテクチャ</h4><ul><li>割愛 TODO: 詳細を知りたくなったら読む</li></ul><h3 id="6-2-アプリケーションの設定"><a href="#6-2-アプリケーションの設定" class="headerlink" title="6.2 アプリケーションの設定"></a>6.2 アプリケーションの設定</h3><h4 id="6-2-1-ライブラリのセットアップ"><a href="#6-2-1-ライブラリのセットアップ" class="headerlink" title="6.2.1 ライブラリのセットアップ"></a>6.2.1 ライブラリのセットアップ</h4><ul><li>リソース形式としてJSONを使用する際に利用する「FasterXML Jackson Databind」を依存ライブラリに追加する<ul><li>MEMO: SpringBootだと不要みたい</li></ul></li></ul><h4 id="6-2-2-サーブレットコンテナの設定"><a href="#6-2-2-サーブレットコンテナの設定" class="headerlink" title="6.2.2 サーブレットコンテナの設定"></a>6.2.2 サーブレットコンテナの設定</h4><ul><li><p>HiddenHttpMethodFilterの適用</p><ul><li>RESTAPIを提供する場合、HTTPメソッドとして、PUT、PATCH、DELETEなども使用するが、</li><li>Webブラウザなどクライアントの実装によっては、GETとPOSTしか使用できなかったりする</li><li>そこをサポートするために<code>org.springframework.web.filter.HiddenHttpMethodFileter</code>クラスを利用する<ul><li><code>_method=put</code>というパラメータでリクエストが送られると、サーブレットコンテナ内で行われる処理はPUTメソッドでアクセスしたときとおなじになる</li></ul></li></ul></li><li><p>HttpMessageConverterのカスタマイズ</p><ul><li>MEMO: Converterの設定をしているが、SpringBootだと不要だと思うので飛ばす</li></ul></li></ul><h3 id="6-3-RestControllerの実装"><a href="#6-3-RestControllerの実装" class="headerlink" title="6.3 @RestControllerの実装"></a>6.3 @RestControllerの実装</h3><ul><li><p>大きく２つ種類がある</p><ul><li>メソッドシグネチャを参照してフロントコントローラが処理を行う「宣言型」の処理</li><li>Controllerクラスのメソッド内に処理を実装する「プログラミング型」の処理</li></ul></li><li><p>MEMO: クライアントへ返却するオブジェクトは共通で作成しているもの（クラス）を使用するのが良いと思った</p></li><li><p>以下、割愛</p></li></ul><h2 id="第7章-Spring-MVC-の応用"><a href="#第7章-Spring-MVC-の応用" class="headerlink" title="第7章　Spring MVC の応用"></a>第7章　Spring MVC の応用</h2><ul><li>SpringMVCの機能を利用したWebアプリケーションの開発方法を学びましたが、</li><li>典型的なWebアプリケーションの開発では、<ul><li>セッションの利用</li><li>ファイルアップロード</li><li>画面やメッセージの国際化</li><li>共通処理の適用</li><li>静的リソースのキャッシュ制御　などへの考慮も必要になる</li><li>非同期処理（SSE(Server-Sent Events)）</li></ul></li></ul><h3 id="7-1-HTTPセッションの利用"><a href="#7-1-HTTPセッションの利用" class="headerlink" title="7.1 HTTPセッションの利用"></a>7.1 HTTPセッションの利用</h3><ul><li>セッション管理する方法３つある<ul><li>セッション属性（@SessionAttributes）の使用</li><li>セッションスコープのBeanの利用</li><li>HttpSessionのAPIの利用</li></ul></li></ul><h4 id="7-1-1-セッション属性（-SessionAttributes）"><a href="#7-1-1-セッション属性（-SessionAttributes）" class="headerlink" title="7.1.1 セッション属性（@SessionAttributes）"></a>7.1.1 セッション属性（@SessionAttributes）</h4><ul><li>１つのController内で扱う複数のリクエスト間でデータを共有する場合に有効な方法<ul><li>入力画面が複数のページで構成される場合や、複雑な画面遷移を伴う場合は<code>@SessionAttributes</code>を使用することを検討</li></ul></li><li>シンプルな画面構成の場合（入力画面→確認画面→完了画面とかの場合）は、HTMLフォームのHiddenで値を持ち回る方法を検討すること</li></ul><h4 id="7-1-2-セッションスコープBean"><a href="#7-1-2-セッションスコープBean" class="headerlink" title="7.1.2 セッションスコープBean"></a>7.1.2 セッションスコープBean</h4><ul><li>複数のControllerをまたぐ画面遷移において、Controller間でデータを共有する場合に有効な方法</li></ul><h3 id="7-2-ファイルアップロード"><a href="#7-2-ファイルアップロード" class="headerlink" title="7.2 ファイルアップロード"></a>7.2 ファイルアップロード</h3><ul><li>SpringMVCでファイルをアップロードする場合は、以下のいずれかの方法を利用する<ul><li>Servlet標準のアップロード機能</li><li>ApacheCommonsFileUploadのアップロード機能</li></ul></li></ul><h4 id="7-2-2-ファイルアップロード機能のセットアップ"><a href="#7-2-2-ファイルアップロード機能のセットアップ" class="headerlink" title="7.2.2 ファイルアップロード機能のセットアップ"></a>7.2.2 ファイルアップロード機能のセットアップ</h4><ul><li><p>web.xmlに<code>&lt;multipart-config /&gt;</code>を追加するとのこと</p></li><li><p>Servlet標準のファイルアップロード機能をデフォルトのまま利用するとアップロードできるファイルのサイズに上限がないため、上限を設けたい場合は、ファイル単位の最大サイズ、アップロード時のリクエスト全体の最大サイズ、一時ファイル出力有無の閾値サイズの３つを指定する必要がある</p></li><li><p>上限に引っかかると、<code>MultipartException</code>が発生するので、Handlerでハンドリングすること</p></li><li><p>メモ</p><ul><li>SpringMVCのDispatcherServletより前にリクエストパラメータにアクセスする処理があると、MultipartExceptionが発生しない可能性がある</li><li>SpringWEBから提供されているフィルターを利用すると制御できるとのこと<ul><li>TODO: SpringBootだとどのように記載するか確認</li></ul></li></ul></li></ul><h4 id="7-2-3-アップロードデータの取得"><a href="#7-2-3-アップロードデータの取得" class="headerlink" title="7.2.3 アップロードデータの取得"></a>7.2.3 アップロードデータの取得</h4><ul><li><p>Formクラスの作成</p><ul><li>普通にFormクラスの作成 <code>MultipartFile</code>型で変数定義する</li></ul></li><li><p>Viewの作成</p><ul><li>input type&#x3D;”file”で作成して送るだけ</li></ul></li><li><p>Controller</p><ul><li>ファイルを取得して永続化操作</li></ul></li><li><p>Validation</p><ul><li>ファイルサイズや、コンテンツタイプ、ファイル名などをチェックする場合は、Validatorを作成してチェック</li></ul></li><li><p>TODO: 実際にアイコン画像などをDBで保持できる永続化ロジックまで書く</p></li></ul><h3 id="7-3-非同期リクエスト"><a href="#7-3-非同期リクエスト" class="headerlink" title="7.3 非同期リクエスト"></a>7.3 非同期リクエスト</h3><h4 id="7-3-1-非同期リクエストの仕組み"><a href="#7-3-1-非同期リクエストの仕組み" class="headerlink" title="7.3.1 非同期リクエストの仕組み"></a>7.3.1 非同期リクエストの仕組み</h4><ul><li><p>非同期実行が終了してからHTTPレスポンスを開始</p><ul><li>勘違いしやすいのが、HTTPレスポンスは非同期実行している処理が終了したあとに行うため、クライアント側から見ると、同期処理と同じ動作になる</li></ul></li><li><p>SpringMVCはこのパターンの非同期処理をサポートするために以下の２つの方法を提供</p><ul><li>SpringMVC管理のスレッドを使用した非同期処理</li><li>SpringMVC管理外のスレッドを使用した非同期処理</li></ul></li><li><p>非同期実行の処理中にHTTPレスポンスを開始</p><ul><li>ロングポーリングを使用した非同期処理</li><li>SSE（Server-Sent Events）に準拠した非同期処理</li></ul></li></ul><h4 id="7-3-2-非同期実行を有効にするための設定"><a href="#7-3-2-非同期実行を有効にするための設定" class="headerlink" title="7.3.2 非同期実行を有効にするための設定"></a>7.3.2 非同期実行を有効にするための設定</h4><ul><li>web.xmlに設定追記</li><li>java configにBean定義追加</li></ul><h4 id="7-3-3-非同期処理の実装"><a href="#7-3-3-非同期処理の実装" class="headerlink" title="7.3.3 非同期処理の実装"></a>7.3.3 非同期処理の実装</h4><ul><li><p>以下の２つの非同期処理の実装方法を紹介</p><ul><li>CompletableFutureを使用した非同期処理</li><li>SseEmitterを使用したPush型の非同期処理</li></ul></li><li><p><code>@Async</code>の利用</p><ul><li>本書で説明する非同期処理は、どちらもSpringMVC管理外のスレッドを使用した非同期処理</li><li>SpringFrameworkは、特定のメソッドを別スレッドで実行する仕組みを提供しており、別スレッドで実行したいメソッドに、<code>org.springframework.scheduling.annotation.Async</code>を付与するだけ</li></ul></li><li><p>MEMO: SpringBootでの利用に参考</p><ul><li><a href="https://qiita.com/mitsuya/items/c21907ab10919111e773">https://qiita.com/mitsuya/items/c21907ab10919111e773</a></li></ul></li><li><p>CompletableFutureを使用した非同期処理の実装</p><ul><li><code>CoompletableFuture&lt;String&gt;</code>を返却する</li></ul></li><li><p>SseEmitterを使用したPush型の非同期処理の実装</p><ul><li><code>new SseEmitter();</code>でイベント処理を行う<ul><li>具体的な使用方法について説明なし</li></ul></li></ul></li></ul><h4 id="7-3-4-非同期実行の例外ハンドリング"><a href="#7-3-4-非同期実行の例外ハンドリング" class="headerlink" title="7.3.4 非同期実行の例外ハンドリング"></a>7.3.4 非同期実行の例外ハンドリング</h4><ul><li><code>DeferredResult</code>を使用して結果を設定する</li><li>TODO: 結果を非同期で画面に通知する方法確認</li></ul><h4 id="7-3-5-非同期実行に対する共通処理の実装"><a href="#7-3-5-非同期実行に対する共通処理の実装" class="headerlink" title="7.3.5 非同期実行に対する共通処理の実装"></a>7.3.5 非同期実行に対する共通処理の実装</h4><ul><li><p>CallableProcessingInterceptorもしくはDeferredResultProcessingInterceptorのAdopterを実装したクラスを作成</p></li><li><p>現在は、interfaceにデフォルトメソッドが定義できるようになったので、Adopterではなくて、interfaceの方を使用すべきとのことで、<code>@Deprecated</code>になっている</p></li><li><p><code>CallableProcessingInterceptor</code>インターフェース</p></li></ul><h3 id="7-4-共通処理の実装"><a href="#7-4-共通処理の実装" class="headerlink" title="7.4 共通処理の実装"></a>7.4 共通処理の実装</h3><p>ControllerのHandlerメソッドの呼び出し前後に共通処理を実行する方法について説明します。</p><h4 id="7-4-1-サーブレットフィルタの利用"><a href="#7-4-1-サーブレットフィルタの利用" class="headerlink" title="7.4.1 サーブレットフィルタの利用"></a>7.4.1 サーブレットフィルタの利用</h4><ul><li><p>SpringMVCの呼び出し前後に共通する処理を実行するには、<code>javax.servlet.Filter</code>インターフェースの実装クラスを作成する</p></li><li><p>Filterクラスを直接実装してもよいが、ここではSpringが提供しているサポートクラスを利用する方法を紹介</p></li><li><p>サポートクラス</p><ul><li><code>GenericFilterBean</code>クラス</li><li><code>OncePerRequestFilter</code>クラス</li></ul></li><li><p>DIコンテナで管理しているBeanのインジェクション方法</p><ul><li>サーブレットフィルター内の処理でDIコンテナ管理しているBeanを利用したい場合は、サーブレットフィルタをDIコンテナに登録し、DelegatingFilterProxy経由でサーブレットフィルタの処理を実行する</li><li>DelegatingFilterProxyは、SpringのDIコンテナに登録されているサーブレットフィルターに処理を移譲するサーブレットフィルタクラス</li></ul></li></ul><h4 id="7-4-2-HandlerInterceptorの利用"><a href="#7-4-2-HandlerInterceptorの利用" class="headerlink" title="7.4.2 HandlerInterceptorの利用"></a>7.4.2 HandlerInterceptorの利用</h4><ul><li><p>Controllerでハンドリングする処理に対してだけ共通処理を実行したい場合は、</p><ul><li><code>org.springframework.web.servlet.HndlerInterceptor</code>インターフェースの実装クラスを作成する</li></ul></li><li><p>メソッド</p><ul><li>preHandle：実行前</li><li>postHandle：例外時は呼び出されない</li><li>afterCompletion：実行後</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandler</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">      ModelAndView modelAndView)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">      HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">      Method method = ((HandlerMethod) handler).getMethod();</span><br><span class="line">      log.info(<span class="string">"[SUCCESS CONTROLLER] &#123;&#125;.&#123;&#125;"</span>, method.getDeclaringClass().getSimpleName(), method.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> LoggingInterceptor())</span><br><span class="line">            .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">            .excludePathPatterns(<span class="string">"/resources/**"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-3-ControllerAdviceの利用"><a href="#7-4-3-ControllerAdviceの利用" class="headerlink" title="7.4.3 @ControllerAdviceの利用"></a>7.4.3 @ControllerAdviceの利用</h4><ul><li>Controllerクラスには、Handlerメソッドとは別に、Controller専用の特殊なメソッド（<code>@InitBinder</code>メソッド、<code>@ModelAttribute</code>メソッド、<code>@ExceptionHandler</code>メソッド）を実装することができる</li><li>これらのメソッドを複数のControllerクラスで共有するには、<code>@ControllerAdvice</code>を付与したクラスを作成する</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/error"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">handleError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(Throwable.class)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">handleThrowable</span><span class="params">(Throwable exception, Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(Exception.class)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">handleException</span><span class="params">(Exception exception, Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(IOException.class)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">handleIOException</span><span class="params">(IOException exception, Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-4-HandlerMethodArgumentResolverの利用"><a href="#7-4-4-HandlerMethodArgumentResolverの利用" class="headerlink" title="7.4.4 HandlerMethodArgumentResolverの利用"></a>7.4.4 HandlerMethodArgumentResolverの利用</h4><ul><li>SpringMVCのデフォルトでサポートされていないオブジェクトをControllerのHandlerメソッドの引数に渡したい場合は、<code>org.springframework.web.method.support.HandlerMethodArgumentResolver</code>インターフェースの実装クラスを作成します。</li><li>あまり利用するシーンがわからないため割愛する</li></ul><h3 id="7-5-静的リソース"><a href="#7-5-静的リソース" class="headerlink" title="7.5 静的リソース"></a>7.5 静的リソース</h3><ul><li>ルートから任意のディレクトリに配置した静的リソースにアクセスできますという説明</li></ul><h4 id="7-5-1-デフォルトサーブレットとDispatcherServletの共存"><a href="#7-5-1-デフォルトサーブレットとDispatcherServletの共存" class="headerlink" title="7.5.1 デフォルトサーブレットとDispatcherServletの共存"></a>7.5.1 デフォルトサーブレットとDispatcherServletの共存</h4><ul><li>Servletの使用では、ルートパス（）にマッピングされたサーブレットのことを「デフォルトサーブレット」と呼び、デフォルトサーブレット経由でWebアプリケーションのドキュメントルート配下のファイルにアクセスすることができる</li><li>SpringMVCアプリケーションでは、DispatcherServletをルートパスにマッピングするスタイルを採用することがよくあるが、DispatcherServletをルートパスにマッピングすると、Webアプリケーションのドキュメントルート配下のファイルにアクセスできなくなってしまいます。</li><li>この動作を変更するには、SpringMVCが提供している「DispatcherServletで受けたリクエストをデフォルトサーブレットへ転送する機能」を有効化する必要がある</li></ul><h4 id="7-5-2-SpringMVC独自の静的リソース解決の仕組み"><a href="#7-5-2-SpringMVC独自の静的リソース解決の仕組み" class="headerlink" title="7.5.2 SpringMVC独自の静的リソース解決の仕組み"></a>7.5.2 SpringMVC独自の静的リソース解決の仕組み</h4><ul><li><p>HTTPのキャッシュ制御</p></li><li><p>ResourceResolverとResouceTransformerの利用</p><ul><li>ResourceHttpRequestHandlerには<ul><li>バージョン付き公開パスを使用した静的リソースへのアクセス</li><li>Gzip化された静的リソースへのアクセス</li><li>WebJars内の静的リソースのバージョン番号の隠蔽<ul><li>を行う機能がある</li></ul></li></ul></li></ul></li><li><p>ResourceResolverインターフェース</p><ul><li>静的リソースにアクセスするための公開パス</li><li>サーバー上の物理的な静的リソースを相互に解決するためのメソッドを提供</li></ul></li><li><p>ResourceTransformerインターフェース</p><ul><li>静的リソースのコンテンツデータを書き換えるためのメソッドを提供</li></ul></li><li><p>バージョン付きの公開パスを使用した静的リソースへのアクセス</p></li><li><p>Thymeleafでのアクセス方法について確認する</p><ul><li>ここで紹介されていた<a href="https://ksoichiro.blogspot.com/2015/04/spring-boot_14.html">https://ksoichiro.blogspot.com/2015/04/spring-boot_14.html</a></li><li><code>th:href=&quot;@{/css/main.css}&quot;</code>などと記載する</li></ul></li></ul><h3 id="7-6-国際化"><a href="#7-6-国際化" class="headerlink" title="7.6 国際化"></a>7.6 国際化</h3><h4 id="7-6-1-ロケールの解決"><a href="#7-6-1-ロケールの解決" class="headerlink" title="7.6.1 ロケールの解決"></a>7.6.1 ロケールの解決</h4><ul><li><p>アプリケーション内で扱うロケール解決には、<code>org.springframework.web.servlet.LocaleResolver</code>インターフェースを使用する</p></li><li><p>SpringMVCは、ロケールの保存場所に応じて以下の実装クラスを提供しており、デフォルトではAcceptHeaderLocaleResolverが有効になっている</p></li><li><p>提供されているLocaleResolverの実装クラス</p><ul><li>AcceptHeaderLocaleResolver</li><li>SessionLocaleResolver</li><li>CookieLocaleResolver</li><li>FixedLocaleResolver</li></ul></li><li><p>クライアントからロケールの指定がない場合、デフォルトロケールが利用され、</p><ul><li>LocaleResolverに指定したデフォルトロケール</li><li>JVMに指定したロケール</li><li>OSに指定したロケール<ul><li>の順番で解決されます。</li></ul></li></ul></li></ul><h4 id="7-6-2-ロケールの利用"><a href="#7-6-2-ロケールの利用" class="headerlink" title="7.6.2 ロケールの利用"></a>7.6.2 ロケールの利用</h4><ul><li>VIEWからロケールにアクセスするときはSpringのタグを使用する</li><li>Handlerメソッドからロケールにアクセスするときは引数にLocaleを指定する</li><li>Handler以外の場所からロケールにアクセスするときは、RequestContextUtilsのgetLocaleメソッドを使用する</li></ul><h4 id="7-6-3-UIを使用したロケールの切り替え"><a href="#7-6-3-UIを使用したロケールの切り替え" class="headerlink" title="7.6.3 UIを使用したロケールの切り替え"></a>7.6.3 UIを使用したロケールの切り替え</h4><ul><li><p>画面などのUIを使用してロケールを切り替える方法について説明</p></li><li><p>ロケールの切り替えは、<code>org.springframework.web.servlet.i18n.LocaleChangeInterceptor</code>を利用することで簡単に行うことができる</p></li><li><p>LocaleResolverのBean定義</p></li><li><p>LocaleChangeInterceptorのBean定義</p></li><li><p>ロケール切り替え用の画面要素の表示</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?locale=en"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?locale=ja"</span>&gt;</span>Japanese<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>このリンクをクリクすると、LocaleChangeInterceptorが呼び出され、<br>リクエストパラメータで指定されたロケールがSpringMVCアプリケーションに反映される</p><h2 id="第8章-Spring-Test"><a href="#第8章-Spring-Test" class="headerlink" title="第8章　Spring Test"></a>第8章　Spring Test</h2><ul><li><p>本章では、SpringFrameworkが提供するテスト支援モジュールを利用して、Springアプリケーションに対してテストを行う方法について解説していく</p></li><li><p>紹介を行うテスト</p><ul><li>DIコンテナに登録したBeanへのテスト</li><li>データベースアクセスを伴う処理へのテスト</li><li>SpringMVC上で動くControllerへのテスト</li></ul></li><li><p>第９章では、SpringSecurityの機能を利用した処理へのテストを紹介</p></li></ul><h3 id="8-1-Spring-Testとは"><a href="#8-1-Spring-Testとは" class="headerlink" title="8.1 Spring Testとは"></a>8.1 Spring Testとは</h3><ul><li><p>Spring Testとは</p><ul><li>Spring Framework上で動かすために作成したクラスのテストを支援するモジュール</li></ul></li><li><p>単体テスト</p><ul><li>テスト対象のクラス内で実装しているロジックのみをテスト</li><li>単体テストを行う際には、テスト対象のクラスの中で依存している他のコンポーネントはモックやスタブを使用し、実行結果が他のコンポーネントの実装内容に左右されないようにする</li></ul></li><li><p>結合テスト</p><ul><li>基本的にモックやスタブは使わず、プロダクション環境で使用するクラスを結合してテストを行います。</li><li>ポイントは、システムやアプリケーション全体が正しく動作するかを検証するのではなく、開発者が作成したクラスがSpringのフレームワーク上で正しく動作するかをテストするという点</li></ul></li><li><p>提供されている機能</p><ul><li>JUnitやTestNGといったテスティングフレームワーク上でのSpringのDIコンテナを動かす機能</li><li>トランザクション制御をテスト向けに最適化する機能</li><li>アプリケーションサーバーを使わずにSpringMVCの動作を再現する機能</li><li>テストデータをセットアップするためのSQLを実行する機能</li><li>RestTemplateを使用したHTTP通信に対してモックレスポンスを返却する機能</li></ul></li></ul><h3 id="8-2-DIコンテナ管理のBeanに対するテスト"><a href="#8-2-DIコンテナ管理のBeanに対するテスト" class="headerlink" title="8.2 DIコンテナ管理のBeanに対するテスト"></a>8.2 DIコンテナ管理のBeanに対するテスト</h3><ul><li>junitを使用する前提で説明</li></ul><h4 id="8-2-1-Beanの単体テスト"><a href="#8-2-1-Beanの単体テスト" class="headerlink" title="8.2.1 Beanの単体テスト"></a>8.2.1 Beanの単体テスト</h4><ul><li><p>Serviceクラスをテスト</p></li><li><p>依存しているコンポーネントはできるだけモック化することを検討する</p><ul><li>外部ファイル参照サービスやDBアクセスなど</li></ul></li></ul><h4 id="8-2-2-DIコンテナ内のBeanに対する結合テスト"><a href="#8-2-2-DIコンテナ内のBeanに対する結合テスト" class="headerlink" title="8.2.2 DIコンテナ内のBeanに対する結合テスト"></a>8.2.2 DIコンテナ内のBeanに対する結合テスト</h4><ul><li>Springの機能を使用して、DIコンテナ内のリソースを取得してテストを行う</li><li>単体テストは本当にクラス単体の観点なのに対して、結合テストはプロジェクト内のリソースを結合したテストとみなしている</li></ul><h4 id="8-2-3-Spring-Testcontext-Framework"><a href="#8-2-3-Spring-Testcontext-Framework" class="headerlink" title="8.2.3 Spring Testcontext Framework"></a>8.2.3 Spring Testcontext Framework</h4><ul><li>他のランナーとSpringを併用したい場合は、<code>@ClassRule</code>と<code>@Rule</code>を使用すれば実現できるという説明</li><li>TODO: 使用するランナーによって何が違うのかを後で確認する必要ある</li></ul><h4 id="8-2-4-DIコンテナのコンフィギュレーション"><a href="#8-2-4-DIコンテナのコンフィギュレーション" class="headerlink" title="8.2.4 DIコンテナのコンフィギュレーション"></a>8.2.4 DIコンテナのコンフィギュレーション</h4><p>DIコンテナを作成するには、<br><code>@org.springframework.test.context.ContextConfiguration</code>をテストクラスケースに付与する</p><ul><li><p>デフォルトのBean定義ファ入りう</p></li><li><p>Webアプリケーション向けのDIコンテナのコンフィギュレーション</p><ul><li><code>@WebApplicationConfiguration</code>付与について説明<ul><li>Webアプリケーション向けのDIコンテナに加えて、</li><li>ServletAPIに依存する各種モックオブジェクトなどをテストケースクラスにインジェクションできる</li></ul></li></ul></li></ul><h4 id="8-2-5-DIコンテナのライフサイクル制御"><a href="#8-2-5-DIコンテナのライフサイクル制御" class="headerlink" title="8.2.5 DIコンテナのライフサイクル制御"></a>8.2.5 DIコンテナのライフサイクル制御</h4><ul><li><p>Spring TestContext Framework上に生成されたDIコンテナは、テスト実行時のJavaVMが終了するまでキャッシュされ、必要に応じてテストケース間で共有される仕組みになっています。</p></li><li><p>DIコンテナのキャッシュ</p><ul><li>デフォルトの動作では、同一テストケースクラスのテストメソッドで同じDIコンテナが使われる</li><li>さらにテストケースクラスが別の場合でも、<code>@ContextConfiguration</code>などに指定した属性値が同じであれば、キャッシュ済みのDIコンテナが利用される</li></ul></li><li><p>DIコンテナの破棄</p><ul><li>割愛…TODO: 実際のテストケースの組み方について調査する必要あり</li></ul></li></ul><h4 id="8-2-6-プロファイルの指定"><a href="#8-2-6-プロファイルの指定" class="headerlink" title="8.2.6 プロファイルの指定"></a>8.2.6 プロファイルの指定</h4><ul><li>Springのプロファイル機能を使用しているアプリケーションに対してテストを行う場合は、<code>@org.springframework.test.context.ActiveProfiles</code>を使う</li></ul><h4 id="8-2-7-テスト用のプロパティ値の指定"><a href="#8-2-7-テスト用のプロパティ値の指定" class="headerlink" title="8.2.7 テスト用のプロパティ値の指定"></a>8.2.7 テスト用のプロパティ値の指定</h4><ul><li><p>テスト用のプロパティ値を設定できる</p><ul><li><code>@org.springframework.test.context.TestPropertySource</code>を使う</li></ul></li><li><p>プロパティ値の指定には２つの方法がある</p><ul><li>アノテーションに直接指定する</li><li>プロパティファイルに指定する</li></ul></li></ul><h3 id="8-3-データベースアクセスを伴う処理のテスト"><a href="#8-3-データベースアクセスを伴う処理のテスト" class="headerlink" title="8.3 データベースアクセスを伴う処理のテスト"></a>8.3 データベースアクセスを伴う処理のテスト</h3><ul><li>データベースへアクセスするBeanに対するテスト方法について説明</li><li>データベースにアクセスするBeanに対してテストを行う場合、以下の作業が必要になる<ul><li>テスト用のデータソースの設定</li><li>テストデータのセットアップ</li><li>テストケース用のトランザクション制御</li><li>テーブルの中身の検証</li></ul></li></ul><h4 id="8-3-1-テスト用のデータソースの設定"><a href="#8-3-1-テスト用のデータソースの設定" class="headerlink" title="8.3.1 テスト用のデータソースの設定"></a>8.3.1 テスト用のデータソースの設定</h4><ul><li>Test用のConfigクラスを作成して、既存のコンフィグクラスを上書きする説明</li></ul><h4 id="8-3-2-テストデータのセットアップ"><a href="#8-3-2-テストデータのセットアップ" class="headerlink" title="8.3.2 テストデータのセットアップ"></a>8.3.2 テストデータのセットアップ</h4><ul><li><code>@Sql</code>を使用すると、テストケース・メソッドの呼び出し前に任意のSLQを実行できる</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sqlを付与することで、テストメソッド実行前に任意のSQL文を実行することができる</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Sql</span>(&#123; <span class="string">"/account-delete.sql"</span>, <span class="string">"/account-insert-data.sql"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Account account = accountRepositry.findOne(<span class="string">"001"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>メモ<ul><li><code>@Sql</code>にはJavaSE8で追加された<code>@Repeatable</code>が付与されているため、JavaSE8以降を使う場合は同じ箇所に複数指定できる<ul><li>JavaSE7以前のJavaでも、<code>@org.springframework.test.context.jdbc.SqlGroup</code>を使うことで、複数のSQLを指定できる</li></ul></li></ul></li></ul><h4 id="8-3-3-テストケース用のトランザクション制御"><a href="#8-3-3-テストケース用のトランザクション制御" class="headerlink" title="8.3.3 テストケース用のトランザクション制御"></a>8.3.3 テストケース用のトランザクション制御</h4><ul><li><p>デフォルトではテストデータをセットアップする際に使用するトランザクションと、</p></li><li><p>テスト対象のデータアクセス処理で使用するトランザクションは別々になってしまう</p></li><li><p>テストが途中で失敗して、レコードが更新されてしまったり、データの状態が変わってしまうため注意が必要</p></li><li><p>このような事故を防ぐには、JUnit専用のデータベースを用意しておくと確実</p></li><li><p>ローカルなんかも優位だと思う</p></li><li><p>あるいは、SpringTestが提供しているテスト用のトランザクション制御の仕組みを利用して防ぐこともできる</p></li><li><p>トランザクション境界の移動</p><ul><li>SpringTestでは、、JUnit実行時のトランザクション境界を、テストケースメソッドの呼び出し前に移動する仕組みを提供している。</li><li>この仕組を利用すると、<code>@Sql</code>で指定したSQLファイルの実行とテストを同一のトランザクション内で行うことができる</li><li><code>@Transactional</code>をクラス、メソッドに指定する</li></ul></li><li><p>トランザクション境界でのロールバック&#x2F;コミットの制御</p><ul><li>処理が完了したあと、ロールバックするのではなくコミットしたい場合、<code>@Commit</code>を付与すれば実現できる</li></ul></li><li><p>永続コンテキストをフラッシュ</p><ul><li>JPAやHibernateがEntityへの更新操作を永続コンテキストと呼ばれるインメモリ領域に蓄積しておき、トランザクションのコミット時にSQLを発行する仕組みになっているため、明示的にSQLが発行されるようにフラッシュする必要がある</li></ul></li></ul><h4 id="8-3-4-テーブルの中身の検証"><a href="#8-3-4-テーブルの中身の検証" class="headerlink" title="8.3.4 テーブルの中身の検証"></a>8.3.4 テーブルの中身の検証</h4><ul><li>JdbcTemplateを使用して検証する</li><li>DIコンテナに入っている同じオブジェクトを使用すること</li></ul><h3 id="8-4-Spring-MVC-のテスト"><a href="#8-4-Spring-MVC-のテスト" class="headerlink" title="8.4 Spring MVC のテスト"></a>8.4 Spring MVC のテスト</h3><ul><li><p>SpringMVC上で動くControllerに対するテスト方法について説明</p></li><li><p>Controllerに対するテストの話をするときにいつも出てくる話題がある</p><ul><li>→「Controllerに対する単体テストは必要か？」という話題</li></ul></li><li><p>Controllerの主な役割は、</p><ul><li>リクエストマッピング</li><li>入力チェック</li><li>リクエストデータの取得</li><li>ビジネスロジックの呼び出し</li><li>遷移先の制御</li></ul></li><li><p>これらは、SpringMVCのフレームワークと結合しないと妥当性を検証することができないので、単体テストではなく、結合テストとして行ったほうがよい</p></li><li><p>では、SpringMVCのフレームワーク機能と結合した状態でControllerをテストするにはどうすればよいのでしょうか？</p></li><li><p>最もオーソドックスな選択肢は、Webアプリケーションをアプリケーションサーバーにデプロイし、E2E（End to End）テストとして実施する方法</p></li><li><p>E2Eテストとして実施すると、Viewが生成したレスポンスデータの妥当性を検証できるのがメリット</p></li><li><p>一方、以下のようなデメリットがある</p><ul><li>アプリケーションサーバーやデータベースの起動が必須となる</li><li>トランザクションがコミットされるため、テスト実施前の状態に戻すことができない</li><li>回帰テストを実行するために、Seleniumなどを利用したテストケースの実装が必要になる</li><li>Seleniumを使うと、テストの実行時間が長くなる</li></ul></li><li><p>SpringTestはE2Eテストのデメリットを解消しつつ、SpringMVCのフレームワーク機能と結合した状態でControllerをテストするためのプラットフォームとして、<code>org.springframework.test.web.servlet.MockMvc</code>というクラスを提供している</p></li></ul><h4 id="8-4-1-MockMvcとは"><a href="#8-4-1-MockMvcとは" class="headerlink" title="8.4.1 MockMvcとは"></a>8.4.1 MockMvcとは</h4><ul><li><p>アプリケーションサーバー上にデプロイせず、SpringMVCの動作を再現する仕組みを提供するクラス</p></li><li><p>流れ</p><ol><li>テストケース・メソッドは、DispatcherServletにリクエストするデータ（リクエストパスやリクエストパラメータなど）をセットアップする</li><li>MockMvcは、DispatcherServletに対して擬似的なリクエストを行う。実際に使われるDispatcherServletは、テスト用に拡張されている、<code>org.springframework.test.web.servlet.TestDipacherSevlet</code>となる</li><li>DispatcherServletは、リクエスト内容に一致するHandlerのメソッドを呼び出す</li><li>テストケースメソッドは、MockMvcが返却する実行結果を受け取り、実行結果の妥当性を検証する</li></ol></li><li><p>動作モードには２つある</p><ul><li>ユーザー指定のDIコンテナと連携するモード</li><li>スタンドアロンモード</li></ul></li><li><p>SpringMVCのコンフィギュレーションも含めてテストしたい場合、ユーザー指定のDIコンテナと連携するモードを利用すること</p></li><li><p>メモ</p><ul><li>本書では扱わないが、SpringTestは、MockMvcとHtmlUnitを連携する機能も提供している</li><li>HtmlUnitと連携することで、テンプレートエンジンが生成したHTMLを検証することができる</li><li>さらに、SeleniumWebDriverやGebと連携すると、Page Object Patternを活用した可読性および再利用性の高いテストケースを記載することも可能</li><li>TODO: あとで確認してみる</li></ul></li></ul><h4 id="8-4-2-MockMvcのセットアップ"><a href="#8-4-2-MockMvcのセットアップ" class="headerlink" title="8.4.2 MockMvcのセットアップ"></a>8.4.2 MockMvcのセットアップ</h4><ul><li><p>ユーザー指定のDIコンテナと連携するモード</p></li><li><p>スタンドアロンモード</p><ul><li>SpringMVCのコンフィギュレーションはSpringTest側が行い、SpringTestが生成したDIコンテナを使用してSpringMVCの動作を再現</li></ul></li><li><p>サーブレットフィルタの追加</p><ul><li>MockMvcには、サーブレットフィルタを追加することができる</li></ul></li><li><p>staticメソッドのインポート</p><ul><li>テストを書く前に、MockMvcを使用したテストをサポートしてくれるstaticメソッドをインポートします。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// よく使用するstaticメソッド</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;</span><br></pre></td></tr></table></figure><h4 id="8-4-3-テストの実行"><a href="#8-4-3-テストの実行" class="headerlink" title="8.4.3 テストの実行"></a>8.4.3 テストの実行</h4><ul><li>テストを実行する際は、Controllerを呼び出すために必要なリクエストデータをセットアップし、MockMvcにリクエストの実行依頼を行います。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHome</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  mockMvc.perform(get(<span class="string">"/"</span>))</span><br><span class="line">      .andExpect(status().isOk())</span><br><span class="line">      .andExpect(forwardedUrl(<span class="string">"/WEB-INF/index.jsp"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-4-4-リクエストデータのセットアップ"><a href="#8-4-4-リクエストデータのセットアップ" class="headerlink" title="8.4.4 リクエストデータのセットアップ"></a>8.4.4 リクエストデータのセットアップ</h4><ul><li>リクエストデータのセットアップは、<ul><li><code>org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder</code></li><li><code>org.springframework.test.web.servlet.request.MockMultipartHttpServletRequestBuilder</code></li><li>のファクトリメソッドを使用して行います。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBooks</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  mockMvc.perform(get(<span class="string">"/books"</span>)</span><br><span class="line">      .param(<span class="string">"name"</span>, <span class="string">"Spring"</span>)</span><br><span class="line">      .accept(MediaType.APPLICATION_JSON)</span><br><span class="line">      .header(<span class="string">"X-Track-Id"</span>, UUID.randomUUID().toString()))</span><br><span class="line">      .andExpect(status().isOk());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-4-5-実行結果の検証"><a href="#8-4-5-実行結果の検証" class="headerlink" title="8.4.5 実行結果の検証"></a>8.4.5 実行結果の検証</h4><ul><li><p>MockMvcResultMathcersの主なメソッド</p><ul><li>status</li><li>header</li><li>cookie</li><li>content</li><li>view</li><li>forwardedUrl</li><li>redirectedUrl</li><li>model</li><li>flash</li><li>request</li></ul></li><li><p>メモ</p><ul><li>ResultMatcherでサポートされていない検証を行いたい場合は、以下のいずれかの方法で検証ロジックを実装する<ul><li>独自のResultMatcherを作成する</li><li>ResultActionsのandReturnメソッドを呼び出して、MvcResultを取得し、テストケース内で検証ロジックを実装する</li></ul></li><li>MEMO: 検証ロジックを複数のテストケースで共有したい場合は、ResultMatcherを作成すること</li></ul></li></ul><h4 id="8-4-6-実行結果の出力"><a href="#8-4-6-実行結果の出力" class="headerlink" title="8.4.6 実行結果の出力"></a>8.4.6 実行結果の出力</h4><ul><li>実行結果をログなどに出力する場合は、<code>org.springframework.test.web.servlet.ResultActions</code>の<code>andDo</code>メソッドを使用する</li><li>andDoメソッドの引数には、実行結果に対して、任意の処理を行う<code>org.springframewok.test.web.servlet.ResultHandler</code>を指定する</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mockMvc.perform(get(<span class="string">"/books"</span>))</span><br><span class="line">    .andExpect(status().isOk())</span><br><span class="line">    .andDo(log());</span><br></pre></td></tr></table></figure><ul><li>log: 実行結果をデバッグレベルでログ出力する</li><li>pring: 実行結果を任意の出力先に出力する</li></ul><h2 id="第9章-Spring-Security"><a href="#第9章-Spring-Security" class="headerlink" title="第9章　Spring Security"></a>第9章　Spring Security</h2><ul><li><p>SpringSecurityの「セットアップ方法」と「アーキテクチャ」について説明したあと、</p></li><li><p>セキュリティ対策の基本となる</p><ul><li>「認証」と「認可」、</li></ul></li><li><p>さらにセキュリティを強化するために必要となる</p><ul><li>「CSRF対策」</li><li>「セッション管理」</li><li>「ブラウザのセキュリティ対策機能との連携（セキュリティヘッダーの出力）」について説明</li></ul></li><li><p>最後に、SpringSecurityが提供する支援モジュールを使用して、セキュリティ対策が正しく適用されているかをテストする方法についても紹介</p></li></ul><h3 id="9-1-SpringSecurityとは"><a href="#9-1-SpringSecurityとは" class="headerlink" title="9.1 SpringSecurityとは"></a>9.1 SpringSecurityとは</h3><ul><li>アプリケーションにセキュリティ対策機能を実装する際に使用するフレームワーク</li></ul><h4 id="9-1-1-SpringSecurityの特徴"><a href="#9-1-1-SpringSecurityの特徴" class="headerlink" title="9.1.1 SpringSecurityの特徴"></a>9.1.1 SpringSecurityの特徴</h4><ul><li>豊富なオプションの提供<ul><li>SpringSecurityのデフォルト実装の動作をカスタマイズするためのオプションが豊富に提供されている</li><li>このため、デフォルトの動作がセキュリティ要件に合致しない場合であっても、オプションの値を変更することで要件にあった動作に変更できるケースがある</li></ul></li><li>豊富な拡張ポイントの提供<ul><li>SpringSecurityは動作をカスタマイズするための拡張ポイントを豊富に提供します。</li><li>SpringSecurityのデフォルト実装を使って要件を満たせない場合は、拡張クラスを作成することで要件にあった動作にカスタマイズすることができます。</li></ul></li></ul><h4 id="9-1-2-基本機能"><a href="#9-1-2-基本機能" class="headerlink" title="9.1.2 基本機能"></a>9.1.2 基本機能</h4><ul><li><p>セキュリティ対策の基本機能として「認証機能」と「認可機能」の２つを提供しています。</p></li><li><p>認証機能：アプリケーションを利用するユーザーの正当性を確認する機能を提供する</p></li><li><p>認可機能：アプリケーションが提供するリソースや処理に対するアクセスを制御する機能を提供する</p></li></ul><h4 id="9-1-3-強化機能"><a href="#9-1-3-強化機能" class="headerlink" title="9.1.3 強化機能"></a>9.1.3 強化機能</h4><ul><li><p>SpringSecurityでは認証と認可という基本機能に加え、</p></li><li><p>Webアプリケーションのセキュリティを強化するための機能をいくつか提供している</p></li><li><p>セキュリティ対策の強化機能</p><ul><li>セッション管理機能</li><li>CSRF対策機能</li><li>ブラウザのセキュリティ対策機能との連携機能</li><li>※他にある！TODO: 他のセキュリティ機能も確認しておく</li></ul></li></ul><h3 id="9-2-Spring-Securityのセットアップ"><a href="#9-2-Spring-Securityのセットアップ" class="headerlink" title="9.2 Spring Securityのセットアップ"></a>9.2 Spring Securityのセットアップ</h3><h4 id="9-2-1-ライブラリのセットアップ"><a href="#9-2-1-ライブラリのセットアップ" class="headerlink" title="9.2.1 ライブラリのセットアップ"></a>9.2.1 ライブラリのセットアップ</h4><ul><li>pom.xmlに設定を追加する手順の説明</li></ul><h4 id="9-2-2-SpringSecurityのBean定義"><a href="#9-2-2-SpringSecurityのBean定義" class="headerlink" title="9.2.2 SpringSecurityのBean定義"></a>9.2.2 SpringSecurityのBean定義</h4><p>SpringSecurityのコンポーネントをBean定義します</p><ul><li>コンフィギュレーションクラスの作成</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SpringSecurityが提供しているコンフィギュレーションクラスがインポートされ、SpringSecurityを利用するために必要となるコンポーネントのBean定義が自動で行われる仕組み</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123; <span class="comment">// 継承すると、デフォルトで適用されるBean定義を簡単にカスタマイズすることができる</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// セキュリティ対策が不要なリソースがある場合、SpringSecurityの処理を適用しないようにする</span></span><br><span class="line">    web.ignoring().antMatchers(<span class="string">"/resources/**"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>web.xmlへの設定追加方法説明<ul><li>TODO: SpringBootだと必要？</li></ul></li></ul><h4 id="9-2-3-サーブレットフィルタの設定"><a href="#9-2-3-サーブレットフィルタの設定" class="headerlink" title="9.2.3 サーブレットフィルタの設定"></a>9.2.3 サーブレットフィルタの設定</h4><ul><li><p>最後に、SpringSecurityが提供しているサーブレットフィルタクラス（FilterChainProxy）をサーブレットコンテナに登録する</p></li><li><p>TODO: SpringBootだとConfigでフィルター追加する</p><ul><li><a href="https://qiita.com/R-STYLE/items/61a3b6a678cb0ff00edf">https://qiita.com/R-STYLE/items/61a3b6a678cb0ff00edf</a></li><li><a href="https://qiita.com/opengl-8080/items/c105152c9ca48509bd0c">https://qiita.com/opengl-8080/items/c105152c9ca48509bd0c</a></li></ul></li><li><p>メモ</p><ul><li>Sevlet3.0以降のサーブレットコンテナでは、サーブレットコンテナの初期化処理をJavaのコードで行うことができる</li><li>SpringSecurityでは、サーブレットコンテナの初期化処理をJavaを使って行うためのサポートクラス説いて、</li><li><code>AbstractSecurityWebApplicationInitializer</code>という抽象クラスを提供しています</li><li>以下の初期化処理を自動で行ってくれる<ul><li>ContextLoaderListenerをサーブレットコンテナに登録する処理</li><li>SpringSecurityのサーブレットフィルタクラスをサーブレットコンテナに登録する処理</li><li>参考：<a href="https://qiita.com/opengl-8080/items/c105152c9ca48509bd0c">https://qiita.com/opengl-8080/items/c105152c9ca48509bd0c</a></li></ul></li></ul></li></ul><h3 id="9-3-Spring-Security-のアーキテクチャ"><a href="#9-3-Spring-Security-のアーキテクチャ" class="headerlink" title="9.3 Spring Security のアーキテクチャ"></a>9.3 Spring Security のアーキテクチャ</h3><ul><li><p>各機能の詳細な説明を行う前に、SpringSecurityのアーキテクチャ概要とSpringSecurityを構成する主要なコンポーネントの役割を見ていく</p></li><li><p>メモ</p><ul><li>ここで紹介する内容は、SpringSecurityが提供するデフォルトの動作をそのまま利用する場合や、</li><li>SpringSecurityのコンフィギュレーションをサポートする仕組みを利用する場合は、開発者が直接意識する必要ない</li><li>そのため、まず各機能の使い方を知りたい場合は、本説を読み飛ばしてOK</li><li>カスタマイズする際に必要になってくるので、アーキテクトを目指す方は一読しておくことをおすすめします。</li></ul></li></ul><h4 id="9-3-1-Spring-Securityのモジュール構成"><a href="#9-3-1-Spring-Securityのモジュール構成" class="headerlink" title="9.3.1 Spring Securityのモジュール構成"></a>9.3.1 Spring Securityのモジュール構成</h4><ul><li><p>提供しているモジュールを紹介</p></li><li><p>コンポーネントの役割などに応じてモジュール分割されており、標準的なWebアプリケーションに対してセキュリティ対策を講じる際に必要となるモジュールは以下の４つになる</p><ul><li><code>spring-security-core</code>: 認証と認可機能を実現するためのコアなコンポーネントが格納されている</li><li><code>spring-security-web</code>: Webアプリケーションのセキュリティ対策を実現するためのコンポーネントが格納されている</li><li><code>spring-security-config</code>: 各モジュールから提供されているコンポーネントのセットアップをサポートするためのコンポーネント（Java ConfigをサポートするクラスやXMLネームスペースを解析するクラスなど）が格納されている</li><li><code>spring-security-taglibs</code>: 認証情報や認可機能にアクセスするためのJSPタグライブラリが格納されている</li></ul></li><li><p>本書で使い方を紹介しないが、上記以外にも以下のようなモジュールがある</p><ul><li>一般的に利用される認証方法（LDAP、OpenID、CASなど）をサポートするためのモジュール</li><li>ACL（AccessControlList）を使用したドメインオブジェクトの認可制御を行うモジュール</li><li>SpringのWebSocket機能に対してセキュリティ対策を追加するためのモジュール</li><li>SpringSecurityの機能を用いる処理に対するテストを支援するためのモジュール</li></ul></li><li><p>メモ</p><ul><li>SpringSecurityのモジュールではないが、OAuth2.0の仕組みを使用してAPIの認可を実現するためのモジュール（spring-security-oauth2）などが姉妹ライブラリとして提供されている</li></ul></li></ul><h4 id="9-3-2-フレームワークのアーキテクチャ"><a href="#9-3-2-フレームワークのアーキテクチャ" class="headerlink" title="9.3.2 フレームワークのアーキテクチャ"></a>9.3.2 フレームワークのアーキテクチャ</h4><ul><li><p>処理の流れ</p><ol><li>クライアントはWebアプリケーションに対してリクエストを送る</li><li>SpringSecurityのFilterChainProxyクラスがリクエストを受け取り、HttpFirewallインターフェースのメソッドを呼び出して、HttpServletRequestとHttpServletResponseに対してファイアウォール機能を組み込む</li><li>FilterChainProxyクラスはSecurityFilterChainに設定されているセキュリティ対策用のSecurityFilterクラスに処理を移譲する</li><li>SecurityFilterChainには複数のSecurityFilterが設定されており、SecurityFilterの処理が正常に終了すると皇族のSecurityFilterが呼び出される</li><li>最後のSecurityFilterの処理が正常に終了した場合、後続処理を呼び出し、Webアプリケーション内のリソースへアクセスする</li><li>FilterChainProxyクラスは、Webアプリケーションから返却されたリソースをクライアントに返却する</li></ol></li><li><p>FilterChainProxy</p><ul><li>FilterChainProxyクラスは、フレームワーク処理のエントリーポイントとなるサーブレットフィルタクラス</li><li>このクラスはフレームワーク処理の全体の流れを制御し、具体的なセキュリティ対策処理はSecurityFilterに移譲するスタイルとなっている</li></ul></li><li><p>HttpFirewall</p><ul><li>HttpFirewallインターフェースは、HttpServletRequestとHttpServletResponseに対して、ファイアウォール機能を組み込むためのインターフェースです。デフォルトでは、DefaultHttpFirewallクラスが使用され、ディレクトリトラバーサル攻撃や、不正なリダイレクト先の指定によるHTTPレスポンス分割攻撃に対するチェックなどが実装されている</li></ul></li><li><p>SecurityFilterChain</p><ul><li>SecurityFilterChainインターフェースは、FilterChainProxyが受け取ったリクエストに対して適用する「SecurityFilterリスト」を管理するためのインターフェース</li><li>デフォルトではDefaultSecurityFilterChainクラスが使用され、以下のようなBean定義を行うと、指定したパスパターンごとに異なるセキュリティ対策が適用できます。</li></ul></li><li><p>Security Filter</p><ul><li>SecurityFilterクラスは、フレームワーク機能やセキュリティ対策機能を提供するサーブレットフィルタクラスです。</li><li>SpringSecurityは、複数のSecurityFilterを連鎖させることで、Webアプリケーションのセキュリティ対策を行う仕組みになっています。</li></ul></li><li><p>コアなSecurityFilter</p><ul><li>SecurityContextPersistenceFilter</li><li>UsernamePasswordAuthenticationFilter</li><li>LogoutFilter</li><li>FilterSecurityInterceptor</li><li>ExceptionTranslationFilter</li></ul></li></ul><h3 id="9-4-認証処理の適用"><a href="#9-4-認証処理の適用" class="headerlink" title="9.4 認証処理の適用"></a>9.4 認証処理の適用</h3><ul><li><p>認証処理は、アプリケーションを利用するユーザーの正当性を確認するための処理</p></li><li><p>最も標準的な方法はアプリケーションを使用できるユーザーをデータストアに登録しておいて、利用者が入力した認証情報と照合する方法</p></li><li><p>利用者に認証情報を入力してもらう方式もいくつかあり、</p><ul><li>HTMLの入力フォームを使う方式</li><li>RFCで定められているHTTP標準の認証方式（BASIC認証やDigest認証など）を利用するのが一般的</li><li>OpenID認証、シングルサインオン認証などの認証方式を利用するケースもある</li></ul></li><li><p>本節では、HTMLの入力フォームで入力した認証情報とリレーショナルデータベースに格納されているユーザー情報を照合して認証処理を行う実装例を紹介しながら、SpringSecurityの認証機能を解説</p></li></ul><h4 id="9-4-1-認証処理の仕組み"><a href="#9-4-1-認証処理の仕組み" class="headerlink" title="9.4.1 認証処理の仕組み"></a>9.4.1 認証処理の仕組み</h4><ul><li><p>認証処理の流れ</p><ol><li>クライントは認証処理を行うパスに対して資格情報（ユーザー名とパスワード）を指定してリクエストを送信する</li><li>Authentication Filterはリクエストから資格情報を取得し、AuthenticationManagerクラスの認証処理を呼び出す</li><li>ProviderManager（デフォルトで使用されるAuthenticationManagerの実装クラス）は、実際の認証処理をAuthenticationProviderインターフェースの実装クラスに移譲する</li></ol></li><li><p>メモ</p><ul><li>Authentication FilterとAuthenticationProviderの実装クラスは複数用意されており、要件に合わせて使用するクラスを選択する仕組みになっている</li><li>TODO: 選択できるクラスについて確認</li></ul></li><li><p>Authentication Filter</p><ul><li>認証方式に対する実装を提供するサーブレットフィルタ</li><li>本書では、フォーム認証用のサーブレットフィルタクラス（UsernamePasswordAuthenticationFilter）をシヨすうる前提で説明しますが、SpringSecurityはBasic認証、Digest認証、Remember Me 認証用のサーブレットフィルタクラスも提供しています</li></ul></li><li><p>AuthenticationManager</p><ul><li>認証処理を実行するためのインターフェース</li><li>SpringSecurityが提供するデフォルトの実装（ProviderManager）では、実際の認証処理はAuthenticationProviderに移譲し、AuthenticationProviderで行われた認証処理結果をハンドリングする仕組みになっています。</li></ul></li><li><p>AuthenticationProvider</p><ul><li>認証処理の実装をて依拠するためのインターフェース</li><li>本書では、データストアに登録しているユーザーの資格情報とユーザーの状態をチェックして認証処理を行う実装クラス（DaoAuthenticationProvider）を使用する前提で説明しますが、SpringSecurityは認証方法別の実装クラスも提供している。<ul><li>※DBだけでなく他の認証方式にも対応しているという意味だと理解</li></ul></li></ul></li></ul><h4 id="9-4-2-フォーム認証"><a href="#9-4-2-フォーム認証" class="headerlink" title="9.4.2 フォーム認証"></a>9.4.2 フォーム認証</h4><ul><li><p>SpringSecurityは以下のような流れでフォーム認証を行う</p><ol><li>クライアントは、フォーム認証を行うパスに対して資格情報（ユーザー名とパスワード）をリクエストパラメータとして送信する</li><li>UsernamePasswordAuthenticationFilterクラスは、リクエストパラメータから資格情報を取得して、AuthenticationManagerの認証処理を呼び出す</li><li>UsernamePasswordAuthenticationFilterクラスは、AuthenticationManagerから返却された認証結果をハンドリングする。認証処理が成功した場合は、AuthenticationSuccessHandlerのメソッドを、認証処理が失敗した場合は、AuthenticationFailureHandlerのメソッドを呼び出し、画面遷移を行う</li></ol></li><li><p>フォーム認証の適用</p><ul><li>Bean定義</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SpringSecurityが提供しているコンフィギュレーションクラスがインポートされ、SpringSecurityを利用するために必要となるコンポーネントのBean定義が自動で行われる仕組み</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123; <span class="comment">// 継承すると、デフォルトで適用されるBean定義を簡単にカスタマイズすることができる</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// セキュリティ対策が不要なリソースがある場合、SpringSecurityの処理を適用しないようにする</span></span><br><span class="line">    web.ignoring().antMatchers(<span class="string">"/resources/**"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ★追加！！</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.formLogin();</span><br><span class="line">    <span class="comment">// formLoginメソッドを呼び出すと、フォーム認証が有効になり、FormLoginConfigurerのインスタンスが返却される。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>デフォルトの動作</p><ul><li>SpringSecurityのデフォルトの動作では、<code>/login</code>に対して、GETメソッドでアクセスするとSpringSecurityが用意しているデフォルトのログインフォームが表示され、ログインボタンを謳歌すると<code>/login</code>に対してPOSTメソッドでアクセスして認証処理を行います。</li></ul></li><li><p>ログインフォームの作成</p><ul><li>SpringSecurityは、フォーム認証用のログインフォームをデフォルトで提供しているが、そのまま利用するケースは殆どないと思う</li><li>ここでは、自身で作成したログインフォームをSpringSecurityに適用する方法を紹介する</li><li>まず、ログインフォームを表示するためのJSPを作成</li><li>ここでは、SpringMVCのViewResolverに指定しているベースパス（src&#x2F;main&#x2F;webapp&#x2F;views&#x2F;）の直下にJSPを配置し、SpringMVC経由でログインフォームを表示する前提で説明</li></ul></li><li><p>ログインフォームをSpringSecurityに適用するために以下のようなBean定義を行う</p><ol><li>loginPageメソッドを呼び出し、ログインフォームを表示するためのパスを指定する<ul><li>匿名のユーザーが認証を必要するリソースにアクセスした場合、ここで指定したパスにリダイレクトしてログインフォームを表示する仕組みになっている。loginPageメソッドに与えられた引数によって、認証パス（loginProcessingUrl）も連動して変わる</li></ul></li><li>permitAll()メソッドを呼び出して、すべてのユーザーに対してログインフォームへのアクセス件を付与する</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="comment">//    http.addFilter(this.preAuthenticatedProcessingFilter());</span></span><br><span class="line">  <span class="comment">//    http.formLogin();</span></span><br><span class="line">  http.formLogin()</span><br><span class="line">      .loginPage(<span class="string">"/login"</span>) <span class="comment">// 認証を必要とするURLに遷移した場合、このURLにリダイレクトしてログインフォームを表示する仕組み</span></span><br><span class="line">      .permitAll(); <span class="comment">// すべてのユーザーに対してログインフォームへのアクセス件を付与する</span></span><br><span class="line">  http.authorizeRequests()</span><br><span class="line">      .anyRequest()</span><br><span class="line">      .authenticated();</span><br><span class="line">  <span class="comment">// formLoginメソッドを呼び出すと、フォーム認証が有効になり、FormLoginConfigurerのインスタンスが返却される。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>デフォルト動作のカスタマイズ<ul><li>フォーム認証処理のカスタマイズポイントとして<ul><li>認証パス</li><li>資格情報を送るリクエストパラメータ名の変更方法を紹介</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin()</span><br><span class="line">    <span class="comment">//.loginPage("/login")</span></span><br><span class="line">    .loginProcessingUrl(<span class="string">"authenticate"</span>)</span><br><span class="line">    .usernameParameter(<span class="string">"uid"</span>)</span><br><span class="line">    .passwordParameter(<span class="string">"pwd"</span>)</span><br><span class="line">    .permitAll();</span><br></pre></td></tr></table></figure><ul><li>loginPageもloginProcessingUrlもやっていることは同じらしい<ul><li><a href="http://www.ne.jp/asahi/hishidama/home/tech/java/spring/boot/web/form-auth.html">http://www.ne.jp/asahi/hishidama/home/tech/java/spring/boot/web/form-auth.html</a></li></ul></li></ul><h4 id="9-4-3-認証成功時のレスポンス"><a href="#9-4-3-認証成功時のレスポンス" class="headerlink" title="9.4.3 認証成功時のレスポンス"></a>9.4.3 認証成功時のレスポンス</h4><ul><li><p>SpringSecurityは、認証成功時のレスポンスを制御するためのコンポーネントとして、AuthenticationSuccessHandlerというインターフェースと実装クラスを提供している</p></li><li><p>AuthenticationSuccessHandlerの実装クラス</p><ul><li>SavedRequestAwareAuthenticationSuccessHanlder: 認証前にアクセスを試みたURLにリダイレクト（デフォルト）</li><li>SimpleUrlAuthenticastionSuccessHandler: コンストラクタに指定したURLにリダイレクトまたはフォワードする</li></ul></li><li><p>デフォルトの動作</p><ul><li>認証前にアクセスを拒否したリクエストをHTTPセッションに保存しておいて、認証が成功した際にアクセスを拒否したリクエストを復元してリダイレクトする仕組みになっている</li></ul></li><li><p>デフォルト動作のカスタマイズ</p><ul><li>認証成功時のレスポンスのカスタマイズポイントとして、認証成功時に遷移するデフォルトのパスの変更方法を紹介</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin()</span><br><span class="line">    .loginPage(<span class="string">"/login"</span>) <span class="comment">// 認証を必要とするURLに遷移した場合、このURLにリダイレクトしてログインフォームを表示する仕組み</span></span><br><span class="line">    .defaultSuccessUrl(<span class="string">"/menu"</span>) <span class="comment">// 認証成功時のデフォルトアクセスはルート。カスタマイズするために記載</span></span><br><span class="line">    .permitAll(); <span class="comment">// すべてのユーザーに対してログインフォームへのアクセス件を付与する</span></span><br></pre></td></tr></table></figure><h4 id="9-4-5-データベース認証"><a href="#9-4-5-データベース認証" class="headerlink" title="9.4.5 データベース認証"></a>9.4.5 データベース認証</h4><ul><li><p>データベース認証の仕組み</p><ul><li>SpringSecurityはクライアントからの認証依頼を受け、DaoAuthenticationProviderの認証処理を呼び出す</li><li>DaoAuthenticationProviderは、UserDetailsServiceのユーザー情報取得処理を呼び出す</li><li>UserDetailsServiceの実装クラスは、データストアからユーザー情報を取得する</li><li>UserDetailsServiceの実装クラスは、データストアから取得したユーザー情報からUserDetailsを生成する</li><li>DaoAuthenticationProviderは、UserDetailsServiceから返却されたUserDetailsとクライアントが指定した認証情報との照合を行い、クライアントが指定したユーザーの正当性をチェックする。クライアントが指定したユーザーが正当なユーザーでない場合は、認証例外をスローする</li></ul></li><li><p>メモ</p><ul><li>SpringSecurityはユーザー情報をリレーショナルデータベースからJDBC経由で取得するための実装クラスを提供しているが、最低限の認証処理しか行わないため、そのまま利用できるケースは少ないと思われる</li><li>そのため本書では、UserDetailsとUserDetailsServiceの実装クラスを作成する方法を紹介します。</li></ul></li><li><p>UserDetailsの作成</p><ul><li>MEMO:※細かいのでソースを確認 後で追記</li></ul></li><li><p>認証処理の適用</p></li></ul><h4 id="9-4-6-パスワードのハッシュ化"><a href="#9-4-6-パスワードのハッシュ化" class="headerlink" title="9.4.6 パスワードのハッシュ化"></a>9.4.6 パスワードのハッシュ化</h4><ul><li>いくつか、パスワードを扱う実装クラスが提供されている</li><li>MEMO:※細かいのでソースを確認 後で追記</li></ul><h4 id="9-4-7-認証イベントのハンドリング"><a href="#9-4-7-認証イベントのハンドリング" class="headerlink" title="9.4.7 認証イベントのハンドリング"></a>9.4.7 認証イベントのハンドリング</h4><ul><li><p>SpringSecurityは、SpringFrameworkが提供しているイベント通知の仕組みを利用して、</p></li><li><p>認証処理の結果を他のコンポーネントへ連携する仕組みを提供しています</p></li><li><p>この仕組を利用すると以下のようなセキュリティ要件をSpringSecurityの認証機能に組み込むことができます</p><ul><li>認証成功、失敗などの認証履歴をデータベースやログに保存したい</li><li>パスワードを連続して誤った場合にアカウントをロックしたい</li></ul></li><li><p>認証イベントの通知は以下のような仕組みで行われる</p></li><li><p>認証イベントの通知の流れ</p><ol><li>SpringSecurityの認証機能は、認証結果をAuthenticationEventPublisherに渡して認証イベントの通知依頼を行う</li><li>AuthenticationEventPublisherインターフェースのデフォルトの実装クラスは、認証結果に対応する認証イベントクラスのインスタンスを生成し、ApplicationEventPublisherに渡してイベントの通知依頼を行う</li><li>ApplicationEventPublisherインターフェースの実測クラスは、ApplicationListenerインターフェースの実装クラスにイベントを通知する</li><li>ApplicationListenerの実装クラスの１つであるApplicationListenerMethodAdaptorは、<code>@org.springframework.context.event.EventLintener</code>が付与されているメソッドを呼び出してイベントを通知する</li></ol></li><li><p>メモ</p><ul><li>Spring4.1まではApplicationListenerインターフェースの実装クラスを作成して、イベントを受け取る必要があった</li><li>Spring4.2からは、POJOに<code>@EventListener</code>を付与したメソッドを実装するだけでイベントを受け取ることができる</li><li>Spring4.2以降も、従来と同じ用にApplicationListenerインターフェースの実装クラスを作成してイベントを受け取ることができる</li></ul></li><li><p>認証成功イベント</p><ul><li>認証が成功したときにSpringSecurityが通知する主なイベントは以下の３つです。</li><li>この３つのイベントは途中でエラーが発生しなければ、以下の順番ですべて通知されます<ul><li>AuthenticationSuccessEvent<ul><li>AuthenticationProviderによる認証処理が成功したことを通知する。</li><li>このイベントをハンドリングすると、クライアントが正しい認証情報を指定したことを検知することができるが、後続の認証処理でエラーになる可能性がある</li></ul></li><li>SessionFixationProtectionEvent<ul><li>セッション固定攻撃対策の処理（セッションIDの変更処理）が成功したことを通知する。このイベントをハンドリングすると、変更後のセッションIDを検知することができる</li></ul></li><li>InteractiveAuthenticationSuccessEvent<ul><li>認証処理がすべて成功したことを通知する。このイベントをハンドリングすると、画面遷移を除くすべての認証処理が成功したことを検知することができる</li></ul></li></ul></li></ul></li><li><p>認証失敗イベント</p><ul><li>認証が失敗したときにSpringSecurityが通知する主なイベントは以下の通り</li><li>認証に失敗した場合は、以下のいずれか１つのイベントが通知される<ul><li>AuthenticationFailureBadCredentialsEvent</li><li>AuthenticationFailureDisabledEvent</li><li>AuthenticationFailureLockedEvent</li><li>AuthenticationFailureExpiredEvent</li><li>AuthenticationFailureCredentialsExpiredEvent</li><li>AuthenticationFailureServiceExceptionEvent</li></ul></li></ul></li><li><p>イベントリスナの作成</p><ul><li>認証イベントの通知を受け取って処理を行いたい場合、<code>@EventListener</code>を付与したメソッドを実装したクラスを作成し、DIコンテナに登録するだけ</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * - 認証イベントの通知の流れ</span></span><br><span class="line"><span class="comment"> *    1. SpringSecurityの認証機能は、認証結果をAuthenticationEventPublisherに渡して認証イベントの通知依頼を行う</span></span><br><span class="line"><span class="comment"> *    2. AuthenticationEventPublisherインターフェースのデフォルトの実装クラスは、認証結果に対応する認証イベントクラスのインスタンスを生成し、ApplicationEventPublisherに渡してイベントの通知依頼を行う</span></span><br><span class="line"><span class="comment"> *    3. ApplicationEventPublisherインターフェースの実測クラスは、ApplicationListenerインターフェースの実装クラスにイベントを通知する</span></span><br><span class="line"><span class="comment"> *    4. ApplicationListenerの実装クラスの１つであるApplicationListenerMethodAdaptorは、`<span class="doctag">@org</span>.springframework.context.event.EventLintener`が付与されているメソッドを呼び出してイベントを通知する</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - `<span class="doctag">@EventLitener</span>`を付与したメソッドを実装するだけで認証成功/失敗時の処理を実装できる仕組み</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tomo</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppSecurityEventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ==============================</span></span><br><span class="line">  <span class="comment">//  SUCCESS EVENT HANDLERS</span></span><br><span class="line">  <span class="comment">// ==============================</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * AuthenticationProviderによる認証処理が成功したことを通知する。</span></span><br><span class="line"><span class="comment">   * このイベントをハンドリングすると、クライアントが正しい認証情報を指定したことを検知することができるが、</span></span><br><span class="line"><span class="comment">   * 後続の認証処理でエラーになる可能性がある。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@EventListener</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleAuthenticationSuccess</span><span class="params">(AuthenticationSuccessEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * セッション固定攻撃対策の処理（セッションIDの変更処理）が成功したことを通知する。</span></span><br><span class="line"><span class="comment">   * このイベントをハンドリングすると、変更後のセッションIDを検知することができる。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@EventListener</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleSessionFixationProtection</span><span class="params">(SessionFixationProtectionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 認証処理がすべて成功したことを通知する。</span></span><br><span class="line"><span class="comment">   * このイベントをハンドリングすると、画面遷移を除くすべての認証処理が成功したことを検知することができる。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@EventListener</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleInteractiveAuthenticationSuccess</span><span class="params">(InteractiveAuthenticationSuccessEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ==============================</span></span><br><span class="line">  <span class="comment">//  FAILURE EVENT HANDLERS</span></span><br><span class="line">  <span class="comment">// ==============================</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@EventListener</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleBadCredentials</span><span class="params">(AuthenticationFailureBadCredentialsEvent event)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"BAD Credentials is detected. username : &#123;&#125;"</span>, event.getAuthentication().getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@EventListener</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDisabled</span><span class="params">(AuthenticationFailureDisabledEvent event)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"Disabled user is detected. username : &#123;&#125;"</span>, event.getAuthentication().getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@EventListener</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLocked</span><span class="params">(AuthenticationFailureLockedEvent event)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"Locked user is detected. username : &#123;&#125;"</span>, event.getAuthentication().getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@EventListener</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleExpired</span><span class="params">(AuthenticationFailureExpiredEvent event)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"Expired user is detected. username : &#123;&#125;"</span>, event.getAuthentication().getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@EventListener</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleCredentialsExpired</span><span class="params">(AuthenticationFailureCredentialsExpiredEvent event)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"CredentialsExpired is detected. username : &#123;&#125;"</span>, event.getAuthentication().getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@EventListener</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleServiceException</span><span class="params">(AuthenticationFailureServiceExceptionEvent event)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"ServiceException is detected. username : &#123;&#125;"</span>, event.getAuthentication().getName());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-4-8-ログアウト"><a href="#9-4-8-ログアウト" class="headerlink" title="9.4.8 ログアウト"></a>9.4.8 ログアウト</h4><ul><li><p>SpringSecurityは以下のような流れでログアウト処理を行う</p><ol><li>クライアントは、ログアウト処理を行うためのパスにリクエストを送信する</li><li>LogoutFilterは、LogoutHandlerのメソッドを呼び出してログアウト処理を行う</li><li>LogoutFilterは、LogoutSuccessHandlerのメソッドを呼び出して画面遷移を行う</li></ol></li><li><p>LogoutHandlerの実装クラス</p><ul><li>SecurityContextLogoutHandler: 認証情報のクリアとセッションの破棄を行う</li><li>CookieClearingLogoutHandler: 指定したクッキーの削除するためのレスポンスを行う</li><li>CsrfLogoutHandler: CSRF対策用のトークンの破棄を行う</li></ul></li><li><p>こららのLogoutHandlerは、SpringSecurityが提供しているBean定義をサポートするクラスが自動でLogoutFilterに設定する仕組みになっているので、基本的にはアプリケーションの開発者が直接意識する必要はない</p></li><li><p>ログアウト処理の適用</p><ul><li>ログアウト処理を適用するには、以下のようなBean定義を行う必要がある</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">    .antMatchers(<span class="string">"/"</span>, <span class="string">"/find"</span>, <span class="string">"/login"</span>, <span class="string">"/signup"</span>, <span class="string">"/error"</span>, <span class="string">"/login-error"</span>).permitAll()</span><br><span class="line">    .anyRequest().authenticated()</span><br><span class="line">    .and()</span><br><span class="line">    <span class="comment">// Login処理</span></span><br><span class="line">    .formLogin()</span><br><span class="line">    .loginPage(<span class="string">"/login"</span>) <span class="comment">// 認証を必要とするURLに遷移した場合、このURLにリダイレクトしてログインフォームを表示する仕組み</span></span><br><span class="line">    .defaultSuccessUrl(<span class="string">"/menu"</span>) <span class="comment">// 認証成功時のデフォルトアクセスはルート。カスタマイズするために記載</span></span><br><span class="line">    .failureUrl(<span class="string">"/login"</span>) <span class="comment">// 認証失敗時ログイン画面に戻す</span></span><br><span class="line">    .usernameParameter(<span class="string">"id"</span>)</span><br><span class="line">    .passwordParameter(<span class="string">"password"</span>)</span><br><span class="line">    .and()</span><br><span class="line">    <span class="comment">// Logout処理</span></span><br><span class="line">    .logout()</span><br><span class="line">    .logoutRequestMatcher(<span class="keyword">new</span> AntPathRequestMatcher(<span class="string">"logout**"</span>))</span><br><span class="line">    .logoutSuccessUrl(<span class="string">"/login"</span>)</span><br><span class="line">    .permitAll(); <span class="comment">// すべてのユーザーに対してログインフォームへのアクセス件を付与する</span></span><br></pre></td></tr></table></figure><ul><li>デフォルトの動作のカスタマイズ<ul><li>遷移先を変える <code>logoutSuccessUrl</code>の引数を変えてあげる</li></ul></li></ul><h4 id="9-4-10-認証情報へのアクセス"><a href="#9-4-10-認証情報へのアクセス" class="headerlink" title="9.4.10 認証情報へのアクセス"></a>9.4.10 認証情報へのアクセス</h4><ul><li><p>認証済みのユーザーの認証情報は、SpringSecurityのデフォルト実装では、セッションに格納される</p></li><li><p>セッションに格納された認証情報は、リクエストごとにSecurityContextPersistenceFilterクラスによって</p></li><li><p>SecurityContextHolderというクラスに格納され、同一スレッド内であればどこからでもアクセスすることができる用になる</p></li><li><p>Javaからのアクセス</p><ul><li>一般的な業務アプリケーションでは、「いつ」「誰が」「どのデータに」「どのようなアクセスをしたか」を</li><li>記録する監査ログを取得することがある。この要件を実現する際の、「誰が」は、認証情報から取得できる</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 認証情報（Authenticationオブジェクト）を取得する</span></span><br><span class="line">Authentication authentication =</span><br><span class="line">    SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line"></span><br><span class="line">String userUuid = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// Authentication#getPrincipal()メソッドを呼び出して、UserDetailsオブジェクトを取得する</span></span><br><span class="line"><span class="comment">// 認証済みでない場合は、匿名ユーザーを表す文字列が返却されるので注意</span></span><br><span class="line"><span class="keyword">if</span> (authentication.getPrincipal() <span class="keyword">instanceof</span> AccountUserDetails) &#123;</span><br><span class="line">    AccountUserDetails userDetails = AccountUserDetails.class.cast(authentication.getPrincipal());</span><br><span class="line">    <span class="comment">// UserDetailsから処理に必要な情報を取得する</span></span><br><span class="line">    userUuid = userDetails.getAccount().getUserUuid();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>アノテーションでアクセスした方が良さそう</p><ul><li><a href="https://qiita.com/Hyuga-Tsukui/items/81990938e43c7dff35cf">https://qiita.com/Hyuga-Tsukui/items/81990938e43c7dff35cf</a></li></ul></li><li><p>JSPからのアクセス</p><ul><li>一般的なWebアプリケーションでは、ログインユーザーのユーザー情報などを画面に表示することがある。</li></ul></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% taglib prefix=<span class="string">"sec"</span> uri=<span class="string">"http://www.springframework.org/security/tags"</span> %&gt;</span><br><span class="line">&lt;%-- ... --%&gt;</span><br><span class="line">ようこそ</span><br><span class="line">&lt;sec:authentication property=<span class="string">"principal.account.lastName"</span> /&gt;</span><br><span class="line">さん。</span><br></pre></td></tr></table></figure><ul><li>追記：thymeleafからのアクセス</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4"</span>&gt;</span> <span class="comment">&lt;!-- これを追加してThymeleafからSpringSecurityを利用 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 省略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>こんにちは、<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"principal.userId"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>さん<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="comment">&lt;!-- principal.メンバ変数名　で参照できる　--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-4-11-認証処理とSpringMVCの連携"><a href="#9-4-11-認証処理とSpringMVCの連携" class="headerlink" title="9.4.11 認証処理とSpringMVCの連携"></a>9.4.11 認証処理とSpringMVCの連携</h4><ul><li>SpringSecurityは、SpringMVCと連携するためのコンポーネントをいくつか提供している</li><li>ここでは、認証処理と連携するためのコンポーネントの使い方を紹介</li><li>SpringSecurityは認証情報（UserDetails）をSpringMVCのコントローラーのメソッドに引き渡すためのコンポーネントとして、AuthenticationPrincipalArgumentResolverというクラスを提供している</li><li>これを使用すると、コントローラーのメソッド引数として、UserDetailsインターフェースまたはその実装クラスのインスタンスを受け取ることができる</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">index</span><span class="params">(@AuthenticationPrincipal UserDetailsImpl userDetails)</span> </span>&#123;</span><br><span class="line">        System.out.println(userDetails.getUserId) <span class="comment">// userId</span></span><br><span class="line">        System.out.println(userDetails.getPassword) <span class="comment">//password</span></span><br><span class="line">        System.out.println(userDetails.getHoge) <span class="comment">//hoge</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="9-4-12-エラーメッセージ"><a href="#9-4-12-エラーメッセージ" class="headerlink" title="9.4.12 エラーメッセージ"></a>9.4.12 エラーメッセージ</h4><ul><li><p>認証に失敗した場合、SpringSecurityが用意しているエラーメッセージが表示されます</p></li><li><p>このエラーメッセージは内容を変更したり、表示しないようにすることができます。</p></li><li><p>エラーメッセージの変更</p><ul><li>認証失敗時に表示されるエラーメッセージを変更したい場合は、MessageSourceで読み込んでいるプロパティファイルに</li><li>SpringSecurityが用意しているメッセージの定義を追加してください</li></ul></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">AbstractUserDetailsAuthenticationProvider.badCredentials</span> = <span class="string">入力した認証情報に誤りがあります。</span></span><br><span class="line"><span class="meta">AbstractUserDetailsAuthenticationProvider.credentialsExpired</span> = <span class="string">認証情報の利用期限が切れています。</span></span><br><span class="line"><span class="meta">AbstractUserDetailsAuthenticationProvider.disabled</span> = <span class="string">無効なアカウントです。</span></span><br><span class="line"><span class="meta">AbstractUserDetailsAuthenticationProvider.expired</span> = <span class="string">アカウントの期限が切れています。</span></span><br><span class="line"><span class="meta">AbstractUserDetailsAuthenticationProvider.locked</span> = <span class="string">アカウントがロックされています。</span></span><br></pre></td></tr></table></figure><ul><li><p>この他にも多数のメッセージが用意されている</p></li><li><p>種類を確認するには、<code>spring-security-core</code>モジュールのjarファイルの中の<code>org/springframework/security/message.properties</code>ファイルを確認してください</p></li><li><p>メッセージ定義定数クラスは自動生成するべきな件</p><ul><li><a href="https://terasolunaorg.github.io/guideline/1.0.x/ja/ArchitectureInDetail/MessageManagement.html">https://terasolunaorg.github.io/guideline/1.0.x/ja/ArchitectureInDetail/MessageManagement.html</a></li></ul></li><li><p>メモ</p><ul><li>MessageSourceの中でプロパティファイルをISO 8859-1(デフォルト)で読み込んでいる場合は、マルチバイト文字は</li><li>Unicodeコード（\udddd表記）形式に変換する必要がある。</li><li>なお、プロパティファイルを任意の文字コードで読み込む場合は、MessageSourceのdefaultEncodingプロパティに文字コードを指定してください。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">  messageSource.setBasenames(<span class="string">"i18n/messages"</span>); <span class="comment">// クラスパス上に格納されているプロパティファイル（拡張子は除く）を指定する</span></span><br><span class="line">  messageSource.setDefaultEncoding(<span class="string">"UTF-8"</span>); <span class="comment">// ★ここのこと！</span></span><br><span class="line">  <span class="keyword">return</span> messageSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>システムエラー時のメッセージ</p><ul><li>認証処理の中で予期しないエラー（システムエラーなど）が発生した場合、InternalAuthenticationServiceExceptionという例外が発生する。InteractiveAuthenticationServiceExceptionが保持するメッセージには、</li><li>原因例外のメッセージが設定されるため画面にそのまま表示するのは好ましくない</li><li>システムエラーの例外メッセージを画面に表示しない用にするには、ExceptionMappingAuthenticationFailureHandlerやDelegatingAuthenticationFailureHandlerを使用して、InternalAuthenticationServiceExceptionが発生したときの遷移先をシステムエラー画面にするのが良いでしょう。</li></ul></li><li><p>TODO: この辺見て実装する</p><ul><li><a href="https://qiita.com/rubytomato@github/items/6c6318c948398fa62275">https://qiita.com/rubytomato@github/items/6c6318c948398fa62275</a></li></ul></li></ul><h3 id="9-5-認可処理"><a href="#9-5-認可処理" class="headerlink" title="9.5 認可処理"></a>9.5 認可処理</h3><ul><li>認可処理は、アプリケーションの利用者がアクセスできるリソースを制御するための処理</li><li>最も標準的な方法は、リソース毎にアクセスポリシーを定義しておいて、利用者がリソースにアクセスしようとしたときにアクセスポリシーを調べて制御する方法</li><li>アクセスポリシーには、どのリソースにどのユーザーからのアクセスを許可するかを定義します</li><li>SpringSecurityでは、Webリソース、Javaメソッド、ドメインオブジェクトに対してアクセスポリシーを定義できる</li></ul><p>※ドメインオブジェクトに関する認可処理は本書では扱わない<br>興味がある場合は、下記参照<br><a href="http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#domain-acls">http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#domain-acls</a></p><h4 id="9-5-1-認可処理の仕組み"><a href="#9-5-1-認可処理の仕組み" class="headerlink" title="9.5.1 認可処理の仕組み"></a>9.5.1 認可処理の仕組み</h4><ul><li><p>SpringSecrityが提供する認証処理の仕組みを理解しましょう</p></li><li><p>以下のような流れで認可処理を行います</p><ol><li>クライアントが任意のリソースにアクセスする</li><li>FilterSecurityInterceptorクラスは、AccessDecisionManagerインターフェースのメソッドを呼び出し、リソースへのアクセス権の有無をチェックする</li><li>AffirmativeBasedクラス（デフォルトで使用されるAccessDecisionManagerの実装クラス）は、AccessDecisionVoterインターフェースのメソッドを呼び出し、アクセス件の有無を投票してもらう</li><li>FilterSecurityInterceptorは、AccessDecisionManagerによってアクセス権が付与された場合に限り、リソースへアクセスする</li></ol></li><li><p>ExceptionTranslationFilter</p><ul><li>認可処理（AccessDecisionManager）で発生した例外をハンドリングし、</li><li>クライアントに適切なレスポンスを行うためのサーブレットフィルタ</li><li>デフォルトの実装では、未認証ユーザーからのアクセスの場合は、認証を促すレスポンス、認証済みユーザーからのアクセスの場合は、認可エラーを通知するレスポンスを返却する</li></ul></li><li><p>FilterSecurityInterceptor</p><ul><li>HTTPリクエストに対して認可処理を適用するためのサーブレットフィルタで、実際の認可処理はAccessDecisionManagerに移譲しています。</li><li>AccessDecisionManagerインターフェースのメソッドを呼び出す際には、クライアントがアクセスしようとしたWebリソースに指定されているアクセスポリシーを連携します。</li></ul></li><li><p>AccessDecisionManager</p><ul><li>アクセスしようとしたリソースに対してアクセス権があるかチェックを行うためのインターフェース</li><li>SpringSecurityが提供する実装クラスでは、このあと紹介するAccessDecisionVoterというインターフェースのメソッドを呼び出してアクセス権を付与するか否かを投票するしくみになっており、デフォルトで適用されるクラスはAffirmativeBasedクラスです。AffirmativeBasedクラスは、いずれかのAccessDecisionVoterが付与を投票した場合にアクセス権を与える実装クラス</li></ul></li><li><p>AccessDecisionVoter</p><ul><li>アクセスしようとしたリソースに指定されているアクセスポリシーを参照し、アクセス権を付与するか否かを投票する（付与、拒否、棄権）するためのインターフェース</li><li>SpringSecurityではいくつかの実装クラスを提供しているが、4.0からデフォルトで適用されるクラスは、<code>WebExpressionVoter</code>に統一されている</li><li>WebExpressionVoterはSpring Expression Languageを使用して、利用者が持つ、権限情報とリクエスト情報を参照して投票を行う実装クラス</li></ul></li></ul><h4 id="9-5-2-アクセスポリシーの記述方法"><a href="#9-5-2-アクセスポリシーの記述方法" class="headerlink" title="9.5.2 アクセスポリシーの記述方法"></a>9.5.2 アクセスポリシーの記述方法</h4><ul><li><p>SpringSecurityは、アクセスポリシーを指定する記述方法として、SpringExpressionLanguage（SpEL）をサポート</p></li><li><p>SpELを使わない方法もあるが、本書では、Expressionを使ってアクセスポリシーを指定する方法で解説する</p></li><li><p>CommonExpressions</p><ul><li>※割愛</li></ul></li></ul><h4 id="9-5-3-Webリソースへの認可（JavaConfig編）"><a href="#9-5-3-Webリソースへの認可（JavaConfig編）" class="headerlink" title="9.5.3 Webリソースへの認可（JavaConfig編）"></a>9.5.3 Webリソースへの認可（JavaConfig編）</h4><ul><li><p>JavaConfigを使用して、Webリソースに対してアクセスポリシーを定義する方法について説明</p></li><li><p>アクセスポリシーを適用するWebリソースの指定</p><ul><li>まずは、アクセスポリシーを適用するリソースを指定</li><li>アクセスポリシーを適用するリソースの指定は、ExpressionInterceptUrlRegistryクラスの以下のメソッドを呼び出して行います。<ul><li>antMatchers</li><li>regexMatchers</li><li>requestMatchers</li><li>anyRequests</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="comment">//    http.addFilter(this.preAuthenticatedProcessingFilter());</span></span><br><span class="line">  <span class="comment">//    http.formLogin();</span></span><br><span class="line">  http.authorizeRequests()</span><br><span class="line">      .antMatchers(<span class="string">"/"</span>, <span class="string">"/find"</span>, <span class="string">"/login"</span>, <span class="string">"/signup"</span>, <span class="string">"/error"</span>, <span class="string">"/login-error"</span>).permitAll()</span><br><span class="line">      <span class="comment">// ★記載順には気をつける必要がある</span></span><br><span class="line">      .antMatchers(<span class="string">"/admin/accounts/***"</span>).hasRole(<span class="string">"ACCOUNT_MANAGER"</span>)</span><br><span class="line">      .antMatchers(<span class="string">"/admin/***"</span>).hasRole(<span class="string">"ADMIN"</span>)</span><br><span class="line">      .anyRequest().authenticated()</span><br></pre></td></tr></table></figure><ul><li>アクセスポリシーの指定<ul><li>次に、アクセスポリシーを指定します。</li><li>アクセスポリシーの指定は、AuthorizedUrlクラスのメソッドを使用して行います。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">    .antMatchers(<span class="string">"/"</span>, <span class="string">"/find"</span>, <span class="string">"/login"</span>, <span class="string">"/signup"</span>, <span class="string">"/error"</span>, <span class="string">"/login-error"</span>).permitAll()</span><br><span class="line">    <span class="comment">//        .antMatchers("/admin/accounts/***").hasRole("ACCOUNT_MANAGER")</span></span><br><span class="line">    <span class="comment">//        .antMatchers("/admin/***").hasRole("ADMIN")</span></span><br><span class="line">    .antMatchers(<span class="string">"/admin/***"</span>).access(<span class="string">"hasIpAddress('127.0.0.1') and hasRole('CONFIGURATION_MANAGER')"</span>)</span><br><span class="line">    .antMatchers(<span class="string">"/admin/***"</span>).hasRole(<span class="string">"ADMIN"</span>)</span><br><span class="line">    .anyRequest().authenticated()</span><br></pre></td></tr></table></figure><h4 id="9-5-4-Webリソースへの認可（XMLファイル編）"><a href="#9-5-4-Webリソースへの認可（XMLファイル編）" class="headerlink" title="9.5.4 Webリソースへの認可（XMLファイル編）"></a>9.5.4 Webリソースへの認可（XMLファイル編）</h4><ul><li>割愛</li></ul><h4 id="9-5-5-メソッドへの認可"><a href="#9-5-5-メソッドへの認可" class="headerlink" title="9.5.5 メソッドへの認可"></a>9.5.5 メソッドへの認可</h4><ul><li><p>SpringSecurityは、SpringAOPの仕組みを利用して、アプリケーションコンテキスト内で管理しているBeanのメソッド呼び出しに対して認可処理を行う仕組みを提供しています。</p><ul><li>メソッドに対応する認可処理を使用すると、メソッドの引数や戻り値のオブジェクトの状態を参照できるため、よりきめ細かいアクセスポリシーの定義が行える</li><li>メソッドへの認可を使用する場合は、メソッド呼び出しに対して認可処理を行うためのコンポーネント（AOP）を有効にしてから、アクセスポリシーをクラスやメソッドのアノテーションに定義します。<ul><li>つまり<ul><li>AOP有効化</li><li>メソッドにアノテーション定義</li></ul></li></ul></li></ul></li><li><p>SpringSecurityがサポートしているアノテーションは以下</p><ul><li>@PreAuthorize,@PostAuthorize,@PreFilter,@PostFilter: SpringSecurityのアノテーション</li><li>@Secured: SpringSecurityのアノテーション</li><li>JSR250(javax.annotation.securityパッケージ)のアノテーション（@RolesAllowedなど）</li></ul></li><li><p>本書では、アクセスポリシーの指定にExpressionを使用することができる <code>@PreAuthorize</code>と<code>@PostAuthorize</code>を紹介する</p></li><li><p>メソッド認可の有効化</p><ul><li>まず、メソッドに対して認可処理を行うAOPを有効化します</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>) <span class="comment">// メソッドに対して認可処理を行うAOPを有効化 prePostEnabled属性にtrueを指定すると、Expressionを使用してアクセスポリシーを定義することができるアノテーションが有効になる</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>メソッド実行前に適用するアクセスポリシーの指定<ul><li>メソッドの実行前に適用するアクセスポリシーを指定する場合は<code>@PreAuthorize</code>を使用する</li><li><code>@PreAuthorize</code>のvalue属性に指定したExpressionの結果がtrueになるとメソッドの実行が許可される</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 管理者以外の人間が他人のアカウント情報にアクセスできないように定義している</span></span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('ADMIN') or (#username == principal.username)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">findOne</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> accountRepository.findOne(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>ここでポイントになるのが、Expressionの中からメソッドの引数にアクセスしている部分</p></li><li><p>具体的には、#usernameの部分が引数にアクセスしている部分になる</p></li><li><p>Expression内で「# + 引数名」形式のExpressionを指定するとメソッドの引数にアクセスすることができる</p></li><li><p>メモ</p><ul><li>SpringSecurityは、クラスに出力されているデバッグ情報から引数名を解決する仕組みになっているが、</li><li>アノテーション（<code>@P</code>）を使用して明示的に引数名を指定することもできる</li><li>以下の場合は、明示的に引数名を指定してあげる必要がある<ul><li>引数のデバッグ情報を出力しない</li><li>Expressionの中から実際の引数名とは別の名前を使ってアクセスする（例：短縮した名前）</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('ADMIN') or (#username == principal.username)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">findOne</span><span class="params">(@P(<span class="string">"username"</span>)</span> String username) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> accountRepository.findOne(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>JavaSE8から追加されたコンパイルオプション（-parameters）を使用すると、メソッドパラメータにリフレクション用のメタデータが生成されるため、アノテーションを指定しなくても引数名を解決してくれる</p></li><li><p>メソッド実行後に適用するアクセスポリシーの指定</p><ul><li><code>@PostAuthorize</code>を使用する</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('DEPARTMENT_MANAGER')"</span>)</span><br><span class="line"><span class="meta">@PostAuthorize</span>(<span class="string">"(returnObject == null) or (returnObject.departmentCode == principal.account.departmentCode)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">findOne</span><span class="params">(@P(<span class="string">"username"</span>)</span> String username) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> accountRepository.findOne(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-5-6-JSPの画面項目への認可"><a href="#9-5-6-JSPの画面項目への認可" class="headerlink" title="9.5.6 JSPの画面項目への認可"></a>9.5.6 JSPの画面項目への認可</h4><p>SpringSecurityはJSPタグライブラリを使用してJSPの画面項目に対して認可処理を適用することができる</p><ul><li>※管理者の場合、この項目を表示するなどの制御<ul><li>このURLへ遷移させるなどの制御</li></ul></li></ul><h4 id="9-5-7-認可エラー時のレスポンス"><a href="#9-5-7-認可エラー時のレスポンス" class="headerlink" title="9.5.7 認可エラー時のレスポンス"></a>9.5.7 認可エラー時のレスポンス</h4><ul><li><p>SpringSecurityはリソースへのアクセスを拒否した場合、以下のような流れでエラーハンドリング、レスポンスを行う</p><ol><li>SpringSecurityは、リソースやメソッドへのアクセスを拒否するために、AccessDeniedExceptionをスローする</li><li>ExceptionTranslationFilterクラスは、AccessDeniedExceptionを捕捉し、AccessDeniedHandlerまたは、AuthenticationEntryPointインターフェースのメソッドを呼び出してエラー応答を行う</li><li>認証済みのユーザーからのアクセスの場合は、AccessDeniedHandlerインターフェースのメソッドを呼び出してエラー応答を行う</li><li>未認証ユーザーからのアクセスの場合は、AuthenticationEntryPointインターフェースのメソッドを呼び出してエラー応答を行う</li></ol></li><li><p>AccessDeniedHandler</p></li><li><p>AuthenticationEntryPoint</p></li><li><p>認可エラー時の遷移先</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.exceptionHandling().accessDeniedPage(<span class="string">"/accessDeniedError"</span>);</span><br></pre></td></tr></table></figure><ul><li>デフォルト動作のカスタマイズ<ul><li>TODO: 認証エラー時にメッセージを出す処理を作るときに記述しないと行けない気がする</li></ul></li></ul><h3 id="9-6-CSRF対策"><a href="#9-6-CSRF対策" class="headerlink" title="9.6 CSRF対策"></a>9.6 CSRF対策</h3><h4 id="9-6-1-Spring-SecurityのCSRF対策"><a href="#9-6-1-Spring-SecurityのCSRF対策" class="headerlink" title="9.6.1 Spring SecurityのCSRF対策"></a>9.6.1 Spring SecurityのCSRF対策</h4><ul><li>Spring Securityはセッション単位にランダムなトークン値(CSRFトークン)を払い出し、払い出されたCSRFトークンをリクエストパラメータ（HTMLフォームのhidden項目）として送信することで、そのリクエストが正規のWebページからなのか、それとも攻撃者が用意したWebページからなのかを判断する機能がある</li><li>SpringSecurityのデフォルト実装では、POST,PUT,DELETE,PATCHのHTTPメソッドを使用したリクエストに対して、CSRFトークンチェックを行います</li></ul><h4 id="9-6-2-CSRF対策機能の適用"><a href="#9-6-2-CSRF対策機能の適用" class="headerlink" title="9.6.2 CSRF対策機能の適用"></a>9.6.2 CSRF対策機能の適用</h4><ul><li>CSRF対策機能はSpring3.2から追加された機能で、SpringSecurity4.0からデフォルトで適用されるようになりました。</li><li>そのため、CSRF対策機能を有効にするための特別な定義はありません。</li><li>なおCSRF機能を適用したくない場合は、明示的に無効にする必要がある</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  http.csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>HTMLフォーム使用時のトークン値の連携</p><ul><li>JSPでの設定を紹介しているため割愛</li><li>Thymeleafだとこんな感じ<a href="https://qiita.com/nenokido2000/items/22a97a26a5858ddb164f">https://qiita.com/nenokido2000/items/22a97a26a5858ddb164f</a></li></ul></li><li><p>Ajax使用時の連携</p><ul><li>Ajaxを使ってリクエストを送信する場合は、SpringSecurityから提供されている<code>&lt;sec:csrfMetaTag&gt;</code>要素を使用して、HTMLの<code>&lt;meta&gt;</code>要素としてCSRFトークンの情報を出力し<code>&lt;meta&gt;</code>要素から取得したトークン値をAjax通信時のリクエストヘッダーに設定して連携します。</li><li>Thymeleafの場合、以下を参考に、Cookieからcsrfトークンを取り出して、詰めて送る<ul><li><a href="https://qiita.com/nenokido2000/items/22a97a26a5858ddb164f">https://qiita.com/nenokido2000/items/22a97a26a5858ddb164f</a></li><li>CookieにCSRFトークンを詰める処理は以下で行えるようになっている</li><li><code>http.csrf().csrfTokenRepository(new CookieCsrfTokenRepository());</code></li></ul></li></ul></li></ul><h4 id="9-6-3-トークンチェックエラー時のレスポンス"><a href="#9-6-3-トークンチェックエラー時のレスポンス" class="headerlink" title="9.6.3 トークンチェックエラー時のレスポンス"></a>9.6.3 トークンチェックエラー時のレスポンス</h4><ul><li><p>CSRFトークンチェックでエラーが発生した場合、SpringSecurityはAccessDeniedHandlerインターフェースを使用してエラーのレスポンスを行う</p></li><li><p>CSRFトークンチェックでエラーが発生したときに専用のエラーページに遷移させる場合は、SpringSecurityから提供されているDelegatingAuthenticationFailureHandlerクラスを利用して、それぞれの例外にAccessDeniedHandlerインターフェースの実装クラスを指定してください</p></li><li><p>CSRFトークンチェックで使用される例外クラス</p><ul><li>InvalidCsrfTokenException</li><li>MissingCsrfTokenException<ul><li>TODO: この例外処理を実装する必要がある XMLで記載している例はあるけど、Javaで書いている例がない..</li></ul></li></ul></li></ul><h4 id="9-6-4-CSRF対策機能とSpringMVCとの連携"><a href="#9-6-4-CSRF対策機能とSpringMVCとの連携" class="headerlink" title="9.6.4 CSRF対策機能とSpringMVCとの連携"></a>9.6.4 CSRF対策機能とSpringMVCとの連携</h4><ul><li>自動でFormにcsrfトークンが入りますよという説明</li></ul><h3 id="9-7-セッション管理"><a href="#9-7-セッション管理" class="headerlink" title="9.7 セッション管理"></a>9.7 セッション管理</h3><h4 id="9-7-1-セッション管理機能の適用"><a href="#9-7-1-セッション管理機能の適用" class="headerlink" title="9.7.1 セッション管理機能の適用"></a>9.7.1 セッション管理機能の適用</h4><ul><li>セッション管理機能を使用するには、以下のようなBean定義を行う</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  http.sessionManagement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>sessionManagementメソッドを呼び出し、SessionManagementConfigurerのインスタンスを取得する</p></li><li><p>SessionManagementConfigurerには、セッション管理機能のコンポーネントの動作をカスタマイズするためのメソッドが定義されている。なお、WebSecurityConfigurerAdapterを継承して、コンフィギュレーションクラスを作成している場合は、sessionManagementメソッドは親クラスの処理で呼び出されるため、デフォルトでセッション管理機能が適用されている</p></li><li><p>RESTAPIなどセッションを使用しない場合は、セッションの作成方式を stateless に変更する必要がある</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br></pre></td></tr></table></figure><ul><li>セッションの作成方式は以下のオプションから選択することができる<ul><li>always</li><li>ifRequired (デフォルト)</li><li>never</li><li>stateless</li></ul></li></ul><h4 id="9-7-2-URL-Rewriting抑止機能"><a href="#9-7-2-URL-Rewriting抑止機能" class="headerlink" title="9.7.2 URL Rewriting抑止機能"></a>9.7.2 URL Rewriting抑止機能</h4><p>URL Rewritingが行われると、URL内にセッションIDが露出してしまうため、セッションIDを盗まれるリスクが高くなります。</p><p>SpringSecurityでは、URL Rewritingを抑止するための仕組みも提供しており、この機能はSpringSecurity4.0以上ではデフォルトで適用されます。</p><ul><li>TODO: Cookieを許可しない設定になっているとどのような挙動になる？クエリに埋め込まれない？</li></ul><h4 id="9-7-3-セッション固定攻撃対策機能"><a href="#9-7-3-セッション固定攻撃対策機能" class="headerlink" title="9.7.3 セッション固定攻撃対策機能"></a>9.7.3 セッション固定攻撃対策機能</h4><ul><li><p>セッション管理機能を適用すると、デフォルトでセッション固定攻撃機能が有効になる</p></li><li><p>セッション固定攻撃対策機能を使用すると、ログイン成功時に新たセッションIDを払い直すため、攻撃者が事前に払い出したセッションIDが使われることはありません。</p></li><li><p>セッション固定攻撃への対策オプション</p><ul><li>changeSessionId: Servlet3.1で追加されたHttpServletRequest#changeSessionIdメソッドを使用してセッションIDを変更する（Servlet3.1以上のコンテナでのデフォルト動作）</li><li>migrateSession: ログイン前に使用していたセッションを破棄し、新たにセッションを作成する。ログイン前にセッションに格納されていたオブジェクトは新しいセッションに引き継がれる</li><li>newSession: migrateSessionと同じ方法でセッションIDを変更するが、ログイン前に格納されていたオブジェクトは新しいセッションには引き継がれない</li><li>none: SpringSecurityはセッションIDを変更しない</li></ul></li><li><p>指定方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http.sessionManagement().sessionFixation().newSession();</span><br></pre></td></tr></table></figure><h4 id="9-7-4-多重ログインの制御"><a href="#9-7-4-多重ログインの制御" class="headerlink" title="9.7.4 多重ログインの制御"></a>9.7.4 多重ログインの制御</h4><ul><li><p>SpringSecurityは同じユーザー名（ログインID）を使った多重ログインを制御する機能を提供しているが、</p></li><li><p>SpringSecurityが提供しているデフォルト実装にはいくつかの制約や注意事項がある</p></li><li><p>本書では、これらの制約と注意事項について紹介するが、具体的な使い方は扱わない、リファレンス参照</p></li><li><p>SpringSecurityが提供しているデフォルト実装では、ユーザー毎にセッション情報をアプリケーションサーバーのメモリ内で管理します。</p></li><li><p>そのため、複数のアプリケーションサーバーを同時に実行するシステムでは利用することができません。</p></li><li><p>また、アプリケーションサーバーを停止または再起動するとメモリ内で管理していたセッション情報はクリアされます。</p></li><li><p>使用するアプリケーションサーバーによっては、停止または再起動時のセッション状態を復元する機能を持っているため、実際のセッション状態とSpringSecurityが管理しているセッション情報に不整合が生じる可能性がある</p></li><li><p>TODO: Redisで管理する方法探る</p></li></ul><h4 id="9-7-5-無効なセッションを使ったリクエストの検知"><a href="#9-7-5-無効なセッションを使ったリクエストの検知" class="headerlink" title="9.7.5 無効なセッションを使ったリクエストの検知"></a>9.7.5 無効なセッションを使ったリクエストの検知</h4><ul><li>SpringSecurityは無効なセッションを使ったリクエストを検知する機能を提供している</li><li>無効なセッションとして扱われるリクエストの大部分は、セッションタイムアウト後のリクエストです。</li><li>以下の例では、無効なセッションを検知した際の遷移先として <code>&quot;/error/invalidSession&quot;</code>を指定することで、この機能を有効化している</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http.sessionManagement().invalidSessionUrl(<span class="string">"/error/invalidSession"</span>);</span><br></pre></td></tr></table></figure><h3 id="9-8-ブラウザのセキュリティ対策機能との連携"><a href="#9-8-ブラウザのセキュリティ対策機能との連携" class="headerlink" title="9.8 ブラウザのセキュリティ対策機能との連携"></a>9.8 ブラウザのセキュリティ対策機能との連携</h3><ul><li>ブラウザが提供するセキュリティ対策機能の一部は、サーバー側で、HTTPのレスポンスヘッダーを出力することで動作を制御することができる</li></ul><h4 id="9-8-1-セキュリティヘッダー出力機能の適用"><a href="#9-8-1-セキュリティヘッダー出力機能の適用" class="headerlink" title="9.8.1 セキュリティヘッダー出力機能の適用"></a>9.8.1 セキュリティヘッダー出力機能の適用</h4><ul><li>Spring3.2から追加された機能で、Spring4.0からデフォルトで適用されるようになった</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 無効にする方法</span></span><br><span class="line">    http.headers().disable();</span><br></pre></td></tr></table></figure><h4 id="9-8-2-デフォルトでサポートしているセキュリティヘッダー"><a href="#9-8-2-デフォルトでサポートしているセキュリティヘッダー" class="headerlink" title="9.8.2 デフォルトでサポートしているセキュリティヘッダー"></a>9.8.2 デフォルトでサポートしているセキュリティヘッダー</h4><ul><li><p>SpringSecurityがデフォルトでサポートしているレスポンスヘッダーは以下の５つ</p><ul><li>Cache-Control（Pragma, Expires）<ul><li>コンテンツのキャッシュ方法を支持するヘッダー</li><li>保護されたコンテンツがブラウザにキャッシュされないようにすることで、権限のないユーザーが保護されたコンテンツを閲覧できてしまうリスクを減らすことができる</li></ul></li><li>X-Frame-Options<ul><li>フレーム（<code>&lt;frame&gt;</code>または<code>&lt;iframe&gt;</code>要素）内でコンテンツの表示を許可するか否かを支持するためのヘッダー</li><li>フレーム内でコンテンツが表示されないようにすることで、クリックジャッキングと呼ばれる攻撃手法を使って機密情報を盗み取られるリスクを無くすことができる</li></ul></li><li>X-Content-Type-Options<ul><li>コンテンツの種類の決定方法を指示するためのヘッダー</li><li>一部のブラウザでは、Content-Typeヘッダーの値を無視して、コンテンツの内容を見て決定します。</li><li>コンテンツの種類を決定する際にコンテンツの内容を見ないようにすることで、クロスサイトスクリプティングを使った攻撃を受ける可能性をへらすことができます。</li></ul></li><li>X-XSS-Protection<ul><li>ブラウザのXSSフィルタ機能を使って有害なスクリプトを検知する方法を支持するためのヘッダー</li><li>XSSフィルタ機能を有効にして有害なスクリプトを検知するようにすれば、クロスサイトスクリプティングを使った攻撃を受ける可能性をへらすことができる。</li></ul></li><li>Strict-Transport-Security<ul><li>HTTPSを使ったアクセスをしたあとに、HTTPを使ってアクセスしようとした際に、HTTPSに置き換えてからアクセスすることを支持するためのヘッダー</li><li>HTTPSでアクセスした後に、HTTPが使われないようにすることで、中間者攻撃と呼ばれる攻撃手法を使って悪意のあるサイトに誘導されるリスクをへらすことができる</li></ul></li></ul></li><li><p>TODO: 攻撃手法と対策について再度整理する必要あり</p></li></ul><h4 id="9-8-3-セキュリティヘッダーの選択"><a href="#9-8-3-セキュリティヘッダーの選択" class="headerlink" title="9.8.3 セキュリティヘッダーの選択"></a>9.8.3 セキュリティヘッダーの選択</h4><ul><li>出力するセキュリティヘッダーを選択したい場合は、以下のようなBean定義を行います。</li><li>ここではSpringSecurityが提供するすべてのセキュリティヘッダーを出力する例になっていますが、実際は必要なものだけ指定する</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http.headers()</span><br><span class="line">    .defaultsDisabled()</span><br><span class="line">    .cacheControl().and()</span><br><span class="line">    .frameOptions().and()</span><br><span class="line">    .contentTypeOptions().and()</span><br><span class="line">    .xssProtection().and()</span><br><span class="line">    .httpStrictTransportSecurity();</span><br></pre></td></tr></table></figure><ul><li>不要なものだけ無効化する方法もある</li></ul><h3 id="9-9-Spring-Securityのテスト"><a href="#9-9-Spring-Securityのテスト" class="headerlink" title="9.9 Spring Securityのテスト"></a>9.9 Spring Securityのテスト</h3><ul><li>MockMvcを使用して「認証処理」や「認可処理」などのテストを行うための機能</li><li>テスト時に適用する認証情報をアノテーションで指定できる機能</li></ul><h4 id="9-9-1-Spring-Security-Testのセットアップ"><a href="#9-9-1-Spring-Security-Testのセットアップ" class="headerlink" title="9.9.1 Spring Security Testのセットアップ"></a>9.9.1 Spring Security Testのセットアップ</h4><ul><li>依存ライブラリーの追加</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build.gradle</span></span><br><span class="line">  testImplementation <span class="string">'org.springframework.security:spring-security-test'</span></span><br></pre></td></tr></table></figure><ul><li><p>SpringSecurityのサーブレットフィルタの追加</p></li><li><p>TODO: テスト環境が作れて無いため一旦スキップする</p></li></ul><h2 id="第10章-Spring-Data-JPA"><a href="#第10章-Spring-Data-JPA" class="headerlink" title="第10章　Spring Data JPA"></a>第10章　Spring Data JPA</h2><h3 id="10-6-Repositoryの作成と利用"><a href="#10-6-Repositoryの作成と利用" class="headerlink" title="10.6 Repositoryの作成と利用"></a>10.6 Repositoryの作成と利用</h3><h4 id="10-6-4-ページネーション"><a href="#10-6-4-ページネーション" class="headerlink" title="10.6.4 ページネーション"></a>10.6.4 ページネーション</h4><ul><li>TODO: DOMAにあるかどうか</li></ul><h4 id="10-6-6-監査情報の付与"><a href="#10-6-6-監査情報の付与" class="headerlink" title="10.6.6 監査情報の付与"></a>10.6.6 監査情報の付与</h4><ul><li>TODO: DOMAにあるかどうか</li></ul><h2 id="第11章-Spring-＋-MyBatis"><a href="#第11章-Spring-＋-MyBatis" class="headerlink" title="第11章　Spring ＋ MyBatis"></a>第11章　Spring ＋ MyBatis</h2><ul><li>XMLに記述しないといけないので採用したくない</li></ul><h2 id="第12章-Spring＋Thymeleaf"><a href="#第12章-Spring＋Thymeleaf" class="headerlink" title="第12章　Spring＋Thymeleaf"></a>第12章　Spring＋Thymeleaf</h2><ul><li>SpringBootを始め、ViewにJSPではなくテンプレートエンジンであるThymeleafを使用するケースが増えている</li><li>まずはThymeleaf自体や、Springとセットで開発する際に欠かせない連携ライブラリーの概要を紹介</li></ul><h3 id="12-1-Thymeleafとは"><a href="#12-1-Thymeleafとは" class="headerlink" title="12.1 Thymeleafとは"></a>12.1 Thymeleafとは</h3><ul><li><p>Thymeleafは、Webアプリケーションと親和性の高いテンプレートエンジン</p></li><li><p>テンプレートエンジンとは</p><ul><li>雛形となるドキュメント（テンプレート）に対して、可変データを埋め込むことで動的にドキュメントを生成する仕組み</li><li>この仕組は、MVCフレームワークのModelとViewを分割する考え方と親和性が高く、しばしばMVCフレームワークのVIEWとし利用される</li></ul></li><li><p>特徴</p><ul><li>XHTMLやHTML5に準拠した形で記述できること</li></ul></li><li><p>JSPはブラウザが認識できないタグライブラリなどが含まれるため、開発中のJSPを直接ブラウザ上で正確に表示させることが難しいという問題があった</p></li><li><p>一方ThymeleafのテンプレートはHTML5に準拠しているため、テンプレートをブラウザで直接表示させたり。HTMLをデザイナーとプログラマの間で共有することができる</p></li><li><p>MEMO: パーツをIncludeする際はうまく表示できない問題はあると思う</p></li></ul><h4 id="12-1-1-Thymeleafのテンプレート"><a href="#12-1-1-Thymeleafのテンプレート" class="headerlink" title="12.1.1 Thymeleafのテンプレート"></a>12.1.1 Thymeleafのテンプレート</h4><p>ThymeleafはXHTMLやHTML5などで書かれたテンプレートをDOMに変換してから処理を行う仕組みになっている<br>「処理対象のDOMノード」と「DOMノードに適用する処理」をthネームスペースの属性（th属性）を使用して指定します。</p><p>th属性が指定されているDOMノードは「プロセッサ」と呼ばれるコンポーネントによってDOM操作（追加、削除、変更）が行われる。th属性の属性値には、OGNL（Object-Graph Navigation Language）と呼ばれる式言語を指定でき、式の中から、ユーザー定義のオブジェクトやThymeleafが提供する暗黙オブジェクトにアクセスすることができる</p><ul><li><p>以下３つのことをDialectと呼ぶ</p><ul><li>DOM操作を行うプロセッサ</li><li>th属性の属性値に指定された式を解釈するコンポーネント</li><li>暗黙オブジェクトを生成するコンポーネント<ul><li>→デフォルトでは、StandardDialectクラスが使用される</li></ul></li></ul></li><li><p>Dialectは拡張可能な仕組みになっており、本書で紹介するthymeleaf-spring4を使う場合は、StandardDiarectクラスを継承した、SpringStandardDialectクラスが使用される</p></li></ul><h4 id="12-1-2-ThymeleafとSpringの連携"><a href="#12-1-2-ThymeleafとSpringの連携" class="headerlink" title="12.1.2 ThymeleafとSpringの連携"></a>12.1.2 ThymeleafとSpringの連携</h4><ul><li><p>連携する場合、Thymeleafが提供するthymeleaf-spring4モジュールを利用</p></li><li><p>SpringMVCがJSP向けに提供しているタグライブラリと同様の機能を、Thymeleafで利用することができる</p></li><li><p>実現できる機能</p><ul><li>Thymeleafが管理するテンプレートをSpringMVCのViewとして扱うことができる</li><li>テンプレート内でSpringELを利用することができる</li><li>テンプレートと、フォームクラスおよび入力値チェック結果のバインドが可能となる</li><li>Springが管理するメッセージリソースを利用し、国際化対応のメッセージを表示することができる</li></ul></li></ul><h3 id="12-2-Spring-Thymeleafのセットアップ"><a href="#12-2-Spring-Thymeleafのセットアップ" class="headerlink" title="12.2 Spring + Thymeleafのセットアップ"></a>12.2 Spring + Thymeleafのセットアップ</h3><h4 id="12-2-1-ライブラリのセットアップ"><a href="#12-2-1-ライブラリのセットアップ" class="headerlink" title="12.2.1 ライブラリのセットアップ"></a>12.2.1 ライブラリのセットアップ</h4><ul><li>thymeleaf-spring4を入れる</li></ul><h4 id="12-2-2-SpringとThymeleafを連携するための設定"><a href="#12-2-2-SpringとThymeleafを連携するための設定" class="headerlink" title="12.2.2 SpringとThymeleafを連携するための設定"></a>12.2.2 SpringとThymeleafを連携するための設定</h4><ul><li>SringBootだと書かなくても動くっぽいけど明示する意味で</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(ThymeleafConfig.class) <span class="comment">// Thymeleafを使用することを明示</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ClassLoaderTemplateResolver <span class="title">templateResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ClassLoaderTemplateResolver resolver = <span class="keyword">new</span> ClassLoaderTemplateResolver();</span><br><span class="line">    resolver.setPrefix(<span class="string">"/WEB-INF/templates/"</span>);</span><br><span class="line">    resolver.setSuffix(<span class="string">".html"</span>);</span><br><span class="line">    resolver.setTemplateMode(<span class="string">"HTML5"</span>);</span><br><span class="line">    resolver.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SpringTemplateEngine <span class="title">templateEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SpringTemplateEngine templateEngine = <span class="keyword">new</span> SpringTemplateEngine();</span><br><span class="line">    templateEngine.setTemplateResolver(templateResolver());</span><br><span class="line">    <span class="keyword">return</span> templateEngine;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ThymeleafViewResolver viewResolver = <span class="keyword">new</span> ThymeleafViewResolver();</span><br><span class="line">    viewResolver.setTemplateEngine(templateEngine());</span><br><span class="line">    viewResolver.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="keyword">return</span> viewResolver;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-3-Thymeleafを利用したViewの実装"><a href="#12-3-Thymeleafを利用したViewの実装" class="headerlink" title="12.3 Thymeleafを利用したViewの実装"></a>12.3 Thymeleafを利用したViewの実装</h3><h4 id="12-3-1-はじめてのThymeleaf"><a href="#12-3-1-はじめてのThymeleaf" class="headerlink" title="12.3.1 はじめてのThymeleaf"></a>12.3.1 はじめてのThymeleaf</h4><ul><li>Thymeleafを利用したViewへの変更</li><li>テンプレートの実装</li></ul><h4 id="12-3-2-テキストの出力"><a href="#12-3-2-テキストの出力" class="headerlink" title="12.3.2 テキストの出力"></a>12.3.2 テキストの出力</h4><ul><li>th:text — 属性値に指定した値をXHTMLサニタイジングして出力する<ul><li>ユーザからの入力を表示する際はこちら</li></ul></li><li>th:utext — 属性値に指定した値をXHTMLサニタイジングせずに出力する<ul><li>プロパティファイルでHTML要素を使用して意図的に装飾しているような場合は、th:utext属性を使用してXHTMLサニタイジングせずに出力する必要がある</li></ul></li></ul><h4 id="12-3-3-式の構文"><a href="#12-3-3-式の構文" class="headerlink" title="12.3.3 式の構文"></a>12.3.3 式の構文</h4><ul><li>基本的な式<ul><li>変数式</li><li>選択変数式</li><li>メッセージ式：これは利用しておきたい</li><li>リンクURL式</li></ul></li><li>リテラル</li><li>基本的な演算子</li><li>テキスト演算子</li><li>条件演算子</li></ul><h4 id="12-3-4-th属性による属性値の設定"><a href="#12-3-4-th属性による属性値の設定" class="headerlink" title="12.3.4 th属性による属性値の設定"></a>12.3.4 th属性による属性値の設定</h4><ul><li><p>Thymeleafのテンプレートエンジンとしての機能は、th属性に指定された式を解釈し、HTMLの各要素の属性値を設定または上書きすることです。</p></li><li><p>特定の属性に値を設定する方法</p></li><li><p>現在の属性値の前後に値を追加する方法</p></li><li><p>存在有無が重要な属性の出力を制御する方法</p></li><li><p>複数の属性に同じ値を設定する方法：AltとTitleに同じ値を入れたりとか</p></li><li><p>任意の属性に値を設定する方法：独自データ属性に値を設定したい場合に使用する</p><ul><li><code>&lt;button th:attr=&quot;data-product-id=${product.id}&quot;&gt;削除&lt;/button&gt;</code></li></ul></li></ul><h4 id="12-3-5-HTML要素の出力制御"><a href="#12-3-5-HTML要素の出力制御" class="headerlink" title="12.3.5 HTML要素の出力制御"></a>12.3.5 HTML要素の出力制御</h4><p>ここまでth属性を使ってHTML属性の属性値を動的に設定する方法を見てきましたが、<br>動的にHTML要素の出力を制御する必要が出てくる場合がある</p><ul><li><p>例えば、特定の条件下の場合のみメッセージを表示したり、</p></li><li><p>データの件数だけ行を追加して出力したりする場合などです。</p></li><li><p>JSPでは、それらの専用タグライブラリが用意されていましたが、Thymeleafでも相当する機能がth属性として提供されている</p></li><li><p>条件による出力有無の制御</p><ul><li>th:if</li><li>th:unless</li><li>th:switch</li><li>th:case</li></ul></li><li><p>繰り返し出力の制御</p><ul><li>th:each<ul><li>java.util.Listの実装クラス</li><li>java.util.Iterableの実装クラス</li><li>java.util.Mapの実装クラス</li><li>配列</li></ul></li></ul></li></ul><h4 id="12-3-6-インライン記述"><a href="#12-3-6-インライン記述" class="headerlink" title="12.3.6 インライン記述"></a>12.3.6 インライン記述</h4><p>th属性を利用しない方法であるインライン記述について説明</p><ul><li><p><code>[[ ${user.name} ]]</code>でかけるよ</p></li><li><p>インライン記述はデフォルトで無効になっている</p></li><li><p>有効にするには、 <code>th:inline</code>属性をインライン記述を利用する要素、もしくは親要素に付与する必要がある</p></li><li><p>インライン記述のでメリット</p><ul><li>テンプレートファイルをブラウザ上で直接表示した際に、インライン記述のテキストがそのまま表示されてしまう点</li><li>th:textの用にサンプルデータを表示することができないため、デザイナーとの分業に支障をきたす可能性がある</li></ul></li><li><p>メモ</p><ul><li>インライン記述はJavascriptなどのスクリプト内でも利用することができる</li><li>これを利用すると、テンプレートをブラウザで静的に表示した場合や、アプリケーションサーバーにデプロイして動的に表示した場合、その両方においてスクリプトを正常に動作させられる。</li></ul></li><li><p>MEMO: 結論（個人的な）</p><ul><li>インライン記述は原則禁止したほうがよいと思う（コーディング規約などで明記すべき）</li></ul></li></ul><h4 id="12-3-7-コメント"><a href="#12-3-7-コメント" class="headerlink" title="12.3.7 コメント"></a>12.3.7 コメント</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  このブロックはThymeleafの処理後もテンプレートに残ります。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--/*</span></span><br><span class="line"><span class="comment">  このブロックはThymeleafの処理後に削除される。</span></span><br><span class="line"><span class="comment">*/--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="12-3-8-Springとの連携"><a href="#12-3-8-Springとの連携" class="headerlink" title="12.3.8 Springとの連携"></a>12.3.8 Springとの連携</h4><p>本項では、thymleaf-springが提供しているSpringとの連携機能に焦点を当てる</p><ul><li><p>フォームオブジェクトのバインディング</p><ul><li>th:object属性</li><li>th:field属性</li></ul></li><li><p>入力エラーの表示</p><ul><li>SpringMVCの入力チェック機能で発生したエラーの表示は、<ul><li>th:errors属性 — エラーメッセージの出力対象を指定するための属性</li><li>th:errorclass属性 — エラー時に適用するCSSを指定するための属性</li><li>th:fieldsオブジェクト — エラー情報にアクセスするための便利なメソッドを提供するオブジェクト<ul><li>を使用して行う</li></ul></li></ul></li></ul></li><li><p>TODO: エラー処理について設計する必要あり</p></li><li><p>SpELの利用</p><ul><li>Thymeleafは数式をOGNLとして解釈しますが、thymeleaf-springを利用すると、</li><li>変数式はSpELとして解釈されます。</li><li>これにより、テンプレート内から、DIコンテナ内に登録されているBeanにアクセスできるようになる</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;@appSettings.passwordValidDays&#125;"</span>&gt;</span>60<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- @Bean名でアクセスできる --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>ConversionServiceとの連携<ul><li>SpringMVCに適用されているConversionServiceと連携して、値の型変換を行うことができる</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppSettings</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;vasicPostage:1250&#125;"</span>)</span><br><span class="line">  <span class="meta">@NumberFormat</span>(style = NumberFormat.Style.NUMBER)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> basicOneDayCost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;@appSettings.basicOneDayCost&#125;"</span>&gt;</span>1300<span class="tag">&lt;/<span class="name">span</span>&gt;</span>円</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;&#123;@appSettings.basicOneDayCost&#125;&#125;"</span>&gt;</span>1300<span class="tag">&lt;/<span class="name">span</span>&gt;</span>円</span><br></pre></td></tr></table></figure><h4 id="12-3-9-テンプレートの共通化"><a href="#12-3-9-テンプレートの共通化" class="headerlink" title="12.3.9 テンプレートの共通化"></a>12.3.9 テンプレートの共通化</h4><ul><li><p>テンプレートのフラグメント化</p><ul><li>共通な内容を別ファイルに切り出す</li></ul></li><li><p>テンプレートのレイアウト化</p><ul><li>複数のテンプレートで同じデザインレイアウトを適用する場合は、通常、共通的なレイアウトを定義して共有することになる。このような場合に有効なライブラリとして、<code>Thymeleaf Layout Dialect</code>がある</li></ul></li><li><p>テンプレートのフラグメント化</p><ul><li>テンプレートの一部を分割して別ファイルに切り出すことができる</li><li>ヘッダー、フッター、メニューがフラグメントとしてよく利用されるが、特定のUIコンポーネントをフラグメントとして切り出すことも可能<ul><li>フラグメントの利用方法<ul><li>フラグメントの定義と参照という２つの作業が必要になる</li><li>定義方法には以下の２つの方法がある<ul><li>Thymeleafのth:fragment属性を利用したフラグメント定義　★個人的にこっちがわかりやすくていいと思う</li><li>CSSセレクタと同様、id属性を利用したフラグメント定義</li></ul></li><li>定義したフラグメントを読み込む方法として以下の２つ<ul><li>Thymeleafのth:include属性を利用したフラグメントのインクルード</li><li>Thymeleafのth:replace属性を利用したフラグメントのち缶</li></ul></li></ul></li></ul></li></ul></li><li><p>テンプレートのレイアウト化</p><ul><li>Thymeleaf Layout Dialectを利用したテンプレートのレイアウト化について説明</li></ul></li><li><p>セットアップ</p><ul><li><code>thymeleaf-layout-dialect</code>のリポジトリ追加</li><li>コンフィギュレーションクラスの実装</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SpringTemplateEngine <span class="title">templateEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  SpringTemplateEngine templateEngine = <span class="keyword">new</span> SpringTemplateEngine();</span><br><span class="line">  templateEngine.setDialect(<span class="keyword">new</span> LayoutDialect());</span><br><span class="line">  templateEngine.setTemplateResolver(templateResolver());</span><br><span class="line">  <span class="keyword">return</span> templateEngine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Thymeleaf Layout DialectによるViewの実装</p><ul><li>共通レイアウトとなるテンプレートを「Decorator」</li><li>共通レイアウトを適用する側の個別のテンプレートを「Fragment」と呼ぶ</li></ul></li><li><p>MEMO: 画面の全体像がわかりづらくなりやすいので、この方法は採用したくないため割愛</p></li></ul><h4 id="12-3-10-SpringSecurityとの連携"><a href="#12-3-10-SpringSecurityとの連携" class="headerlink" title="12.3.10 SpringSecurityとの連携"></a>12.3.10 SpringSecurityとの連携</h4><ul><li><p>SpringSecurityが提供する画面表示に関する機能をThymeleafで利用するためには、</p></li><li><p>SpringSecurityDialectを利用します。</p></li><li><p>以下の機能</p><ul><li>認証情報にアクセスする機能を持つ sec:authentication属性を提供</li><li>SpringSecurity expression を利用した認可処理と同等の機能を持つ sec:authorize属性を提供</li><li>URLベースの認可処理を行う sec:authorize-ur属性を提供する</li><li>ACL(Access Control List)を利用した認可処理を行う sec:authorize-acl属性を提供</li><li>CSRFトークンにアクセスする機能を提供</li></ul></li><li><p>SpringSecurityDialectのセットアップ</p><ul><li><code>thymeleaf-extras-springsecurity4</code></li></ul></li><li><p>認証情報へのアクセス</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.ort/extras/spring-security"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">th:with</span>=<span class="string">"title=トップページ"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"principal.username"</span>&gt;</span>テストユーザ名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>画面項目への認可</p><ul><li>適用する画面項目とアクセスポリシーの指定<ul><li><code>sec:authorize=&quot;hasRole(&#39;ADMIN&#39;)&quot;</code>属性を付与</li><li>Trueの場合、HTMLを表示</li></ul></li><li>Webリソースとして指定したアクセスポリシーとの連動<ul><li><code>sec:authorize-url=&quot;/admin/accounts&quot;</code>にアクセスできることを条件として表示非表示を設定している</li></ul></li></ul></li><li><p>CSRFトークンへのアクセス</p><ul><li>Spring Security Dialectを適用するだけでOK hidden項目としてHTMLに埋め込まれます</li><li>ajax通信の際は取得してあげる必要がある<ul><li>headerのmeta要素に設定しといて、JSで取得してあげる感じにする<ul><li>TODO: 取得してPOSTする処理は実装考えてみる</li></ul></li></ul></li></ul></li></ul><h4 id="12-3-11-JSR-310-Date-and-Time-APIの利用"><a href="#12-3-11-JSR-310-Date-and-Time-APIの利用" class="headerlink" title="12.3.11 JSR 310: Date and Time APIの利用"></a>12.3.11 JSR 310: Date and Time APIの利用</h4><ul><li><p>Thymeleafは、テンプレート内でJSR310:Date and TimeAPIのオブジェクトを操作するための機能を標準ではサポートしておらず、Thymeleafが提供する拡張ライブラリが必要になる</p></li><li><p>依存ライブラリの追加</p><ul><li>thymeleaf-extras-java8timeを利用する</li><li>なお、thymeleaf-extras-java8timeはSpringIO Platformで管理されていないため、バージョンの指定が必要</li></ul></li><li><p>Bean定義の追加</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SpringTemplateEngine <span class="title">templateEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  SpringTemplateEngine templateEngine = <span class="keyword">new</span> SpringTemplateEngine();</span><br><span class="line">  templateEngine.setDialect(<span class="keyword">new</span> Java8TimeDialect());</span><br><span class="line">  templateEngine.setTemplateResolver(templateResolver());</span><br><span class="line">  <span class="keyword">return</span> templateEngine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ユーティリティオブジェクト（temporals）を利用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span> <span class="attr">th:text</span>=<span class="string">"|$&#123;#temporals.format(date, 'yyyy/mm/dd')&#125;の会議室|"</span>&gt;</span>2020/05/19の会議室<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第13章-Spring-Boot"><a href="#第13章-Spring-Boot" class="headerlink" title="第13章　Spring Boot"></a>第13章　Spring Boot</h2><p>機能が豊富な事による課題がある<br>どう組み合わせていいかわからなかったり、ちょっとしたWebアプリケーションを作成するだけでも、数多くの設定が必要であったりする点です。</p><p>SpringBootを利用することでこられの課題を解決することができる</p><h3 id="13-1-SpringBootとは"><a href="#13-1-SpringBootとは" class="headerlink" title="13.1 SpringBootとは"></a>13.1 SpringBootとは</h3><ul><li><p>SpringBoot</p><ul><li>２０１３年　　：開発開始</li><li>２０１４年４月：1.0リリース</li><li>２０１６年６月：1.3.5</li><li>２０２０年５月：2.3.0</li></ul></li><li><p>SpringBootを使えば、何も設定しなくてもデフォルトで様々な機能が利用可能</p></li><li><p>XMLまたはJavaConfigによるBean定義、ログの設定、Servletの設定などが不要になる</p></li><li><p>アプリケーションサーバーをデプロイする必要もなくなり、Javaのmainメソッドを実行すればアプリケーションを実行できる</p></li></ul><h4 id="13-1-1-SpringBootで作るHello-Worldアプリケーション"><a href="#13-1-1-SpringBootで作るHello-Worldアプリケーション" class="headerlink" title="13.1.1 SpringBootで作るHello Worldアプリケーション"></a>13.1.1 SpringBootで作るHello Worldアプリケーション</h4><h4 id="13-1-2-AutoConfigureに夜自動設定"><a href="#13-1-2-AutoConfigureに夜自動設定" class="headerlink" title="13.1.2 AutoConfigureに夜自動設定"></a>13.1.2 AutoConfigureに夜自動設定</h4><ul><li>自動設定の詳細を知りたい場合は、spring-boot-autoconfigureプロジェクトの◯◯AutoConfigurationクラスのソースを読むことをおすすめします。</li></ul><h4 id="13-1-3-Starterによる依存ライブラリの解決"><a href="#13-1-3-Starterによる依存ライブラリの解決" class="headerlink" title="13.1.3 Starterによる依存ライブラリの解決"></a>13.1.3 Starterによる依存ライブラリの解決</h4><ul><li>starterライブラリの説明</li></ul><h4 id="13-1-4-実行可能jarの作成"><a href="#13-1-4-実行可能jarの作成" class="headerlink" title="13.1.4 実行可能jarの作成"></a>13.1.4 実行可能jarの作成</h4><ul><li>実行可能jarとしてパッケージングされる</li></ul><h3 id="13-2-SpringBootでSpringMVC"><a href="#13-2-SpringBootでSpringMVC" class="headerlink" title="13.2 SpringBootでSpringMVC"></a>13.2 SpringBootでSpringMVC</h3><h4 id="13-2-1-RESTful-Webサービスの作成"><a href="#13-2-1-RESTful-Webサービスの作成" class="headerlink" title="13.2.1 RESTful Webサービスの作成"></a>13.2.1 RESTful Webサービスの作成</h4><h4 id="13-2-2-画面遷移型アプリケーションの作成"><a href="#13-2-2-画面遷移型アプリケーションの作成" class="headerlink" title="13.2.2 画面遷移型アプリケーションの作成"></a>13.2.2 画面遷移型アプリケーションの作成</h4><ul><li><p>SpringBootの自動設定では、TemplateResolverがビュー名につけるプレフィックスとサフィックスのデフォルト値は、</p></li><li><p>それぞれ、<code>classpath:/templates/</code>と<code>.html</code>になる</p></li><li><p>テンプレートからメッセージを取得する方法</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span> <span class="attr">th:text</span>=<span class="string">"#&#123;app.title&#125;"</span>&gt;</span> <span class="comment">&lt;!-- $&#123;変数名&#125;ではなく#&#123;メッセージキー名&#125;--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="13-3-SpringBootでデータアクセス"><a href="#13-3-SpringBootでデータアクセス" class="headerlink" title="13.3 SpringBootでデータアクセス"></a>13.3 SpringBootでデータアクセス</h3><h4 id="13-3-1-SpringJDBC"><a href="#13-3-1-SpringJDBC" class="headerlink" title="13.3.1 SpringJDBC"></a>13.3.1 SpringJDBC</h4><ul><li><p>これまで必要だったがSpringJDBCでは不要な定義</p><ul><li>データソースの定義</li><li>トランザクションマネージャの定義</li><li>JdbcTemplateの定義</li></ul></li><li><p>SpringBootのデフォルトの挙動としてクラスパス直下に<code>schema.sql</code>が存在すると起動時にそのSQLファイルを実行</p></li></ul><h4 id="13-3-2-Spring-Data-JPA"><a href="#13-3-2-Spring-Data-JPA" class="headerlink" title="13.3.2 Spring Data JPA"></a>13.3.2 Spring Data JPA</h4><h4 id="13-3-3-MyBatis"><a href="#13-3-3-MyBatis" class="headerlink" title="13.3.3 MyBatis"></a>13.3.3 MyBatis</h4><h4 id="13-3-4-コネクションプールライブラリの変更"><a href="#13-3-4-コネクションプールライブラリの変更" class="headerlink" title="13.3.4 コネクションプールライブラリの変更"></a>13.3.4 コネクションプールライブラリの変更</h4><ul><li><p>SpringBootではDatasourceを定義する必要はなく、自動で生成されます。コネクションプーリングの仕組みも自動で決まり、以下のライブラリのうちクラスパス上にあるものが利用されます。</p><ul><li>TomcatJDBC</li><li>HikariCP</li><li>Commons DBCP</li><li>Commons DBCP2</li></ul></li><li><p>TODO: HikariCPが一番速いとのこと</p></li></ul><h3 id="13-4-SpringBootでSpring-Security"><a href="#13-4-SpringBootでSpring-Security" class="headerlink" title="13.4 SpringBootでSpring Security"></a>13.4 SpringBootでSpring Security</h3><ul><li>Spring Security用のプロジェクトも当然用意されています。</li></ul><h4 id="13-4-1-Basic認証"><a href="#13-4-1-Basic認証" class="headerlink" title="13.4.1 Basic認証"></a>13.4.1 Basic認証</h4><ul><li>デフォルトで有効になるらしい</li><li>デフォルトユーザーはuser</li><li>パスワードはランダムに設定される</li></ul><h4 id="13-4-2-認証・認可のカスタマイズ"><a href="#13-4-2-認証・認可のカスタマイズ" class="headerlink" title="13.4.2 認証・認可のカスタマイズ"></a>13.4.2 認証・認可のカスタマイズ</h4><ul><li>SpringSecruityの認証・認可の設定は<code>org.springframework.security.config.annotation.web.configuration.WebSecrityConfigurerAdapter</code>を用いて行う</li></ul><h3 id="13-5-Spring-Bootで型安全なプロパティ設定"><a href="#13-5-Spring-Bootで型安全なプロパティ設定" class="headerlink" title="13.5 Spring Bootで型安全なプロパティ設定"></a>13.5 Spring Bootで型安全なプロパティ設定</h3><p>application.propertiesから値を取得できる</p><ul><li>TODO: EnumによるConst管理とどっちがいいか<ul><li>メッセージのとり方確認</li><li>定数管理方法のベストプラクティス</li></ul></li></ul><h4 id="13-5-1-ConfigurationPropertiesを用いたプロパティの設定"><a href="#13-5-1-ConfigurationPropertiesを用いたプロパティの設定" class="headerlink" title="13.5.1 @ConfigurationPropertiesを用いたプロパティの設定"></a>13.5.1 @ConfigurationPropertiesを用いたプロパティの設定</h4><ul><li><p>プロパティを多用するSpringBootでは、安全にプロパティを扱うための仕組みとして、</p></li><li><p><code>@ConfigurationProperties</code>アノテーションが用意されている</p></li><li><p>TODO: プロパティ管理はこれが良さそう</p></li></ul><h4 id="13-5-2-Bean-Validationに夜プロパティ値のチェック"><a href="#13-5-2-Bean-Validationに夜プロパティ値のチェック" class="headerlink" title="13.5.2 Bean Validationに夜プロパティ値のチェック"></a>13.5.2 Bean Validationに夜プロパティ値のチェック</h4><ul><li>プロパティ値も、起動時にBindされる際、<code>@NotEmpty</code>などで値の検証ができる</li></ul><h4 id="13-5-3-IDEによるプロパティの補完"><a href="#13-5-3-IDEによるプロパティの補完" class="headerlink" title="13.5.3 IDEによるプロパティの補完"></a>13.5.3 IDEによるプロパティの補完</h4><ul><li><p><code>@ConfigurationProperties</code>を用いて定義したプロパティはIDEで補完が効く</p></li><li><p>補完させるためにプロパティのメタ情報を生成する必要がある</p></li><li><p>spring-boot-configuration-processorの説明</p></li><li><p>SpringBootでプロパティを外部化する際は積極的に使用していくとよい</p></li></ul><h3 id="13-6-SpringBootAcruatorで運用機能強化"><a href="#13-6-SpringBootAcruatorで運用機能強化" class="headerlink" title="13.6 SpringBootAcruatorで運用機能強化"></a>13.6 SpringBootAcruatorで運用機能強化</h3><ul><li><p>SpringBootでは開発を容易にする機能が提供されるだけでなく、アプリケーションの運用面を考慮した機能も提供されている</p></li><li><p>これを提供するのがSpringBootActuator</p></li><li><p>これだけでアプリケーションの状態を検査するためのエンドポイント（HTTP,JMX,SSH）が追加されたり、ヘルスチェック機能やメトリクス取得機能が有効になる</p></li><li><p>TODO: 有効にして活用したい</p></li></ul><h4 id="13-6-1-HTTPエンドポイントの追加"><a href="#13-6-1-HTTPエンドポイントの追加" class="headerlink" title="13.6.1 HTTPエンドポイントの追加"></a>13.6.1 HTTPエンドポイントの追加</h4><ul><li><p>HTTPエンドポイント</p><ul><li>&#x2F;autoconfig</li><li>&#x2F;beans</li><li>&#x2F;env</li><li>&#x2F;configprops</li><li>&#x2F;dump</li><li>&#x2F;health</li><li>&#x2F;info</li><li>&#x2F;logfile</li><li>&#x2F;metrics</li><li>&#x2F;mappings</li><li>&#x2F;shutdown</li><li>&#x2F;trace</li><li>&#x2F;flyway</li><li>&#x2F;liquibase</li></ul></li><li><p>エンドポイントのコンテキストパスやポート番号などはプロパティを使用して変更できる</p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">management.context-path</span>=<span class="string">/manage</span></span><br><span class="line"><span class="meta">management.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="meta">management.address</span>=<span class="string">127.0.0.1 # localhostからのみアクセスを許可する</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 個別のエンドポイントの有効無効を次のプロパティで設定</span></span><br><span class="line"><span class="meta">endpoints.shutdown.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">endpoints.mapping.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">endpoints.trace.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># エンドポイントはHTTPだけでなくJMXでもアクセスできる これらの無効にもできる</span></span><br><span class="line"><span class="meta">management.port</span>=<span class="string">-1 # HTTPエンドポイントを無効にする</span></span><br><span class="line"><span class="meta">endpoints.jmx.enabled</span>=<span class="string">false # JMXエンドポイントを無効にする</span></span><br></pre></td></tr></table></figure><h4 id="13-6-2-ヘルスチェック"><a href="#13-6-2-ヘルスチェック" class="headerlink" title="13.6.2 ヘルスチェック"></a>13.6.2 ヘルスチェック</h4><ul><li>SpringBootActuatorはヘルスチェック機能を持っている</li></ul><h4 id="13-6-3-メトリクス"><a href="#13-6-3-メトリクス" class="headerlink" title="13.6.3 メトリクス"></a>13.6.3 メトリクス</h4><ul><li><p>SpringBootActuatorはメトリクス取得機能も備えている</p></li><li><p>次の２つのメトリクスがサポートされている</p><ul><li>gauge: 絶対値を記録する</li><li>counter: 差分値を記録する</li></ul></li><li><p>TODO: メトリクスは収集して管理できる用にしておく</p></li></ul><h2 id="第14章-チュートリアル"><a href="#第14章-チュートリアル" class="headerlink" title="第14章　チュートリアル"></a>第14章　チュートリアル</h2><ul><li>会議室予約システムを作成していく手順を記載</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring徹底入門&quot;&gt;&lt;a href=&quot;#Spring徹底入門&quot; class=&quot;headerlink&quot; title=&quot;Spring徹底入門&quot;&gt;&lt;/a&gt;Spring徹底入門&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;目次&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1章　Spring Fr</summary>
      
    
    
    
    <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>Java EE 7徹底入門 標準Javaフレームワークによる高信頼性Webシステムの構築</title>
    <link href="http://yoursite.com/JAVA/2020-04_JavaEE7%E5%BE%B9%E5%BA%95%E5%85%A5%E9%96%80/"/>
    <id>http://yoursite.com/JAVA/2020-04_JavaEE7%E5%BE%B9%E5%BA%95%E5%85%A5%E9%96%80/</id>
    <published>2020-04-11T15:00:00.000Z</published>
    <updated>2020-09-18T17:00:40.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-EE-7徹底入門-標準Javaフレームワークによる高信頼性Webシステムの構築"><a href="#Java-EE-7徹底入門-標準Javaフレームワークによる高信頼性Webシステムの構築" class="headerlink" title="Java EE 7徹底入門 標準Javaフレームワークによる高信頼性Webシステムの構築"></a>Java EE 7徹底入門 標準Javaフレームワークによる高信頼性Webシステムの構築</h1><ul><li><p>形式：書籍</p></li><li><p>発売日：2015年12月15日</p></li><li><p>ISBN：9784798140926</p></li><li><p>価格：本体3,800円＋税</p></li><li><p>仕様：B5変・584ページ</p></li><li><p>分類：プログラミング・開発</p></li><li><p>シリーズ：徹底入門</p></li><li><p>書籍ページ <a href="https://www.shoeisha.co.jp/book/detail/9784798140926">https://www.shoeisha.co.jp/book/detail/9784798140926</a></p></li><li><p>サンプルプログラム <a href="https://www.shoeisha.co.jp/book/download/9784798140926/detail">https://www.shoeisha.co.jp/book/download/9784798140926/detail</a></p></li></ul><h2 id="Chapter-1-Java-EEの基礎知識"><a href="#Chapter-1-Java-EEの基礎知識" class="headerlink" title="Chapter 1 Java EEの基礎知識"></a>Chapter 1 Java EEの基礎知識</h2><h3 id="1-1-Java-EEのこれまで"><a href="#1-1-Java-EEのこれまで" class="headerlink" title="1.1 Java EEのこれまで"></a>1.1 Java EEのこれまで</h3><ul><li><p>1995年 Sun Microsytems,Inc</p><ul><li>JDK1.0 α版</li></ul></li><li><p>1998年 Sun JPEと呼ぶプロジェクトを立ち上げ</p><ul><li>サーバー側の企業アプリケーション開発にJavaを利用できるようにするために立ち上げ</li></ul></li><li><p>1999年12月 フレームワーク提供(J2EE 1.2)</p><ul><li>10個の機能から構成<ul><li>JSP+Servlet → 急速に普及</li><li>EJB</li></ul></li></ul></li><li><p>2001年 J2EE 1.3</p></li><li><p>2003年 J2EE 1.4</p><ul><li>XML対応</li></ul></li><li><p>このころ、オープンソースのフレームワークも台頭</p></li><li><p>2006年5月 簡単開発(Ease of Development)をテーマに、名前を改名</p><ul><li>Java Platform Enterprise Edition(JavaEE)と改め新バージョンをリリース</li><li>Java EE 5<ul><li>普及には至らず</li><li>改善をすすめる</li></ul></li></ul></li><li><p>2009年12月 JavaEE5をさらに大幅改善したJavaEE6をリリース</p><ul><li>CDI</li><li>プロファイル：全仕様に対するサブセットを提供</li><li>プルーニング：使われなくなって古くなった使用を整理するための仕組み</li><li>→ ミッションクリティカルな企業システムでも採用されるようになった</li></ul></li></ul><h4 id="1-1-3-Java-EE-7-へ-—-3つのテーマ"><a href="#1-1-3-Java-EE-7-へ-—-3つのテーマ" class="headerlink" title="1.1.3 Java EE 7 へ — 3つのテーマ"></a>1.1.3 Java EE 7 へ — 3つのテーマ</h4><ul><li><p>JavaEE6のリリース後、すぐに次期バージョンの検討</p><ul><li>目をつけたのは「クラウド」</li><li>より簡単にJavaEEアプリケーションをスケールするような機能を考え、GlassFishというアプリケーション・サーバー上で実際に動作するサンプルも作成<ul><li>外部からのフィードバックやスペックリードが集まって再検討した結果次期が早いと判断し見送り</li></ul></li></ul></li><li><p>Column JavaEE7 におけるクラウド対応の見送り</p><ul><li>2012年8月12日 開発の遅れと、仕様化に対する十分な経験、検討が足りなかったため見送りを決定</li><li>期待があった分失望の声もあったが</li><li>有識者やベンダーの多くはこの決断を支持</li></ul></li><li><p>新しいテーマを考えた</p><ul><li>HTML5対応</li><li>開発用意&#x2F;生産性の向上</li><li>エンタープライズニーズへの対応</li></ul></li></ul><h3 id="1-2-Java-EEの全体像"><a href="#1-2-Java-EEの全体像" class="headerlink" title="1.2 Java EEの全体像"></a>1.2 Java EEの全体像</h3><ul><li><p>Java EEに含まれる機能の全体像を把握してください</p></li><li><p>JavaEEは企業システムのアプリケーション開発に必要なさまざまな機能を１つにまとめた包括仕様（umbrella specification）の総称</p></li><li><p>大小さまざまな39個の仕様から構成されています。</p></li><li><p>主に</p><ul><li>インテグレーションテクノロジー</li><li>ビジネスロジックテクノロジー</li><li>プレゼンテーションテクノロジー<ul><li>を組み合わせながらシステムを構築する</li></ul></li></ul></li><li><p>インテグレーションテクノロジー</p><ul><li>外部システムと連携するための機能を提供</li><li>外部システム<ul><li>データベース</li><li>メールサーバー</li><li>メッセージングプロバイダ（OpenMQ,WebShereMQ）</li><li>エンタープライズ情報システム（ERP,メインフレーム）等がある</li></ul></li></ul></li><li><p>ビジネスロジックテクノロジー</p><ul><li>外部システムと連携するプログラムの実装とユーザーインターフェースのプログラムの実装の間に入り、企業システムの業務で必要とされる処理を実装<ul><li>トランザクションの処理や業務のフローの実装など</li></ul></li></ul></li><li><p>プレゼンテーションテクノロジー</p><ul><li>様々なデバイスからアクセスされることを考慮する必要がある</li><li>人だけでなく、物も含め、企業システムに対してアクセスするためのインターフェースを提供</li></ul></li></ul><h4 id="1-2-2-Java-EEに含まれる機能"><a href="#1-2-2-Java-EEに含まれる機能" class="headerlink" title="1.2.2 Java EEに含まれる機能"></a>1.2.2 Java EEに含まれる機能</h4><ul><li><p>Java Persistence API(JPA)</p><ul><li>ORM機能</li><li>JavaSEでも利用可能</li></ul></li><li><p>Java Messagge Service(JMS)</p><ul><li>外部のメッセージングプロバイダを経由して非同期でテキストメッセージやバイナリメッセージを送受信</li><li>JavaSEでも利用可能</li></ul></li><li><p>Batch Applications for the Java Platform</p><ul><li>データをまとめて一括処理する場合に利用</li><li>JavaSEでも利用可能</li></ul></li><li><p>Java Mail API</p><ul><li>電子メールクライアントを作成するために必要な機能を提供</li></ul></li><li><p>Java EE Connector Architecture(JCA)</p><ul><li>EAIを行うために必要な機能を提供</li></ul></li><li><p>DI&#x2F;CDI</p><ul><li>JavaEEに含まれる技術を疎結合で結び合わせるための技術</li></ul></li><li><p>Enterprise JavaBeans(EJB)</p><ul><li>もともと、分散コンポーネントを作成するための技術として作られました</li><li>JavaEE5以降、EJBはビジネスロジックを簡単に実装するための技術として大きく生まれ変わりました</li><li>XMLの設定は不要で、クラスに対して宣言的に定義できるようになっています。</li></ul></li><li><p>Java Transaction API(JTA)</p><ul><li>トランザクション管理を行うための技術</li></ul></li><li><p>JavaServer Pages(JSP), JSP Standard Tag Library(JSTL)</p><ul><li>JSPは動的ページ作成</li><li>JSTLは、ページ内のループ処理やSQLを使用したデータベースアクセスなど、JSPで共通する機能を隠蔽して利用できるようにした専用タグ<ul><li>JSFの導入以降は徐々に置き換えが進む</li></ul></li></ul></li><li><p>JSON-P</p><ul><li>JavaEE7から新たに導入されたJavaEEでJSONを扱うための機能</li><li>次期バージョンでは、JSONデータとJavaオブジェクトをマッピングするJSON Bindingの提供も予定されている<ul><li>→ もう対応されている？</li></ul></li></ul></li><li><p>Expression Language(EL)</p><ul><li>簡単な式や変数などを用いて、記述内容の評価が行える言語として作られました</li></ul></li><li><p>Servlet</p><ul><li>ServletのプログラムはServletコンテナ（Webコンテナとも呼ばれる）と呼ばれる実行環境上でどうsあ</li><li>HTTP&#x2F;1.0及び1.1のリクエストに応答する</li><li>ServletはHTTP処理に対する低レベルAPIしか提供しないため、現在はServletのAPIだけでプログラミングを行う場面は少ない</li><li>JSFのようなServletコンテナ上で動作する上位フレームワークへ処理を以上するための仲介役として利用されることが多い</li></ul></li><li><p>WebSocket</p><ul><li>HTTPプロトコルをアップグレードした、双方向&#x2F;全二重通信が可能なプロトコル</li><li>HTTPと比べてメッセージ送受信の際のオーバーヘッドが少ないため、効果的にリアルタイムメッセージの送受信ができる</li></ul></li><li><p>Java API for RESTful Web Services(JAX-RS)</p><ul><li>RESTアーキテクチャに基づいてWebサービスを実装するための機能を提供</li><li>従来、Webサービスの実装にはSOAP Webサービス(JAX-WS)とXMLを用いるのが主流だった</li><li>現在は、分散システム間連携を行うために、RESTful WebサービスとJSONを組み合わせて実装する場面が多くなっている</li><li>JAX-RSの仕様は、HTTPの仕様と密接に関連しており、HTTPメソッドに対応するアノテーションを用いて処理を実装する<ul><li>JAX-WSからJAX-RSへと主流が変わってきたことを理解した</li></ul></li></ul></li><li><p>JavaServer Faces(JSF)</p><ul><li>コンポーネントベースで開発が可能なWebアプリケーション開発フレームワーク</li><li>画面は、フェースレット（Facelets）と呼ばれるXHTML形式のテキストファイルに、HTMLタグやJSF専用タグを記入してデザイン</li><li>バックエンドの処理はマネージドビーン（Managed Bean）と呼ばれるPOJOクラス、もしくはCDIクラスで処理を実装</li><li>JSFは標準でHTML5やAjaxへも対応しており、Javascriptの知識がなくても簡単にAjaxプログラミングが行えます</li></ul></li><li><p>ビーンバリデーション</p><ul><li>データの整合性を検証するための機能</li></ul></li><li><p>Common Annotation</p><ul><li>JavaEE5でMetadata facility for Javaという機能が追加された</li><li>これに関連して、JavaSE環境、JavaEE環境の両方で共通して利用可能なアノテーションが定期された</li><li>例えば<ul><li>インスタンスの生成時、破棄時になんらかの処理を行うことを規定したもの</li><li>処理に対する実行権限を規定したもの</li><li>データベース設定を規定したもの</li></ul></li><li>これらのアノテーションを利用して宣言的にプログラミングを行う</li></ul></li><li><p>Managed Bean</p><ul><li>Common Annotationの中に、Managed Beanというアノテーションがある</li><li>JavaEE環境で管理されているBeanであることが明示される</li><li>Managed Beanは、アプリケーション・サーバーで管理されているリソースの参照や、インスタンスのライフサイクル管理ができる</li><li><strong>通常、Managed Beanのアノテーションを付加したクラスを実装することはほとんど無い</strong><ul><li>しかし、Managed Beanの機能を持つ上位機能（CDI、EJB）でManaged Beanの機能を利用する</li></ul></li></ul></li><li><p>Interceptors</p><ul><li>複数の機能間で横断的な関心事の実装を行うための機能です。</li><li>例えば<ul><li>ログの出力や各処理時間の計測、セキュリティの検査などは、特定部分の実装に限らず、システムの全体で必要な実装</li></ul></li></ul></li><li><p>Concurrency Utilities for Java EE</p><ul><li>JavaEE環境で新たにスレッドを生成するための機能</li><li>JavaEE6まではサーバー環境上で新たなスレッドを生成することは非推奨でした。なぜならば、作成されたスレッドがアプリケーション・サーバーから管理できないスレッドとして動作するためでした</li><li>たとえば<ul><li>セキュリティ情報や、トランザクション情報、コンテキスト情報などを一切含まないため、アプリケーション・サーバーから制御することは不可能</li></ul></li><li>そこで、サーバーが管理できるスレッドを作るために、JavaEE7からConcurrency Utilities for Java EEが新たに導入された</li></ul></li></ul><h4 id="1-2-3-Java-EE-の仕様策定"><a href="#1-2-3-Java-EE-の仕様策定" class="headerlink" title="1.2.3 Java EE の仕様策定"></a>1.2.3 Java EE の仕様策定</h4><ul><li><p>Javaの仕様はJCP(Java Community Process)という団体で管理</p><ul><li>Java Specification Requests(JSR)と呼ぶ仕様のリクエストに対して、一意の番号を割り当てて管理している</li></ul></li><li><p>JSRをJCPに提出するために必要な成果物について記載（割愛）</p></li></ul><h4 id="1-2-4-Java-EEの実行環境とプロファイル"><a href="#1-2-4-Java-EEの実行環境とプロファイル" class="headerlink" title="1.2.4 Java EEの実行環境とプロファイル"></a>1.2.4 Java EEの実行環境とプロファイル</h4><ul><li>割愛</li></ul><h3 id="1-3-Java-EEアプリケーション開発の基本"><a href="#1-3-Java-EEアプリケーション開発の基本" class="headerlink" title="1.3 Java EEアプリケーション開発の基本"></a>1.3 Java EEアプリケーション開発の基本</h3><h4 id="1-3-1-Java-EEアプリケーションモデル"><a href="#1-3-1-Java-EEアプリケーションモデル" class="headerlink" title="1.3.1 Java EEアプリケーションモデル"></a>1.3.1 Java EEアプリケーションモデル</h4><ul><li>3階層アプリケーションの開発モデルを採用している<ul><li>ビジネスロジックとユーザーインターフェースを切り分けて実装することが大事</li><li>柔軟性の高いシステムを構築していくことが大事</li></ul></li></ul><h3 id="1-4-開発環境の準備"><a href="#1-4-開発環境の準備" class="headerlink" title="1.4 開発環境の準備"></a>1.4 開発環境の準備</h3><ul><li>サンプルアプリケーション<ul><li>JavaSE8</li><li>JavaEE7</li><li>GlassFishv4.1.1 (JavaEE参照実装)</li></ul></li></ul><h4 id="1-4-1-Oracle-JDKのインストール"><a href="#1-4-1-Oracle-JDKのインストール" class="headerlink" title="1.4.1 Oracle JDKのインストール"></a>1.4.1 Oracle JDKのインストール</h4><h4 id="1-4-2-NetBeansのインストール"><a href="#1-4-2-NetBeansのインストール" class="headerlink" title="1.4.2 NetBeansのインストール"></a>1.4.2 NetBeansのインストール</h4><h4 id="1-4-3-NetBeansの起動"><a href="#1-4-3-NetBeansの起動" class="headerlink" title="1.4.3 NetBeansの起動"></a>1.4.3 NetBeansの起動</h4><h3 id="1-5-サンプルアプリケーションの概要"><a href="#1-5-サンプルアプリケーションの概要" class="headerlink" title="1.5 サンプルアプリケーションの概要"></a>1.5 サンプルアプリケーションの概要</h3><h4 id="1-5-1-ナレッジバンク"><a href="#1-5-1-ナレッジバンク" class="headerlink" title="1.5.1 ナレッジバンク"></a>1.5.1 ナレッジバンク</h4><ul><li><p>個人が保有する知識情報（ナレッジ）を共有するためのWebアプリケーション</p></li><li><p>JavaEE7で一般的なWebアプリケーションを実装するために必要な機能を使用して構築されている</p></li><li><p>画面遷移などの説明</p></li></ul><h4 id="1-5-2-ナレッジバンクのセットアップ"><a href="#1-5-2-ナレッジバンクのセットアップ" class="headerlink" title="1.5.2 ナレッジバンクのセットアップ"></a>1.5.2 ナレッジバンクのセットアップ</h4><ul><li>プロジェクトを読み込み</li></ul><h3 id="1-6-まとめ"><a href="#1-6-まとめ" class="headerlink" title="1.6 まとめ"></a>1.6 まとめ</h3><ul><li>この章のまとめを記載（割愛）</li></ul><h2 id="Chapter-2-プレゼンテーション層の開発――JSFの基本"><a href="#Chapter-2-プレゼンテーション層の開発――JSFの基本" class="headerlink" title="Chapter 2 プレゼンテーション層の開発――JSFの基本"></a>Chapter 2 プレゼンテーション層の開発――JSFの基本</h2><ul><li>以下の３層に分けて開発を行う<ul><li>プレゼンテーション層</li><li>ビジネスロジック層</li><li>インテグレーション層</li></ul></li></ul><h3 id="2-1-JSF概要"><a href="#2-1-JSF概要" class="headerlink" title="2.1 JSF概要"></a>2.1 JSF概要</h3><h4 id="2-1-1-JavaSErver-Faces-JSF-とは"><a href="#2-1-1-JavaSErver-Faces-JSF-とは" class="headerlink" title="2.1.1 JavaSErver Faces(JSF)とは"></a>2.1.1 JavaSErver Faces(JSF)とは</h4><ul><li><p>JSFとはJavaEE5から追加されたプレゼンテーション層を作成するための仕様</p><ul><li>今まではServletを使用していた<ul><li>サーブレットとは：ブラウザとHTTP通信を行う基礎的な仕様で、最小限の機能を提供<ul><li>入力値とJavaオブジェクトのマッピング</li><li>入力値のチェック</li><li>エラーメッセージのハンドリング<ul><li>など多くの機能が不足していた</li></ul></li></ul></li></ul></li></ul></li><li><p>Column MVC1.0</p><ul><li>次のバージョンのJavaEE8には、「MVC1.0」というプレゼンテーション層を開発する新しい仕様が加わる予定</li><li>Webアプリケーションを開発するフレームワークには、HTTPの通信に紐付けて処理を記述するアクションベースのフレームワーク</li><li>入力フィールドやボタンに紐付けて処理を記述するコンポーネントベースのフレームワークがある</li><li>本書で記述するJSFはコンポーネントベースのフレームワーク</li><li>そのため開発者から、アクションベースの選択肢も必要という意見があがり、JavaEE8でアクションベースのフレームワークである「MVC1.0」を追加することになった</li></ul></li></ul><h3 id="2-2-JSFの構成要素"><a href="#2-2-JSFの構成要素" class="headerlink" title="2.2 JSFの構成要素"></a>2.2 JSFの構成要素</h3><h4 id="2-2-1-画面と処理（フェースレットとマネージドビーン）"><a href="#2-2-1-画面と処理（フェースレットとマネージドビーン）" class="headerlink" title="2.2.1 画面と処理（フェースレットとマネージドビーン）"></a>2.2.1 画面と処理（フェースレットとマネージドビーン）</h4><ul><li><p>フェースレットとは</p><ul><li>画面レイアウトを記述するXHTMLベースのテンプレートエンジン</li><li>XHTMLとは、HTMLをXMLの文法に適合するように定義し直したもの</li></ul></li><li><p>フェースレットとBeanがどのように紐付いているかを確認</p></li><li><p>Column マネージドビーンとバッキングビーン</p><ul><li>フェースレット似バインドするJavaクラスはマネージドビーンといいますが、</li><li>フェースレットの裏側で処理を行うという意味で、バッキングビーンと呼ばれることもあります。</li><li>マネージドビーンがCDIでも代用できるようになった頃からJSFで使用するマネージドビーンをバッキングビーンと呼ぶことが多くなった</li></ul></li></ul><h4 id="2-2-2-マネージドビーンとスコープ"><a href="#2-2-2-マネージドビーンとスコープ" class="headerlink" title="2.2.2 マネージドビーンとスコープ"></a>2.2.2 マネージドビーンとスコープ</h4><ul><li><p>スコープ：マネージドビーンのデータをいつまで保有するかを指定する</p></li><li><p>スコープの一覧の紹介</p></li></ul><h3 id="2-3-JSFの画面遷移"><a href="#2-3-JSFの画面遷移" class="headerlink" title="2.3 JSFの画面遷移"></a>2.3 JSFの画面遷移</h3><h4 id="2-3-1-画面遷移の方法"><a href="#2-3-1-画面遷移の方法" class="headerlink" title="2.3.1 画面遷移の方法"></a>2.3.1 画面遷移の方法</h4><ul><li><p>JSFで次の画面に遷移する場合、遷移先の名前を文字列で指定</p><ul><li>この画面遷移に使用する文字列を「outcome値」といいます</li><li>遷移するフェースレットのパスを指定</li></ul></li><li><p>静的な遷移</p><ul><li>マネージドビーンの処理を行わずに直接次の画面に遷移する方法</li></ul></li><li><p>動的な遷移</p><ul><li>マネージドビーンで処理を行い、その結果を基に任意の画面へ遷移する方法</li><li>EL式でメソッドをバインドしている</li></ul></li></ul><h4 id="2-3-2-画面のリダイレクト"><a href="#2-3-2-画面のリダイレクト" class="headerlink" title="2.3.2 画面のリダイレクト"></a>2.3.2 画面のリダイレクト</h4><ul><li><p>画面遷移</p><ul><li>フォワード：処理後に直接Web画面を生成して結果を返す</li><li>リダイレクト：一度ブラウザに処理を返した後にサーバーに再アクセスしてWeb画面を生成する</li></ul></li><li><p>JSFではリダイレクトを使用して次の画面に遷移する方法を提供している</p><ul><li>１画面前のURLを表示することを避けるためにこの機能を提供<ul><li><code>?faces-redirect=true</code>というパラメータを付与すると動くらしい</li></ul></li><li>問題：リクエストスコープが効かなくなる<ul><li>対策：フラッシュスコープという特別なスコープを提供している</li></ul></li></ul></li></ul><h3 id="2-4-JSFの内部処理"><a href="#2-4-JSFの内部処理" class="headerlink" title="2.4 JSFの内部処理"></a>2.4 JSFの内部処理</h3><h4 id="2-4-1-コンポーネント指向"><a href="#2-4-1-コンポーネント指向" class="headerlink" title="2.4.1 コンポーネント指向"></a>2.4.1 コンポーネント指向</h4><ul><li><p>JSFではWebアプリケーションをより直感的に開発するためにコンポーネントという考え方を導入している</p></li><li><p>メリット</p><ul><li>Web画面と処理の紐付けを直感的に行える（HTTPの理解が不要）</li><li>コンポーネントが再利用しやすい</li><li>Web画面のプロトタイプ作成が容易に行える</li></ul></li><li><p>コンポーネントツリーとしてアクセスできるJavaクラスが存在するらしい</p></li></ul><h4 id="2-4-2-ライフサイクル"><a href="#2-4-2-ライフサイクル" class="headerlink" title="2.4.2 ライフサイクル"></a>2.4.2 ライフサイクル</h4><ol><li>ビューの復元(Restore View)</li><li>リクエスト値の適用(Apply Request Values)</li><li>入力チェック(Process Validations)</li><li>モデル値の更新(Update Model Values)</li><li>アプリケーションの実施(Invoke Application)</li><li>画面の生成(REnder Response)</li></ol><ul><li>最初のアクセスの場合<ul><li>①の復元フェーズ終了後に、⑥の画面生成フェーズに進み、画面を表示</li></ul></li><li>ポストバックの場合<ul><li>すでにコンポーネントツリーがあり、値の入力やボタンの操作が実施されているので、</li><li>①→⑥まで順番に実施</li></ul></li></ul><h3 id="2-5-JSFの基本設定"><a href="#2-5-JSFの基本設定" class="headerlink" title="2.5 JSFの基本設定"></a>2.5 JSFの基本設定</h3><h4 id="2-5-1-フォルダ構成"><a href="#2-5-1-フォルダ構成" class="headerlink" title="2.5.1 フォルダ構成"></a>2.5.1 フォルダ構成</h4><ul><li><p>JSFを使用したWebアプリケーションを作成するにはWAR形式のプロジェクトを作成</p></li><li><p>EAR形式もある</p><ul><li>複数のWARファイルやJARファイルを１つにまとめてZIPにしたもの</li></ul></li></ul><h4 id="2-5-2-設定ファイル"><a href="#2-5-2-設定ファイル" class="headerlink" title="2.5.2 設定ファイル"></a>2.5.2 設定ファイル</h4><ul><li><p>必要な設定ファイル</p><ul><li>web.xml</li><li>faces-config.xml</li><li>アプリケーションサーバーの設定ファイル</li></ul></li><li><p>web.xml</p><ul><li>デプロイメントディスクリプタというWebアプリケーションの設定を記述するファイル<ul><li>webアプリケーションの初期設定</li><li>サーブレットの設定</li><li>セキュリティの設定</li></ul></li><li>WebアプリケーションでJSFを使用する場合は、web.xmlにJSFが提供するFacesServletを設定</li></ul></li><li><p>サーブレットの定義</p><ul><li>JSFは内部でサーブレットを使用している</li><li>そのためJSFを使用するにはJSFのサーブレット指定が必要</li><li>ロードオンスタートアップの指定はサーバーの起動時にサーブレットのインスタンス化と初期化を行うという指定</li></ul></li><li><p>サーブレットのマッピング定義</p><ul><li>URLパターンとサーブレットの定義で指定したサーブレット名を指定</li><li>URLパターンは「&#x2F;faces&#x2F;*」という指定がJSFでは一般的らしい</li><li>facesで始まっている場合に、JSFのアクセスであるとみなされる</li></ul></li><li><p>faces-config.xml</p><ul><li>JSFの設定を記述するファイル<ul><li>国際化のせてい</li><li>フェーズリスなのクラス指定など</li></ul></li></ul></li><li><p>アプリケーション・サーバー用の設定ファイル</p></li></ul><h4 id="2-5-3-リソースフォルダ"><a href="#2-5-3-リソースフォルダ" class="headerlink" title="2.5.3 リソースフォルダ"></a>2.5.3 リソースフォルダ</h4><ul><li>JSFの仕様で<code>resources</code>フォルダに配置するフォルダ構成が決められているらしい</li><li><code>resouces/[ローカルプレフィックス]/[ライブラリ名]/[ライブラリバージョン]/[リソース名]/[リソースバージョン]</code><ul><li>→わかりにくいと感じた</li></ul></li></ul><h3 id="2-6-フェースレットタグライブラリ"><a href="#2-6-フェースレットタグライブラリ" class="headerlink" title="2.6 フェースレットタグライブラリ"></a>2.6 フェースレットタグライブラリ</h3><h4 id="2-6-1-タグライブラリの種類"><a href="#2-6-1-タグライブラリの種類" class="headerlink" title="2.6.1 タグライブラリの種類"></a>2.6.1 タグライブラリの種類</h4><ul><li><p>タグライブラリ</p><ul><li>画面レイアウトで使用するタグを定義したもの</li></ul></li><li><p>種類</p><ul><li>コアタグライブラリ：他のタグライブラリのサポート的な機能を提供するタグライブラリ</li><li>HTMLタグライブラリ：HTMLのタグを生成するタグライブラリ</li><li>フェースレットテンプレーティングタグライブラリ：画面のテンプレート処理や繰り返し処理などを提供するタグライブラリ</li><li>コンポジットコンポーネントタグライブラリ：コンポジットコンポーネントの作成に使用するタグライブラリ</li><li>JSTLコア&#x2F;ファンクションタグライブラリ：JSPで使用するタグライブラリ</li></ul></li><li><p>最も使用頻度が高いのは「HTMLタグライブラリ</p></li><li><p>JSTLコア&#x2F;ファンクションタグライブラリ：JSPというJavaEEの仕様で使用するライブラリでJSFでも使用できるが、他のフェースレットが提供するタグライブラリとの実行タイミングが違うため不具合が発生しやすく、基本的に利用しない</p></li><li><p>※ここで再確認</p><ul><li>JSF<ul><li>フェースレット<ul><li>フェースレットタグライブラリ</li><li>EL式</li></ul></li><li>マネージドビーン</li></ul></li></ul></li><li><p>タグライブラリを利用するには、冒頭でネームスペースの宣言が必要</p></li></ul><h4 id="2-6-2-HTMLタグライブラリ"><a href="#2-6-2-HTMLタグライブラリ" class="headerlink" title="2.6.2 HTMLタグライブラリ"></a>2.6.2 HTMLタグライブラリ</h4><ul><li>一覧を表で記載（割愛）</li></ul><h4 id="2-6-3-ヘッダーとボディ"><a href="#2-6-3-ヘッダーとボディ" class="headerlink" title="2.6.3 ヘッダーとボディ"></a>2.6.3 ヘッダーとボディ</h4><p><code>&lt;h:head&gt;</code><br><code>&lt;h:body&gt;</code></p><h4 id="2-6-4-リソース"><a href="#2-6-4-リソース" class="headerlink" title="2.6.4 リソース"></a>2.6.4 リソース</h4><h4 id="2-6-5-文字の出力"><a href="#2-6-5-文字の出力" class="headerlink" title="2.6.5 文字の出力"></a>2.6.5 文字の出力</h4><h4 id="2-6-6-リンクとボタン"><a href="#2-6-6-リンクとボタン" class="headerlink" title="2.6.6 リンクとボタン"></a>2.6.6 リンクとボタン</h4><p>(割愛)</p><h3 id="2-7-EL（Expression-Language）"><a href="#2-7-EL（Expression-Language）" class="headerlink" title="2.7 EL（Expression Language）"></a>2.7 EL（Expression Language）</h3><h4 id="2-7-1-ELとは"><a href="#2-7-1-ELとは" class="headerlink" title="2.7.1 ELとは"></a>2.7.1 ELとは</h4><ul><li>ELとは、演算の結果や値の参照結果を返却するための簡易記法</li><li><code>#</code>または、<code>$</code>で始まり、波括弧で囲んだ中に式を記述<ul><li><code>$</code>を使用した場合：ページがレンダリングされた時点で即時評価</li><li><code>#</code>を使用した場合：コンポーネントに式として渡され、ライフサイクルのタイミングで遅延評価される<ul><li>JSFでは基本的に<code>$</code>を使用せずに、<code>#</code>を使用する</li></ul></li></ul></li></ul><h4 id="2-7-2-オブジェクトの参照"><a href="#2-7-2-オブジェクトの参照" class="headerlink" title="2.7.2 オブジェクトの参照"></a>2.7.2 オブジェクトの参照</h4><ul><li><code>@Named</code>を付与したマネージドビーンの名前はEL式から参照できる</li></ul><h4 id="2-7-3-暗黙オブジェクト"><a href="#2-7-3-暗黙オブジェクト" class="headerlink" title="2.7.3 暗黙オブジェクト"></a>2.7.3 暗黙オブジェクト</h4><ul><li>暗黙的に参照可能なオブジェクト一覧を記載（割愛）</li></ul><h4 id="2-7-4-演算子"><a href="#2-7-4-演算子" class="headerlink" title="2.7.4 演算子"></a>2.7.4 演算子</h4><ul><li>算術演算子</li><li>関係演算子</li><li>論理演算子</li><li>三項演算子</li><li>空演算子<ul><li><code>empty a</code> : aがNullまたは空文字の場合trueを返す</li></ul></li></ul><h4 id="2-7-5-メソッドの呼び出し"><a href="#2-7-5-メソッドの呼び出し" class="headerlink" title="2.7.5 メソッドの呼び出し"></a>2.7.5 メソッドの呼び出し</h4><ul><li>メソッドも呼び出せるよって言う説明（割愛）</li></ul><h2 id="Chapter-3-プレゼンテーション層の開発――JSFの応用-その1"><a href="#Chapter-3-プレゼンテーション層の開発――JSFの応用-その1" class="headerlink" title="Chapter 3 プレゼンテーション層の開発――JSFの応用 その1"></a>Chapter 3 プレゼンテーション層の開発――JSFの応用 その1</h2><h3 id="3-1-入力チェック"><a href="#3-1-入力チェック" class="headerlink" title="3.1 入力チェック"></a>3.1 入力チェック</h3><h4 id="3-1-1-入力チェック（バリデーション）とは"><a href="#3-1-1-入力チェック（バリデーション）とは" class="headerlink" title="3.1.1 入力チェック（バリデーション）とは"></a>3.1.1 入力チェック（バリデーション）とは</h4><ul><li>JSFのライフサイクルの中にある</li><li>JSFでは入力した値をチェックする機能を提供している</li><li>バリデーションの方法として以下の２つを提供<ul><li>JSFの初期から提供されているJSFのバリデーション</li><li>JavaEE6で導入されたビーンバリデーション★</li></ul></li></ul><h4 id="3-1-2-JSFのバリデーション"><a href="#3-1-2-JSFのバリデーション" class="headerlink" title="3.1.2 JSFのバリデーション"></a>3.1.2 JSFのバリデーション</h4><ul><li>バリデーションタグを利用する（割愛）</li></ul><h4 id="3-1-3-JSFのカスタムバリデータ"><a href="#3-1-3-JSFのカスタムバリデータ" class="headerlink" title="3.1.3 JSFのカスタムバリデータ"></a>3.1.3 JSFのカスタムバリデータ</h4><ul><li>細かなチェックをするために独自でバリデータを作成する方法<ul><li>メソッドを作成する方法</li><li>クラスを作成する方法</li></ul></li></ul><h4 id="3-1-4-ビーンバリデーションとは"><a href="#3-1-4-ビーンバリデーションとは" class="headerlink" title="3.1.4 ビーンバリデーションとは"></a>3.1.4 ビーンバリデーションとは</h4><ul><li>ビーンのフィールドにアノテーションを付与するだけでチェックができる</li></ul><h4 id="3-1-5-ビーンバリデーションのバリデータ"><a href="#3-1-5-ビーンバリデーションのバリデータ" class="headerlink" title="3.1.5 ビーンバリデーションのバリデータ"></a>3.1.5 ビーンバリデーションのバリデータ</h4><ul><li><p>ビーンバリデーションのアノテーション一覧</p><ul><li><code>@NotNull</code></li><li><code>@Null</code></li><li><code>@Max</code></li><li><code>@Min</code></li><li><code>.....</code></li></ul></li><li><p>point: 入力値が空文字の場合NULL値として扱う場合、web.xmlにパラメータを追加する必要がある</p><ul><li><code>javax.faces.INTERPRET_EMPTY_STRING_SUBMITED_VALUES_AS_NULL</code></li></ul></li></ul><h4 id="3-1-6-ビーンバリデーションのエラーメッセージ変更"><a href="#3-1-6-ビーンバリデーションのエラーメッセージ変更" class="headerlink" title="3.1.6 ビーンバリデーションのエラーメッセージ変更"></a>3.1.6 ビーンバリデーションのエラーメッセージ変更</h4><ul><li>メッセージを変更する方法は２つある<ul><li>アノテーションに、<code>message</code>属性を指定する</li><li>propertiesファイルで管理する<ul><li>多言語対応などする場合、こちらが得策</li></ul></li></ul></li></ul><h4 id="3-1-7-ビーンバリデーションのバリデータ統合"><a href="#3-1-7-ビーンバリデーションのバリデータ統合" class="headerlink" title="3.1.7 ビーンバリデーションのバリデータ統合"></a>3.1.7 ビーンバリデーションのバリデータ統合</h4><ul><li>MEMO: ★このテクニックは覚えておきたい</li><li>入力チェックに複数の条件がある場合には、フィールドに標準のアノテーションを複数設定するが、同じような条件を何度も設定するのは面倒なので、アノテーションを作成してまとめる</li></ul><h4 id="3-1-8-ビーンバリデーションのカスタマイズバリデータ"><a href="#3-1-8-ビーンバリデーションのカスタマイズバリデータ" class="headerlink" title="3.1.8 ビーンバリデーションのカスタマイズバリデータ"></a>3.1.8 ビーンバリデーションのカスタマイズバリデータ</h4><ul><li>ビーンバリデーションのカスタマイズも可能<ul><li>MEMO:（実装方法省略）</li></ul></li></ul><h3 id="3-2-コンバータ"><a href="#3-2-コンバータ" class="headerlink" title="3.2 コンバータ"></a>3.2 コンバータ</h3><h4 id="3-2-1-コンバータの役割"><a href="#3-2-1-コンバータの役割" class="headerlink" title="3.2.1 コンバータの役割"></a>3.2.1 コンバータの役割</h4><ul><li><p>Web画面に表示する文字列とマネージドビーンのプロパティで保持するJavaのオブジェクトを変換するための仕組み</p></li><li><p>JSFにより自動的に変換されるオブジェクトも存在する</p><ul><li>short</li><li>int</li><li>long</li><li>float</li><li>double</li><li>boolean</li><li>byte</li><li>char</li><li>BigInteger</li><li>BigDecimal</li></ul></li><li><p>JSFでは任意のフォーマットで画面表示を行うため、標準のコンバータを提供している</p></li></ul><h4 id="3-2-2-標準のコンバータ"><a href="#3-2-2-標準のコンバータ" class="headerlink" title="3.2.2 標準のコンバータ"></a>3.2.2 標準のコンバータ</h4><ul><li>JSFが標準で提供するコンバータは、日付や数値とおじ列を相互に変換するコンバータ<ul><li>f:convertDateTime</li><li>f:convertNumber</li></ul></li></ul><h4 id="3-2-3-カスタムコンバータ"><a href="#3-2-3-カスタムコンバータ" class="headerlink" title="3.2.3 カスタムコンバータ"></a>3.2.3 カスタムコンバータ</h4><ul><li><p>独自で作成したクラスなどの標準のコンバータでは対応できないクラスでは、独自にコンバータを作成する</p><ul><li>JSFが提供する<code>javax.faces.convert.Converter</code>インターフェースを実装したクラスを作成する</li></ul></li><li><p>MEMO: 確かに変換が必要な場面は絶対あるはずなので、thymeleafとかがどのように変換を持っているか確認する</p><ul><li>他のフレームワークでも、convertを実装する方法を書いていた<ul><li><a href="https://qiita.com/alpha_pz/items/21c6eda2fe227abfa403">https://qiita.com/alpha_pz/items/21c6eda2fe227abfa403</a></li></ul></li></ul></li><li><p>MEMO: DBSlectした結果をList(category)にかかえているような書き方をしている</p></li></ul><h3 id="3-3-コンポーネントのカスタマイズ"><a href="#3-3-コンポーネントのカスタマイズ" class="headerlink" title="3.3 コンポーネントのカスタマイズ"></a>3.3 コンポーネントのカスタマイズ</h3><ul><li>JSFではフェースレットが提供するコンポーネントを使用してWeb画面を作成</li><li>独自のコンポーネントを作成することもできる</li><li>方法として２つある<ul><li>コンポーネントクラスを作成するカスタムコンポーネント</li><li>フェースレットでコンポーネントを組み合わせて作成するコンポジットコンポーネント★</li></ul></li></ul><h4 id="3-3-1-コンポジットコンポーネント"><a href="#3-3-1-コンポジットコンポーネント" class="headerlink" title="3.3.1 コンポジットコンポーネント"></a>3.3.1 コンポジットコンポーネント</h4><ul><li>１つのフェースレットファイルを作成するだけで、複数の画面で使い回せるコンポーネントを作成することができる<ul><li>MEMO: thymeleafでincludeしている感じと同じ</li></ul></li></ul><h4 id="3-3-2-より高度なコンポジットコンポーネント"><a href="#3-3-2-より高度なコンポジットコンポーネント" class="headerlink" title="3.3.2 より高度なコンポジットコンポーネント"></a>3.3.2 より高度なコンポジットコンポーネント</h4><figure class="highlight xhtml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- テンプレート側 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:h</span>=<span class="string">"http://xmlns.jcp.org/jsf/html"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:knowledge</span>=<span class="string">"http://xmlns.jcp.org/jsf/composite/knowledgecomp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h:head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h:outputStylesheet</span> <span class="attr">library</span>=<span class="string">"css"</span> <span class="attr">name</span>=<span class="string">"style.css"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h:outputScript</span> <span class="attr">name</span>=<span class="string">"jsf.js"</span> <span class="attr">library</span>=<span class="string">"javax.faces"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h:outputScript</span> <span class="attr">library</span>=<span class="string">"js"</span> <span class="attr">name</span>=<span class="string">"application.js"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Knowledge Bank<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h:head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h:body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"top_content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h:form</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h:graphicImage</span> <span class="attr">library</span>=<span class="string">"img"</span> <span class="attr">name</span>=<span class="string">"logo.png"</span> /&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"notice"</span>&gt;</span></span><br><span class="line">                    #&#123;flash.notice&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">knowledge:login</span> <span class="attr">userId</span>=<span class="string">"#&#123;loginBean.userId&#125;"</span> <span class="attr">password</span>=<span class="string">"#&#123;loginBean.password&#125;"</span> <span class="attr">loginButtonAction</span>=<span class="string">"#&#123;loginBean.login()&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h:link</span> <span class="attr">outcome</span>=<span class="string">"account/register"</span> <span class="attr">value</span>=<span class="string">"アカウント登録"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">h:form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h:body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xhtml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 利用する側 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:h</span>=<span class="string">"http://xmlns.jcp.org/jsf/html"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:knowledge</span>=<span class="string">"http://xmlns.jcp.org/jsf/composite/knowledgecomp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h:head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h:outputStylesheet</span> <span class="attr">library</span>=<span class="string">"css"</span> <span class="attr">name</span>=<span class="string">"style.css"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h:outputScript</span> <span class="attr">name</span>=<span class="string">"jsf.js"</span> <span class="attr">library</span>=<span class="string">"javax.faces"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h:outputScript</span> <span class="attr">library</span>=<span class="string">"js"</span> <span class="attr">name</span>=<span class="string">"application.js"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Knowledge Bank<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h:head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h:body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"top_content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h:form</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h:graphicImage</span> <span class="attr">library</span>=<span class="string">"img"</span> <span class="attr">name</span>=<span class="string">"logo.png"</span> /&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"notice"</span>&gt;</span></span><br><span class="line">                    #&#123;flash.notice&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">knowledge:login</span> <span class="attr">userId</span>=<span class="string">"#&#123;loginBean.userId&#125;"</span> <span class="attr">password</span>=<span class="string">"#&#123;loginBean.password&#125;"</span> <span class="attr">loginButtonAction</span>=<span class="string">"#&#123;loginBean.login()&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h:link</span> <span class="attr">outcome</span>=<span class="string">"account/register"</span> <span class="attr">value</span>=<span class="string">"アカウント登録"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">h:form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h:body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Column: コンポーネントで利用可能な暗黙オブジェクト<ul><li>カスタムコンポーネント内でよく利用する暗黙オブジェクト<ul><li>cc: コンポジットコンポーネントの情報が取得できる</li><li>component: 現在のコンポーネントの情報や、親や子のコンポーネントの情報にアクセスすることができる</li></ul></li></ul></li></ul><h3 id="3-4-フェースレットテンプレート"><a href="#3-4-フェースレットテンプレート" class="headerlink" title="3.4 フェースレットテンプレート"></a>3.4 フェースレットテンプレート</h3><h4 id="3-4-1-フェースレットテンプレートの利用"><a href="#3-4-1-フェースレットテンプレートの利用" class="headerlink" title="3.4.1 フェースレットテンプレートの利用"></a>3.4.1 フェースレットテンプレートの利用</h4><ul><li>ヘッダーやサイドバーなどはテンプレート化して管理する説明<ul><li>こっちがthymeleafのincludeに近い</li></ul></li></ul><h3 id="3-5-HTML5フレンドリマークアップ"><a href="#3-5-HTML5フレンドリマークアップ" class="headerlink" title="3.5 HTML5フレンドリマークアップ"></a>3.5 HTML5フレンドリマークアップ</h3><ul><li>JavaEE7(JSF2.2)からHTML5の進化へ対応するためにフレンドリマークアップという機能が導入された<ul><li>以前のJSFでは任意の属性をHTMLとして出力する場合にコンポーネントをカスタマイズして提供していた</li></ul></li><li>画面デザインをWebデザイナーが行い、リッチなWeb画面を作ることが一般化</li></ul><h4 id="3-5-1-パススルーアトリビュート"><a href="#3-5-1-パススルーアトリビュート" class="headerlink" title="3.5.1 パススルーアトリビュート"></a>3.5.1 パススルーアトリビュート</h4><h4 id="3-5-2-パススルーエレメント"><a href="#3-5-2-パススルーエレメント" class="headerlink" title="3.5.2 パススルーエレメント"></a>3.5.2 パススルーエレメント</h4><h3 id="3-6-Ajax"><a href="#3-6-Ajax" class="headerlink" title="3.6 Ajax"></a>3.6 Ajax</h3><h4 id="3-6-1-JSFのAjax対応"><a href="#3-6-1-JSFのAjax対応" class="headerlink" title="3.6.1 JSFのAjax対応"></a>3.6.1 JSFのAjax対応</h4><ul><li><p>一般的なAjaxの作りでは、データの取得処理や画面の再描画処理をJavascriptで記述する必要がある</p></li><li><p>JSFのAjax機能を利用するとJavascriptをほとんど記述せずにWeb画面の部分更新が可能</p></li><li><p>Ajax専用のタグを使用して、結果をRenderingしている</p></li><li><p>MEMO: 専用のタグでAjax処理ができるのは、コンポーネントベースのフレームワークであるJSFの特徴だと感じた</p></li></ul><h4 id="3-6-2-Ajaxを使用した入力チェック"><a href="#3-6-2-Ajaxを使用した入力チェック" class="headerlink" title="3.6.2 Ajaxを使用した入力チェック"></a>3.6.2 Ajaxを使用した入力チェック</h4><h4 id="3-6-3-Ajaxのイベントハンドリング"><a href="#3-6-3-Ajaxのイベントハンドリング" class="headerlink" title="3.6.3 Ajaxのイベントハンドリング"></a>3.6.3 Ajaxのイベントハンドリング</h4><ul><li>イベント実行中や完了、エラー発生時の処理を記述するための方法</li><li>共通化するための方法を紹介</li></ul><h2 id="Chapter-4-プレゼンテーション層の開発――JSFの応用-その2"><a href="#Chapter-4-プレゼンテーション層の開発――JSFの応用-その2" class="headerlink" title="Chapter 4 プレゼンテーション層の開発――JSFの応用 その2"></a>Chapter 4 プレゼンテーション層の開発――JSFの応用 その2</h2><h3 id="4-1-認証／認可"><a href="#4-1-認証／認可" class="headerlink" title="4.1 認証／認可"></a>4.1 認証／認可</h3><h4 id="4-1-1-認証-x2F-認可の仕組み"><a href="#4-1-1-認証-x2F-認可の仕組み" class="headerlink" title="4.1.1 認証&#x2F;認可の仕組み"></a>4.1.1 認証&#x2F;認可の仕組み</h4><ul><li><p>JavaEEのログイン機能を実現するための認証認可の仕組みについて</p></li><li><p>ログイン機能を利用する手順</p><ol><li>アプリケーションサーバーの認証&#x2F;認可設定をする。</li><li>アプリケーションの認証&#x2F;認可設定をする。</li><li>プログラムでログイン&#x2F;ログアウト機能を作成する。</li></ol></li></ul><h4 id="4-1-2-アプリケーションサーバーの認証設定"><a href="#4-1-2-アプリケーションサーバーの認証設定" class="headerlink" title="4.1.2 アプリケーションサーバーの認証設定"></a>4.1.2 アプリケーションサーバーの認証設定</h4><ul><li><p>アプリケーション・サーバーに認証の設定を行う必要がある</p><ul><li>認証データの指定先に<ul><li>ファイル</li><li>データベース</li><li>LDAPサーバー　などを指定する</li></ul></li></ul></li><li><p>ナレッジバンクではデータベースを指定している</p></li><li><p>Glasfishを使用した認証の設定方法を説明</p></li><li><p>Glasfishの管理コンソール</p><ul><li><code>http://localhost:4848/</code></li></ul></li><li><p>認証設定を行うには</p><ul><li>Configurations＞server-config＞Security＞Realms＞New</li></ul></li><li><p>ナレッジバンクではJDBCレルムを使用するので</p><ul><li>ClassNameにJDBCRealmを選択する</li></ul></li></ul><h4 id="4-1-3-アプリケーションの認証設定"><a href="#4-1-3-アプリケーションの認証設定" class="headerlink" title="4.1.3 アプリケーションの認証設定"></a>4.1.3 アプリケーションの認証設定</h4><ul><li>アプリケーションサーバーの認証設定が終了したら、</li><li>今度はアプリケーションの認証設定を行う</li></ul><h4 id="4-1-4-ログイン-x2F-ログアウト機能の作成"><a href="#4-1-4-ログイン-x2F-ログアウト機能の作成" class="headerlink" title="4.1.4 ログイン&#x2F;ログアウト機能の作成"></a>4.1.4 ログイン&#x2F;ログアウト機能の作成</h4><ul><li><p>Oracle18cで接続を試していたがどうしてもうまく行かなかった</p></li><li><p>Oracle11gだとすぐにうまく行った</p></li><li><p>ログインの仕組みを作って、</p></li><li><p>実際にloginのfaceletでコンテキストのログインメソッドを呼び出して、認証を済ませる</p><ul><li>MEMO: springsecurityみたいなやつ　認証設定は必ず実装しておく</li></ul></li></ul><h3 id="4-2-国際化"><a href="#4-2-国際化" class="headerlink" title="4.2 国際化"></a>4.2 国際化</h3><h4 id="4-2-1-JSFの国際化"><a href="#4-2-1-JSFの国際化" class="headerlink" title="4.2.1 JSFの国際化"></a>4.2.1 JSFの国際化</h4><ul><li>プロパティファイルでロケール管理して、<code>faces-config.xml</code>で切り替え</li><li>UIViewRootクラスのgetLocaleメソッドやsetLocaleメソッドでも切り替えることができるみたい<ul><li>MEMO: ロケール切り替えは実装しておくべき</li></ul></li></ul><h3 id="4-3-ブックマーカビリティ"><a href="#4-3-ブックマーカビリティ" class="headerlink" title="4.3 ブックマーカビリティ"></a>4.3 ブックマーカビリティ</h3><h4 id="4-3-1-ブックマーカビリティとは"><a href="#4-3-1-ブックマーカビリティとは" class="headerlink" title="4.3.1 ブックマーカビリティとは"></a>4.3.1 ブックマーカビリティとは</h4><ul><li><p>JSFでは最初にブラウザからアクセスが来た際に、処理をせずに画面を表示する</p></li><li><p>しかし、Webアプリケーションでデータの一覧や詳細を表示する画面では、なにかしらの事前処理やデータの取得処理が必要</p><ul><li>そこで、JSFでは初回アクセス時に処理を実施する機能を提供している</li></ul></li><li><p>使い方について説明（割愛）</p></li></ul><h3 id="4-4-フェーズリスナ"><a href="#4-4-フェーズリスナ" class="headerlink" title="4.4 フェーズリスナ"></a>4.4 フェーズリスナ</h3><ul><li><p>JSFのライフサイクル</p><ol><li>ビューの復元(Restore View)</li><li>リクエスト値の適用(Apply Request Values)</li><li>入力チェック(Process Validations)</li><li>モデル値の更新(Update Model Values)</li><li>アプリケーションの実施(Invoke Application)</li><li>画面の生成(REnder Response)</li></ol></li><li><p>フェーズ前後で横断的に行う処理はフェーズリスナを使用する</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> knowledgebank.web.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> javax.faces.event.PhaseEvent;</span><br><span class="line"><span class="keyword">import</span> javax.faces.event.PhaseId;</span><br><span class="line"><span class="keyword">import</span> javax.faces.event.PhaseListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KnowledgePhaseListener</span> <span class="keyword">implements</span> <span class="title">PhaseListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Logger logger = Logger.getLogger(KnowledgePhaseListener.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforePhase</span><span class="params">(PhaseEvent event)</span> </span>&#123;</span><br><span class="line">        logger.info(event.getPhaseId() + <span class="string">" beforePhase"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPhase</span><span class="params">(PhaseEvent event)</span> </span>&#123;</span><br><span class="line">        logger.info(event.getPhaseId() + <span class="string">" afterPhase"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PhaseId <span class="title">getPhaseId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PhaseId.ANY_PHASE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-Java-EE-7で導入されたJSFの機能"><a href="#4-5-Java-EE-7で導入されたJSFの機能" class="headerlink" title="4.5 Java EE 7で導入されたJSFの機能"></a>4.5 Java EE 7で導入されたJSFの機能</h3><h4 id="4-5-1-JSF-2-2-の追加機能"><a href="#4-5-1-JSF-2-2-の追加機能" class="headerlink" title="4.5.1 JSF 2.2 の追加機能"></a>4.5.1 JSF 2.2 の追加機能</h4><ul><li>JSF2.2の仕様には大きな特徴として以下の４つが紹介されている<ul><li>HTML5フレンドリマークアップ（パススルーアトリビュートと、パススルーエレメント）</li><li>リソース・ライブラリコントラクト</li><li>Faces Flows</li><li>ステートレスビュー</li></ul></li></ul><h4 id="4-5-2-リソース・ライブラリコントラクト"><a href="#4-5-2-リソース・ライブラリコントラクト" class="headerlink" title="4.5.2 リソース・ライブラリコントラクト"></a>4.5.2 リソース・ライブラリコントラクト</h4><p>リソースの塊を簡単に切り替えることができる仕組み</p><ul><li>あまり便利に思わなかった</li></ul><h4 id="4-5-3-Faces-Flows"><a href="#4-5-3-Faces-Flows" class="headerlink" title="4.5.3 Faces Flows"></a>4.5.3 Faces Flows</h4><ul><li>フロー処理について記載されている</li><li>スコープを設定ファイルやJavaアノテーションで保持できるみたい<ul><li>MEMO: 他のフレームワークではどのようにスコープ持っているのか確認</li></ul></li></ul><h4 id="4-5-4-ステートレスビュー"><a href="#4-5-4-ステートレスビュー" class="headerlink" title="4.5.4 ステートレスビュー"></a>4.5.4 ステートレスビュー</h4><ul><li><p>状態を保持しないビューを作成する機能</p></li><li><p>JSFでは画面を表示する際にサーバー側似コンポーネントツリーを作成し、同一画面を表示している間はそのコンポーネントツリーを保持していると説明しました。</p></li><li><p>ステートレスビューを使用すると、そのコンポーネントツリーを毎回破棄市、アクセスが来るたびに再作成する動きに変わる</p></li><li><p>ステートレスなアプリを作る上で欠かせない</p><ul><li>MEMO: 他のフレームワークの場合は、redisなどでセッション管理している</li></ul></li></ul><h3 id="4-6-まとめ"><a href="#4-6-まとめ" class="headerlink" title="4.6 まとめ"></a>4.6 まとめ</h3><ul><li><p>ここまでの内容を理解していれば、十分JSFを使用してWebアプリケーションを作成することができる</p></li><li><p>紹介していないライブラリ</p><ul><li>PrimeFaces</li><li>RichFaces</li><li>OmniFaces</li></ul></li><li><p>MEMO: 時間があれば見てみる程度で良いかも</p></li></ul><h2 id="Chapter-5-ビジネスロジック層の開発――CDIの利用"><a href="#Chapter-5-ビジネスロジック層の開発――CDIの利用" class="headerlink" title="Chapter 5 ビジネスロジック層の開発――CDIの利用"></a>Chapter 5 ビジネスロジック層の開発――CDIの利用</h2><ul><li><p>本章と次章ではCDIとEJBについて解説</p></li><li><p>本章ではCDI</p><ul><li>CDIとEJBの違いについて解説</li><li>CDIがJavaEEに採用された経緯</li><li>CDIの機能　について解説</li></ul></li></ul><h3 id="5-1-CDIとEJB"><a href="#5-1-CDIとEJB" class="headerlink" title="5.1 CDIとEJB"></a>5.1 CDIとEJB</h3><h4 id="5-1-1-ビジネスロジック層の部品"><a href="#5-1-1-ビジネスロジック層の部品" class="headerlink" title="5.1.1 ビジネスロジック層の部品"></a>5.1.1 ビジネスロジック層の部品</h4><ul><li><p>CDI,EJB</p><ul><li>いずれも「ビジネスロジック」を記述するための部品である</li></ul></li><li><p>CDI</p><ul><li>JavaEE6から採用された新しい技術</li></ul></li><li><p>EJB</p><ul><li>Java2Enterprise Edition（J2EE）の頃から存在する歴史ある技術</li></ul></li></ul><h4 id="5-1-2-CDIとEJBの違い"><a href="#5-1-2-CDIとEJBの違い" class="headerlink" title="5.1.2 CDIとEJBの違い"></a>5.1.2 CDIとEJBの違い</h4><ul><li>CDIとEJBの違いは「設計の柔軟性」</li><li>CDIの方が自由度が高い</li></ul><h3 id="5-2-DI（Dependency-Injection）"><a href="#5-2-DI（Dependency-Injection）" class="headerlink" title="5.2 DI（Dependency Injection）"></a>5.2 DI（Dependency Injection）</h3><ul><li>CDIについて知る前にDIについて理解しておく必要がある</li><li>DIが考案された歴史的な背景をたどって、CDIの意義について知ることにする</li></ul><h4 id="5-2-1-DIとは"><a href="#5-2-1-DIとは" class="headerlink" title="5.2.1 DIとは"></a>5.2.1 DIとは</h4><ul><li><p>DI</p><ul><li>部品間の依存関係を少なくすることで、部品の分離と結合をコントロールするための考え方、及びその仕組みのこと</li></ul></li><li><p>「依存」とは、クラス同士が強いつながりを持つことを意味している</p></li><li><p>直接クラスを宣言し、インスタンス化している強い依存関係は、それ自体で処理が完結しているプログラムモジュール、例えば、</p></li><li><p>ビジネスロジック層でしか動かないクラス間の依存については問題ありません。</p></li><li><p>一方で各層をまたがる依存関係はできる限り弱い方がよいという考えがある</p></li><li><p>依存関係を弱く保つことができれば、変更点は少なくてすむ</p></li></ul><h4 id="5-2-2-DIによる依存関係の解消"><a href="#5-2-2-DIによる依存関係の解消" class="headerlink" title="5.2.2 DIによる依存関係の解消"></a>5.2.2 DIによる依存関係の解消</h4><ul><li><p>DIコンテナがあれば、実行時に動的にクラスを選択できる</p></li><li><p>用途としては以下</p><ul><li>ある条件において別の実装クラスを必要とするケース<ul><li>処理の流れ自体は変わらないが、ユーザーやリクエストの状況に応じて手続きが異なる、あるいは出力先が異なる</li></ul></li><li>テストや開発中のモック入れ替え<ul><li>層をまたぐ処理や開発中のクラスを利用しなければならないときに、仮となるモックを利用し、将来的に完成したクラスを入れ替える場合。</li><li>あるいはテストデータを返却するテスト用のモックと完成したクラスを入れ替える場合</li></ul></li></ul></li><li><p>COLUMN ファクトリメソッドパターン</p><ul><li>DIが実現している実装の入れ替えは、ファクトリメソッドパターンと呼ばれるデザインパターンを採用することでも実現可能</li><li>ファクトリメソッドパターンはオブジェクトの生成を管理するクラスを設けることで、任意の振る舞いを持つオブジェクトを取得する方式</li><li>ただし、ファクトリメソッドパターンを利用していても、結局返却するインスタンスを選択する処理をソースコードに記述しておく必要があり、</li><li>インスタンスをソースコード外で管理するには、プロパティファイルなどを用いる必要があるので、そうするよりはDIコンテナを利用するほうが楽</li><li>MEMO: 再読</li></ul></li></ul><h4 id="5-2-3-JavaEEへのDI取り込み"><a href="#5-2-3-JavaEEへのDI取り込み" class="headerlink" title="5.2.3 JavaEEへのDI取り込み"></a>5.2.3 JavaEEへのDI取り込み</h4><p>(<br>  割愛<br>)</p><h3 id="5-3-CDI"><a href="#5-3-CDI" class="headerlink" title="5.3 CDI"></a>5.3 CDI</h3><ul><li><p>CDIとはJavaEE6から導入されたJavaEEアプリケーションサーバー上でDI機能を提供するための仕様</p></li><li><p>CDIを使用するために必要な定義</p><ul><li>インジェクションポイント：<code>@Inject</code>が指定された変数</li><li>CDIビーン：スコープに関するアノテーションが付与されたクラス</li></ul></li><li><p>Column 設定ファイル beans.xml</p><ul><li>JavaEE7 からCDIを使うための設定ファイルであるbeans.xmlは特定の用途を除き不要になりました</li><li>beanx.xmlはインジェクションポイントとCDIビーンの関係性を記述するためのものでしたが、現在では自動的に解決する用になっている</li></ul></li><li><p>CDIの利点</p><ul><li>インジェクションを行うのが簡単（アノテーションのみで設定ファイル不要）</li><li>DIを基礎とした様々な機能があらかじめ準備されている</li></ul></li></ul><h3 id="5-4-CDI基本編"><a href="#5-4-CDI基本編" class="headerlink" title="5.4 CDI基本編"></a>5.4 CDI基本編</h3><ul><li>CDI限定子：複数のインジェクション候補クラスが存在する場合に、クラスを特定するためのアノテーション <code>javax.inject.Qualifier</code></li></ul><h4 id="5-4-1-CDIコンテナによるインジェクション"><a href="#5-4-1-CDIコンテナによるインジェクション" class="headerlink" title="5.4.1 CDIコンテナによるインジェクション"></a>5.4.1 CDIコンテナによるインジェクション</h4><ul><li>CDIコンテナに存在するスコープを過ぎたオブジェクトは破棄される</li></ul><h4 id="5-4-2-CDIの型解決方法"><a href="#5-4-2-CDIの型解決方法" class="headerlink" title="5.4.2 CDIの型解決方法"></a>5.4.2 CDIの型解決方法</h4><ul><li><p>CDIがインジェクションポイントに対して注入する対象となるインスタンスを解決する方法は２通りある</p><ul><li>インジェクションポイントと対象インスタンスが１対１の場合（自動解決）</li><li>CDI限定子もしくは、beans.xml(@Alternative)で解決する方法</li></ul></li><li><p>結論：CDI限定子（Qualifier）を使用して書いていくのがよい</p><ul><li>設定ファイルも必要ないし、ソースコードを柔軟に変更しながら開発ができるため</li></ul></li><li><p>Column インターフェースを利用するべきか</p><ul><li>結論：インターフェースは準備しておくべき</li></ul></li></ul><h3 id="5-5-CDI応用編"><a href="#5-5-CDI応用編" class="headerlink" title="5.5 CDI応用編"></a>5.5 CDI応用編</h3><ul><li>CDIに関わる応用的な利用方法について記述</li><li>CDIの付加機能<ul><li>イベント処理：CDIビーン上である条件を満たした場合に、別のクラスに対して通知を行う機能</li><li>ステレオタイプ：複数アノテーションをまとめて定義する機能</li><li>プロデューサ&#x2F;ディスポーザ：クラスではなく、フィールドそのものやメソッドの戻り値をインジェクションポイントに注入する機能</li><li>インターセプター&#x2F;デコレータ：処理の前後に別の処理を入れ込んだり、追加したりする機能</li></ul></li></ul><h4 id="5-5-1-イベント処理"><a href="#5-5-1-イベント処理" class="headerlink" title="5.5.1 イベント処理"></a>5.5.1 イベント処理</h4><ul><li><p>イベント処理とは</p><ul><li>設定した閾値を超えるなど、特定の条件を満たす情報が発生したとき、その通知と情報をやりとりすることを指す</li><li>CDIではイベント発火はCDIビーン上で行い、それを処理するクラスを特別な呼び方として「オブザーバ」と呼ぶ</li></ul></li><li><p>イベント処理の実装</p><ul><li>イベント情報を格納するクラスを準備する</li><li>イベントを発火するCDIビーンを作成する</li><li>オブザーバクラスを作成する</li></ul></li><li><p>イベント処理の留意事項</p><ul><li>イベント発火からオブザーバの処理までがすべて同期で実行される</li><li>非同期だと勘違いしないように</li><li>参照関係を持たず、プログラムモジュール間似おける情報のやり取りを非同期で実行したい場合には、次章で説明するJMSを利用するなど別の方法を検討する必要がある</li></ul></li></ul><h4 id="5-5-2-ステレオタイプの利用"><a href="#5-5-2-ステレオタイプの利用" class="headerlink" title="5.5.2 ステレオタイプの利用"></a>5.5.2 ステレオタイプの利用</h4><ul><li><p>複数のアノテーション定義をまとめて管理できる</p></li><li><p><code>@StereoType</code>を付与してまとめていく</p></li><li><p>上書きもできるが、あまり上書きしすぎると良くない</p></li><li><p>MEMO: 管理方法について</p><ul><li>パッケージ名を<code>stereotype</code>で切って管理する</li><li>クラス名称の接尾字に<code>Type</code>をつけておくとアノテーションがステレオタイプで有ることを明示できる</li></ul></li><li><p>MEMO: Springでもまとめていくアノテーションあるか</p></li></ul><h4 id="5-5-3-プロデューサ-x2F-ディスポーザの利用"><a href="#5-5-3-プロデューサ-x2F-ディスポーザの利用" class="headerlink" title="5.5.3 プロデューサ&#x2F;ディスポーザの利用"></a>5.5.3 プロデューサ&#x2F;ディスポーザの利用</h4><ul><li><p>プロデューサを利用すると、インジェクションポイントに注入するオブジェクトをプログラム上で動的に変更することができる</p></li><li><p>プロデューサにより作成されたオブジェクトが終了処理の必要なオブジェクトである場合、ディスポーザを利用することで終了処理を記述することができる</p></li><li><p>プロデューサアノテーションをメソッドに付与して戻り値に<code>@Inject</code>指定した変数と同じ型を指定してあげる</p></li><li><p>メソッドで処理されたあとのオブジェクトがDIコンテナに格納され、インジェクションされる</p></li><li><p>Disposesアノテーションは、Producerメソッドで提供されたクラスの終了処理を行うためのディスポーザ</p></li><li><p>MEMO: Springにもこの概念があるかどうか確認</p></li></ul><h4 id="5-5-4-インターセプタとデコレータ"><a href="#5-5-4-インターセプタとデコレータ" class="headerlink" title="5.5.4 インターセプタとデコレータ"></a>5.5.4 インターセプタとデコレータ</h4><ul><li><p>インターセプターとデコレータについて解説</p><ul><li>すでに作成済みのメソッドの処理に対して、外部のクラスを用いてその処理の前後や、処理内容に変更を加えることができる技術</li></ul></li><li><p>インターセプター：対象となる処理の前後やライフサイクルに応じて処理を行うための仕組み</p></li><li><p>定義方法</p><ul><li><code>@Interceptor</code>を付与したクラスを作成、メソッドに特定のアノテーション付与して機能に関与しない処理を実装</li><li>利用側のメソッドで<code>@Interceptors()</code>の引数に作成したインターセプタークラスを追加する</li><li>または、beans.xmlに使用するインターセプターを定義する</li></ul></li><li><p>Column どこでインターセプターを定義する？</p><ul><li>機能処理内にインターセプター（非機能処理）を記載するのはナンセンス</li><li>beans.xmlで管理する方が良いのではという意見が記載されている</li></ul></li><li><p>デコレータ：機能追加をするための仕組み</p><ul><li>共通のインターフェースを実装したクラスに処理を委譲する</li></ul></li><li><p>MEMO: デコレータの使い所について確認</p><ul><li>Springで同様の機能あるかどうか</li><li>インターセプター＝AOP？こちらも使い所についてまとめておく</li></ul></li></ul><h3 id="5-6-まとめ"><a href="#5-6-まとめ" class="headerlink" title="5.6 まとめ"></a>5.6 まとめ</h3><p>機能が非常に豊富であることと、ルール似基づいた設計と実装が必要であることをご理解いただけたと思います。</p><h2 id="Chapter-6-ビジネスロジック層の開発――EJBの利用"><a href="#Chapter-6-ビジネスロジック層の開発――EJBの利用" class="headerlink" title="Chapter 6 ビジネスロジック層の開発――EJBの利用"></a>Chapter 6 ビジネスロジック層の開発――EJBの利用</h2><h3 id="6-1-Enterprise-Java-Beans（EJB）"><a href="#6-1-Enterprise-Java-Beans（EJB）" class="headerlink" title="6.1 Enterprise Java Beans（EJB）"></a>6.1 Enterprise Java Beans（EJB）</h3><h4 id="6-1-1-EJBとは"><a href="#6-1-1-EJBとは" class="headerlink" title="6.1.1 EJBとは"></a>6.1.1 EJBとは</h4><ul><li><p>アプリケーションサーバー上で動作するJavaのプログラムのうち、特に「ビジネスロジック」を担当する部品を指す</p></li><li><p>EJBは</p><ul><li>サーブレットやJSF、Webサーバーなどアプリケーションサーバー外からのリクエストを受け付ける層と</li><li>データベースなどへ情報の永続化を行う層の中間の層の部品として機能する</li></ul></li><li><p>機能 EJB3.2</p><ul><li>トランザクション制御</li><li>Java Persistence APIを介した永続化処理</li><li>Java Messageing Serviceを介したメッセージ駆動処理</li><li>非同期実行制御</li><li>同期実行制御</li><li>スケジュールに基づいた実行</li><li>JNDIを介したインスタンス取得（現在はアノテーションを利用）</li><li>リモートクライアントからの実行</li><li>セキュリティ</li></ul></li></ul><h4 id="6-1-2-EJBの利点"><a href="#6-1-2-EJBの利点" class="headerlink" title="6.1.2 EJBの利点"></a>6.1.2 EJBの利点</h4><ul><li>JavaEETutorialを参考</li><li>EJBの利点<ul><li>EJBコンテナがシステムレベルのサービスを提供してくれるため、開発者はビジネスロジックの構築に集中できる</li><li>クライアントとの分離。クライアントにはビジネスロジックを実装する必要がない</li><li>JavaEE準拠のアプリケーションサーバー上であればどこでも動く</li></ul></li></ul><h4 id="6-1-3-EJBの種類"><a href="#6-1-3-EJBの種類" class="headerlink" title="6.1.3 EJBの種類"></a>6.1.3 EJBの種類</h4><ul><li>３種類ある<ul><li>セッションビーン</li><li>メッセージドリブンビーン</li><li>タイマー</li></ul></li></ul><h3 id="6-2-セッションビーン"><a href="#6-2-セッションビーン" class="headerlink" title="6.2 セッションビーン"></a>6.2 セッションビーン</h3><h4 id="6-2-1-セッションビーンとは"><a href="#6-2-1-セッションビーンとは" class="headerlink" title="6.2.1 セッションビーンとは"></a>6.2.1 セッションビーンとは</h4><ul><li>EJBの中核を成すコンポーネント</li></ul><h4 id="6-2-2-セッションビーンの種類"><a href="#6-2-2-セッションビーンの種類" class="headerlink" title="6.2.2 セッションビーンの種類"></a>6.2.2 セッションビーンの種類</h4><ul><li>セッションビーンの種類<ul><li>ステートレスセッションビーン</li><li>ステートフルセッションビーン</li><li>シングルトン</li><li>タイマー</li></ul></li></ul><h4 id="6-2-3-ステートレスセッションビーン"><a href="#6-2-3-ステートレスセッションビーン" class="headerlink" title="6.2.3 ステートレスセッションビーン"></a>6.2.3 ステートレスセッションビーン</h4><ul><li><p>一番良く利用されるEJBであり、ごくシンプルで基本的なEJB</p></li><li><p>ステートレスセッションビーンのクラスに<code>@Stateless</code>を付与</p></li><li><p>利用側は<code>@EJB</code>を付与して使用する</p></li><li><p><code>@Stateful</code>アノテーションを利用する</p></li><li><p>留意点</p><ul><li>クライアントごとにステートフルセッションビーンのインスタンスが作成される</li></ul></li><li><p>サーブレットからステートフルセッションビーンを呼び出す場合、</p></li><li><p>通常サーブレットは１リクエストスレッドにより１つのインスタンスが利用されるモデルであるため、</p></li><li><p>状態を保持できない</p></li><li><p>ライフサイクルの制御</p><ul><li>生成</li><li>活性化</li><li>非活性化</li><li>破棄</li></ul></li><li><p>非活性化されると、メモリ外にシリアライズ処理され出力される。</p></li><li><p>必要になるとデシリアライズされ、メモリ上に復帰する</p></li></ul><h4 id="6-2-5-シングルトンセッションビーン"><a href="#6-2-5-シングルトンセッションビーン" class="headerlink" title="6.2.5 シングルトンセッションビーン"></a>6.2.5 シングルトンセッションビーン</h4><ul><li><p><code>@Singleton</code>アノテーションを付与</p></li><li><p>設定ファイルの読み出しの管理などで使う</p></li><li><p>COLUMN <code>@Startup</code>アノテーション</p><ul><li>デプロイされたアプリケーションが有効化されたタイミングですぐにオブジェクトを生成するよう、アプリケーションサーバーに支持するもの</li><li><code>@DependsOn</code>というアノテーションもある<ul><li>初期化の依存関係を解消するためのもの</li></ul></li><li>MEMO: Springの場合初期化のアノテーションは何を使っているか</li></ul></li></ul><h4 id="6-2-6-非同期処理"><a href="#6-2-6-非同期処理" class="headerlink" title="6.2.6 非同期処理"></a>6.2.6 非同期処理</h4><ul><li><p>実装には「<code>@Asynchronous</code>アノテーション」を使用</p></li><li><p>クラスかメソッドに定義する</p><ul><li>クラスの場合はすべてのメソッドが非同期になる</li><li>メソッドの場合は対象メソッドのみ非同期になる</li></ul></li><li><p>MEMO: Futureインターフェースを介した操作について理解する</p></li><li><p>Column 非同期処理の再実行</p><ul><li>EJBの非同期実行には処理の再投入（再実行）のためのAPIは定義されていないので</li><li>自前で実装するか、他のアーキテクチャを利用する方法も検討する</li><li>キューを利用して後述のメッセージドリブンビーンを使うなどが考えられる</li></ul></li></ul><h4 id="6-2-7-トランザクション"><a href="#6-2-7-トランザクション" class="headerlink" title="6.2.7 トランザクション"></a>6.2.7 トランザクション</h4><ul><li><code>@TransactionManagement</code>アノテーション</li><li><code>@TransactionAttribute</code>アノテーションを使用するらしい</li></ul><p>詳しい使い方については割愛</p><h3 id="6-3-メッセージドリブンビーン"><a href="#6-3-メッセージドリブンビーン" class="headerlink" title="6.3 メッセージドリブンビーン"></a>6.3 メッセージドリブンビーン</h3><ul><li>メッセージドリブンビーン（Message Driven Bean: MDB）について解説していく<ul><li>メッセージと呼ばれるものを受け取ることで起動するという用途が限定的なコンポーネント</li></ul></li></ul><h4 id="6-3-1-メッセージドリブン便とは"><a href="#6-3-1-メッセージドリブン便とは" class="headerlink" title="6.3.1 メッセージドリブン便とは"></a>6.3.1 メッセージドリブン便とは</h4><ul><li><p>MEMO: JMSも理解を深める必要あり</p></li><li><p>JMS</p><ul><li>キューまたはトピックと呼ばれる方式を利用して、主にシステム間やアプリケーション間の情報を受け渡しを行うための仕組み</li></ul></li><li><p>Column キューとトピック</p><ul><li>キューとトピックの違いは、送信元と受取側の数の違いにある<ul><li>キュー：１対１</li><li>トピック：N対M（多対多）</li></ul></li></ul></li><li><p>メッセージの受取を担当するのがメッセージドリブンビーン</p></li><li><p>MDBは常にキューまたはトピックにメッセージが配信されるのを待機し、監視している</p></li></ul><h4 id="6-3-2-実装例"><a href="#6-3-2-実装例" class="headerlink" title="6.3.2 実装例"></a>6.3.2 実装例</h4><p>割愛</p><ul><li>MEMO: JMSの使用方法とSpringJMSを使う</li></ul><h3 id="6-4-タイマー"><a href="#6-4-タイマー" class="headerlink" title="6.4 タイマー"></a>6.4 タイマー</h3><h4 id="6-4-1-タイマーとは"><a href="#6-4-1-タイマーとは" class="headerlink" title="6.4.1 タイマーとは"></a>6.4.1 タイマーとは</h4><ul><li>EJBには時間を指定して起動するための「タイマーサービス」というものが定義されている</li></ul><p>タイマーはバッチ処理とは異なるので、むやみに使用するべきではない</p><ul><li>使用方法は以下の２種類存在する<ul><li>TimerServiceAPIから登録する</li><li><code>@Schedule</code>を使って登録する</li></ul></li></ul><h4 id="6-4-2-タイマーサービスのサンプル"><a href="#6-4-2-タイマーサービスのサンプル" class="headerlink" title="6.4.2 タイマーサービスのサンプル"></a>6.4.2 タイマーサービスのサンプル</h4><p>割愛</p><h4 id="6-4-3-Scheduleの実装サンプル"><a href="#6-4-3-Scheduleの実装サンプル" class="headerlink" title="6.4.3 @Scheduleの実装サンプル"></a>6.4.3 @Scheduleの実装サンプル</h4><p>割愛</p><h3 id="6-5-EJBの設計"><a href="#6-5-EJBの設計" class="headerlink" title="6.5 EJBの設計"></a>6.5 EJBの設計</h3><ul><li><p>EJBというのはあくまでビジネスロジックの実装を任されているコンポーネント</p></li><li><p>アプリケーションはビジネスロジックだけでは成り立たない</p></li><li><p>ブラウザの画面などのプレゼンテーション層</p></li><li><p>Webサービスなどのロジック呼び出し部分、データベース接続などの永続化層、外部サービスの呼び出しなどもある</p></li><li><p>EJBはこれらの処理の中間に位置することになる</p></li><li><p>EJBを設計する上でまず考える必要があるのは、この「外部の層との接点」</p></li></ul><h4 id="6-5-1-EJBメソッドの呼び出しに関する設計"><a href="#6-5-1-EJBメソッドの呼び出しに関する設計" class="headerlink" title="6.5.1 EJBメソッドの呼び出しに関する設計"></a>6.5.1 EJBメソッドの呼び出しに関する設計</h4><ul><li><p>（１）やり取りする情報を保持するクラスを作成し、サーブレットとEJB双方から共通のクラスとして参照する</p><ul><li>あまりにも多くの情報を保持し、データベースへの永続化が終わるリクエストの最後まで保持し続けるような長寿クラスにならないように注意する必要</li></ul></li><li><p>（２）引数が増えた分についてはメソッドをオーバーロードして対応する</p><ul><li>注意：公開するメソッドが増えて、Webサービスのエンドポイントになるような場合はWSDLの変更が発生するため注意</li></ul></li><li><p>Column JSPからのEJB呼び出し</p><ul><li>画面生成とビジネスロジックの分離ができないためやめた方がいい</li></ul></li></ul><h4 id="6-5-2-ローカル呼び出しとリモート呼び出し"><a href="#6-5-2-ローカル呼び出しとリモート呼び出し" class="headerlink" title="6.5.2 ローカル呼び出しとリモート呼び出し"></a>6.5.2 ローカル呼び出しとリモート呼び出し</h4><ul><li><p>リモート呼び出しは可能な限り使わないことをおすすめする</p></li><li><p>リモート呼び出しが必要なパターン</p><ul><li>バッチの実装</li><li>GUIを持つクライアントからのビジネスロジック呼び出し</li><li>多段アプリケーションサーバー構成（処理量による業務分離、接続形態によるレイヤー分割）</li></ul></li><li><p>代替手段としてはEJBはローカル使用のみにしておき</p><ul><li>JAX-RSなどを使用した層を準備することが考えられる</li></ul></li><li><p>MEMO: JAX-RS層について深堀り</p></li></ul><h4 id="6-5-3-同期-x2F-非同期"><a href="#6-5-3-同期-x2F-非同期" class="headerlink" title="6.5.3 同期&#x2F;非同期"></a>6.5.3 同期&#x2F;非同期</h4><ul><li>基本的に非同期にするメソッドはいかに絞るとよい<ul><li>すぐに結果を必要としないもの</li><li>結果を得るのに相応の時間がかかる処理</li></ul></li></ul><h4 id="6-5-4-負荷量"><a href="#6-5-4-負荷量" class="headerlink" title="6.5.4 負荷量"></a>6.5.4 負荷量</h4><ul><li>MEMO: 設計する際の負荷について考えるべき</li></ul><h4 id="6-5-5-データベースアクセス"><a href="#6-5-5-データベースアクセス" class="headerlink" title="6.5.5 データベースアクセス"></a>6.5.5 データベースアクセス</h4><ul><li><p>JPA</p></li><li><p>JPA以外のO&#x2F;RマッピングもしくはDAOフレームワーク</p></li><li><p>JDBCの直接呼び出し</p></li><li><p>通常はEJBと親和性が高いJPAをEJBトランザクション管理下に置くのが容易</p></li></ul><h3 id="6-6-EJBのテスト"><a href="#6-6-EJBのテスト" class="headerlink" title="6.6 EJBのテスト"></a>6.6 EJBのテスト</h3><h4 id="6-6-1-EJBのテストの必要性と難しさ"><a href="#6-6-1-EJBのテストの必要性と難しさ" class="headerlink" title="6.6.1 EJBのテストの必要性と難しさ"></a>6.6.1 EJBのテストの必要性と難しさ</h4><ul><li><p>EJBの最大の弱点はテストがしづらいものであった</p></li><li><p>JavaSEでも必要な資材を準備すれば動くようになったが、一部対応していないらしい</p></li></ul><h4 id="6-6-2-EJBテストの準備"><a href="#6-6-2-EJBテストの準備" class="headerlink" title="6.6.2 EJBテストの準備"></a>6.6.2 EJBテストの準備</h4><ul><li>EJBContainerからEJBモジュールを取得し、Junitなどでテストを実施する説明</li></ul><h3 id="6-7-まとめ"><a href="#6-7-まとめ" class="headerlink" title="6.7 まとめ"></a>6.7 まとめ</h3><p>CDIとEJBをうまく組み合わせて設計していこうという説明</p><h2 id="Chapter-7-データアクセス層の開発――JPAの基本"><a href="#Chapter-7-データアクセス層の開発――JPAの基本" class="headerlink" title="Chapter 7 データアクセス層の開発――JPAの基本"></a>Chapter 7 データアクセス層の開発――JPAの基本</h2><p>本章と次章では、JavaEEのにおけるデータベースへのアクセス方法であるJPAについて解説</p><p>エンティティやクエリといったJPAの構成要素と、JPQLとCriteriaAPIの２種類のクエリについて説明</p><h3 id="7-1-JPAの基礎知識"><a href="#7-1-JPAの基礎知識" class="headerlink" title="7.1 JPAの基礎知識"></a>7.1 JPAの基礎知識</h3><ul><li>永続化：Javaのプロセスが終了しても、データが消えずに残るような状態にすること</li></ul><h4 id="7-1-1-JPAの構成要素"><a href="#7-1-1-JPAの構成要素" class="headerlink" title="7.1.1 JPAの構成要素"></a>7.1.1 JPAの構成要素</h4><ul><li>エンティティクラス（データのレイアウトを規定）とエンティティオブジェクト（データを保持）</li><li>エンティティマネージャ<ul><li>エンティティオブジェクトとレコードの紐付けを管理</li></ul></li><li>クエリ<ul><li>データを操作</li></ul></li><li>永続化ユニット<ul><li>データベースへの接続情報などJPAの設定を記述する</li></ul></li></ul><h4 id="7-1-2-エンティティクラスとエンティティオブジェクト"><a href="#7-1-2-エンティティクラスとエンティティオブジェクト" class="headerlink" title="7.1.2 エンティティクラスとエンティティオブジェクト"></a>7.1.2 エンティティクラスとエンティティオブジェクト</h4><ul><li>そのまま、クラスとオブジェクトという理解</li><li>テーブルとレコード　になぞらえて考えられる</li></ul><h4 id="7-1-3-エンティティマネージャ"><a href="#7-1-3-エンティティマネージャ" class="headerlink" title="7.1.3 エンティティマネージャ"></a>7.1.3 エンティティマネージャ</h4><ul><li>エンティティオブジェクトを取得したり、データベースへ反映、削除したりする</li><li>永続化コンテキストの配下にないものは、データベースへは反映されない</li><li><code>persist()</code>メソッドで管理下におくみたい</li></ul><h4 id="7-1-4-クエリ"><a href="#7-1-4-クエリ" class="headerlink" title="7.1.4 クエリ"></a>7.1.4 クエリ</h4><ul><li><p>エンティティマネージャが持つ基本的なメソッドを利用する他に、より自由度の高いクエリを用いる方法がある</p></li><li><p>JPAが用意しているクエリの定義方法</p><ul><li>JPQL: SQLに似た記法で記載でき、DBMSを意識しなくて良い</li><li>Criteria API: APIを使ってクエリを組み立てて行く手法。DBMSを意識しなくて良い</li><li>ネイティブクエリ: SQL文をかいていく必要があるので、DBMSが変わればここも変更しないと行けない</li></ul></li><li><p>理由がなければJPQLを用いるのが良いだろう</p></li></ul><h4 id="7-1-5-永続化ユニット"><a href="#7-1-5-永続化ユニット" class="headerlink" title="7.1.5 永続化ユニット"></a>7.1.5 永続化ユニット</h4><ul><li><p>永続化似関する設定をまとめたもので、実態は<code>persistence.xml</code>という名前のXMLファイル</p></li><li><p>設定項目としては以下のようなものがある</p><ul><li>永続化ユニットの名前</li><li>トランザクションマネージャの設定</li><li>永続化プロバイダ（JPAの実行エンジン）のクラス名</li><li>永続化プロバイダに与えるプロパティ</li><li>接続先データソースの名前★</li><li>エンティティクラスの名前★</li></ul></li><li><p>データベースの接続先を設定する方法</p><ul><li>アプリケーションサーバーで定義されているデータソースの名前を指定する方法</li><li>永続化プロバイダのプロパティとして、接続先アドレスやユーザー名、パスワードなどを設定する方法　が挙げられる</li></ul></li><li><p>JPAの実行エンジンにどれがエンティティクラスなのか検知してもらう設定も入れる</p></li></ul><h4 id="7-1-6-JPAのメリット"><a href="#7-1-6-JPAのメリット" class="headerlink" title="7.1.6 JPAのメリット"></a>7.1.6 JPAのメリット</h4><ul><li>ResultSetからDTOにうつして..という処理を記述しなくてよい</li><li>メソッドかクエリでアクセスできる</li><li>コード量が従来よりも少ない</li><li>メモリ上にキャッシュされたエンティティオブジェクトを利用できる<ul><li>アプリ開発者はキャッシュの有無を意識する必要はない</li></ul></li></ul><h3 id="7-2-エンティティの基本"><a href="#7-2-エンティティの基本" class="headerlink" title="7.2 エンティティの基本"></a>7.2 エンティティの基本</h3><p>（割愛）</p><h4 id="7-2-1-エンティティクラスの実装"><a href="#7-2-1-エンティティクラスの実装" class="headerlink" title="7.2.1 エンティティクラスの実装"></a>7.2.1 エンティティクラスの実装</h4><ul><li><p>エンティティクラスには<code>@Entity</code>を付与する</p></li><li><p>publicでなければならず、finalであってはならない</p></li><li><p>引数のないコンストラクタを作成しとくべき</p></li><li><p>Column Serializableについて</p><ul><li>EJBのリモート呼び出し</li><li>複数のアプリケーションサーバーでJPAの２次キャッシュを構成する場合</li><li>MEMO: 他のORMはSerializableに定義しているか確認</li></ul></li></ul><h4 id="7-2-2-ID"><a href="#7-2-2-ID" class="headerlink" title="7.2.2 ID"></a>7.2.2 ID</h4><ul><li>エンティティクラスはIDとして定義したフィールドを使用して<code>hashCode</code>メソッド、</li><li><code>equals(Object)</code>メソッドを実装しなければ行けない→通常IDEで自動生成できる</li><li><code>toString()</code>をオーバーライドしておくとデバッグに役立つ！</li><li>MEMO: 他のORMでも<code>toString()</code>オーバーライドしたりしてるか確認</li></ul><h4 id="7-2-3-リレーション"><a href="#7-2-3-リレーション" class="headerlink" title="7.2.3 リレーション"></a>7.2.3 リレーション</h4><ul><li><p><code>@OneToMany</code>等によるエンティティの紐付け型を説明</p></li><li><p>MEMO: 他のORMでも存在するか確認</p></li><li><p>１対１のリレーションについて</p><ul><li>通常１対１のリレーションだと、同一エンティティに保持してしまうことが望ましい</li><li>ただし、ライフサイクルが異なるデータだと、別のエンティティに分けた方が良いケースがある</li><li>例）アカウント情報とアカウントに紐づく会社情報<ul><li>アカウント情報：作成されてから削除されるまで</li><li>会社情報：入社して初めてできる、会社に所属しなければレコードがない<ul><li>などのような状況</li></ul></li></ul></li></ul></li></ul><h3 id="7-3-エンティティマネージャの基本"><a href="#7-3-エンティティマネージャの基本" class="headerlink" title="7.3 エンティティマネージャの基本"></a>7.3 エンティティマネージャの基本</h3><ul><li><p>エンティティマネージャの実態は <code>javax.persistence.EntityManager</code>インターフェース</p></li><li><p>このインターフェースに用意されているメソッドを通してエンティティを操作する</p></li><li><p>EntityManagerのインスタンスはCDIを用いてアプリケーションサーバーからインジェクションで取得する</p></li><li><p><code>@PersistenceContext</code>アノテーションを付与し、属性似unitNameを指定</p></li><li><p><code>persistence.xml</code>の<code>&lt;persistence-unit&gt;</code>タグのname属性と一致した名前を指定</p></li></ul><h4 id="7-3-1-エンティティのライフサイクル"><a href="#7-3-1-エンティティのライフサイクル" class="headerlink" title="7.3.1 エンティティのライフサイクル"></a>7.3.1 エンティティのライフサイクル</h4><ul><li>ライフサイクル<ul><li>NEW</li><li>MANAGED</li><li>REMOVED</li><li>DETACHED</li></ul></li></ul><h4 id="7-3-2-エンティティオブジェクトの作成と永続化"><a href="#7-3-2-エンティティオブジェクトの作成と永続化" class="headerlink" title="7.3.2 エンティティオブジェクトの作成と永続化"></a>7.3.2 エンティティオブジェクトの作成と永続化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NEW状態でまだ永続化コンテキストと紐付いてない</span></span><br><span class="line">Account account = <span class="keyword">new</span> Account();</span><br><span class="line"></span><br><span class="line"><span class="comment">// MANAGED状態になる 次のコミットのタイミングでデータベースに反映される</span></span><br><span class="line">EntiryManager em = xxx;</span><br><span class="line">em.persist(account);</span><br></pre></td></tr></table></figure><h4 id="7-3-3-エンティティオブジェクトの取得と更新"><a href="#7-3-3-エンティティオブジェクトの取得と更新" class="headerlink" title="7.3.3 エンティティオブジェクトの取得と更新"></a>7.3.3 エンティティオブジェクトの取得と更新</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取得したいEntityクラスとIDを指定</span></span><br><span class="line"><span class="comment">// MANAGED状態で取得される</span></span><br><span class="line">Account account = em.find(Account.class, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// setter経由で値を設定するとデータベースに反映される（コミットしたタイミングで）</span></span><br><span class="line">account.setName(<span class="string">'てらだよしお'</span>);</span><br></pre></td></tr></table></figure><h4 id="7-3-4-エンティティの削除"><a href="#7-3-4-エンティティの削除" class="headerlink" title="7.3.4 エンティティの削除"></a>7.3.4 エンティティの削除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em.remove(account);</span><br></pre></td></tr></table></figure><h4 id="7-3-5-デタッチ"><a href="#7-3-5-デタッチ" class="headerlink" title="7.3.5 デタッチ"></a>7.3.5 デタッチ</h4><p>EJBのメソッドの外へ出るとDETACHED状態になる</p><ul><li>MEMO: 通常アプリでEntityクラスをそのまま画面で使用することは良くないと考える</li></ul><h3 id="7-4-クエリAPI"><a href="#7-4-クエリAPI" class="headerlink" title="7.4 クエリAPI"></a>7.4 クエリAPI</h3><p>JPQLとCriteriaAPIを使ったQuery作成方法を記載</p><h4 id="7-4-1-パラメータ"><a href="#7-4-1-パラメータ" class="headerlink" title="7.4.1 パラメータ"></a>7.4.1 パラメータ</h4><p>JPQLとCriteriaAPIはパラメータを取ることができる<br>パラメータは位置で指定する方法と名前で指定する方法があるが通常は名前で指定した方がよい</p><ul><li>MEMO: 名前で指定するルールを作った方が良さそう</li></ul><h4 id="7-4-2-サンプルデータ"><a href="#7-4-2-サンプルデータ" class="headerlink" title="7.4.2 サンプルデータ"></a>7.4.2 サンプルデータ</h4><p>ダウンロードデータの中にあるサンプルデータについての説明</p><h3 id="7-5-JPQL"><a href="#7-5-JPQL" class="headerlink" title="7.5 JPQL"></a>7.5 JPQL</h3><ul><li>JPQL(Java Persistence Query Language)</li></ul><h4 id="7-5-1-JPQLの基本構文"><a href="#7-5-1-JPQLの基本構文" class="headerlink" title="7.5.1 JPQLの基本構文"></a>7.5.1 JPQLの基本構文</h4><h4 id="7-5-5-フェッチ"><a href="#7-5-5-フェッチ" class="headerlink" title="7.5.5 フェッチ"></a>7.5.5 フェッチ</h4><ul><li><p>取得するエンティティにリレーションが定義されている場合、リレーション先のエンティティを</p></li><li><p>どのタイミングでデータベースから取得するかを決めることができる</p></li><li><p>これを「フェッチ戦略」という</p><ul><li>Eagerフェッチ</li><li>Lazyフェッチ</li></ul></li><li><p>Eagerフェッチ</p><ul><li>findメソッド実行時に、リレーション定義されている参照先のオブジェクトも取得する</li><li>リレーション先のエンティティオブジェクトを同時に使用することの多い場合は、</li><li>Eagerフェッチを使用する</li></ul></li><li><p>Lazyフェッチ</p><ul><li>取得処理時には、リレーション先のエンティティオブジェクトを取得せず、</li><li>リレーション先にはじめてアクセスする際に取得する</li><li>リレーション先のエンティティオブジェクトを頻繁に使用しない場合はLazyにすべき</li><li>デメリット<ul><li>どこでエンティティの取得が行われたか分かりづらい</li><li>性能の劣化の場所を特定しづらい</li></ul></li></ul></li><li><p>N+1問題とJOINフェッチ</p><ul><li>１回のクエリを発行したあとにN回のクエリの発行を必要とすることをN+1問題という</li><li>リレーションが増えるほど、発行するクエリの数が増える</li><li>これに対応するためにJOIN FETCH節を利用する</li><li>JOIN句の後ろにFETCHがつくだけ</li></ul></li></ul><h4 id="7-5-6-エンティティオブジェクトの集計"><a href="#7-5-6-エンティティオブジェクトの集計" class="headerlink" title="7.5.6 エンティティオブジェクトの集計"></a>7.5.6 エンティティオブジェクトの集計</h4><ul><li>シンプルにCountなどを使う方法</li><li>型を意識する必要がある場合、コンストラクタ式を利用する必要があるらしい<ul><li>割愛））</li></ul></li></ul><h4 id="7-5-7-名前付きクエリ"><a href="#7-5-7-名前付きクエリ" class="headerlink" title="7.5.7 名前付きクエリ"></a>7.5.7 名前付きクエリ</h4><ul><li><p>開発者はJPQLのクエリに名前をつけることができる</p></li><li><p>名前をつけられたJPQLのクエリを「名前付きクエリ」と呼ぶ</p></li><li><p><code>@NamedQueries</code>と<code>@NamedQuery</code>を使って名前定義しておく方法</p><ul><li>MEMO: 他のORMはSQLファイルで管理するのではと思う</li></ul></li></ul><h3 id="7-6-CriteriaAPI"><a href="#7-6-CriteriaAPI" class="headerlink" title="7.6 CriteriaAPI"></a>7.6 CriteriaAPI</h3><ul><li>Criteriaクエリを利用してクエリを構築していく</li><li>JPQLと役割は同じであるため、JPQL同様に以下の要素から構成<ul><li>SELECT</li><li>FROM</li><li>JOIN</li><li>WHERE</li><li>ORDERBY</li></ul></li></ul><h4 id="7-6-1-Criteria-APIの基本構文"><a href="#7-6-1-Criteria-APIの基本構文" class="headerlink" title="7.6.1 Criteria APIの基本構文"></a>7.6.1 Criteria APIの基本構文</h4><p>（割愛）</p><ul><li>利用のメリットがあまりわかない<ul><li>発行されているSQLが分かりづらい</li><li>SQLNativeでかけない</li><li>メソッドなど覚えなくては行けない</li></ul></li></ul><h2 id="Chapter8-データアクセス層の開発-JPAの応用"><a href="#Chapter8-データアクセス層の開発-JPAの応用" class="headerlink" title="Chapter8 データアクセス層の開発 JPAの応用"></a>Chapter8 データアクセス層の開発 JPAの応用</h2><ul><li>エンティティとデータベースの関連付け</li><li>キャッシュなどJPAの応用的な使い方について紹介</li></ul><h3 id="8-1-高度なエンティティの利用方法"><a href="#8-1-高度なエンティティの利用方法" class="headerlink" title="8.1 高度なエンティティの利用方法"></a>8.1 高度なエンティティの利用方法</h3><ul><li>日時を指定する日時型、</li><li>連続した一意の数字を設定するシーケンス、</li><li>リレーション先のエンティティへ処理を伝播するカスケードを紹介</li></ul><h4 id="8-1-1-フィールドに関する応用"><a href="#8-1-1-フィールドに関する応用" class="headerlink" title="8.1.1 フィールドに関する応用"></a>8.1.1 フィールドに関する応用</h4><ul><li><p>日時</p><ul><li>JPAで日時を使用するには、エンティティクラスのフィールドに<code>java.util.Date型</code>を指定</li><li><code>@Temporal</code>アノテーションを付与して、引数にTemporalTypeを指定</li></ul></li><li><p>シーケンス</p><ul><li>エンティティのIDにはサロゲートキーを使用するのが　一般的</li><li>サロゲートキーは人工的に作成されたキーであり、業務上の意味がないもの</li><li>MEMO: 一般的にサロゲートキーが使われているのか確認</li><li><code>@SequenceGenerator</code>アノテーションを付与し、作成したシーケンスからエンティティフィールドに自動で値を設定するには</li><li><code>@GeneratedValue</code>アノテーションを使用する</li><li>MEMO: DBとどのように絡んでくるのか、DB定義側も自動的にシーケンス定義が作成されるのか<ul><li>どのDBもだいたいシーケンス定義を作成できるのか</li></ul></li></ul></li><li><p>カスケード</p><ul><li>エンティティオブジェクトに任意の操作をしたあと、リレーション先までその操作を反映させるための機能</li><li>MEMO: 他のORMはどのようにこの機能を持っているか確認</li></ul></li><li><p>複合ID</p><ul><li><code>@IdClass</code>か<code>@EmbeddedId</code>を使用して実装する<ul><li>どちらも主キークラスとして定義する必要あり</li></ul></li></ul></li></ul><h3 id="8-2-ライフサイクルコールバック"><a href="#8-2-ライフサイクルコールバック" class="headerlink" title="8.2 ライフサイクルコールバック"></a>8.2 ライフサイクルコールバック</h3><ul><li>JPAではコールバックメソッドを使用することで、エンティティオブジェクトの操作に対応した処理を実行することができる</li><li>実装方法は２種類<ul><li>エンティティクラスに実装<ul><li>エンティティの値を変更する場合にとどめてく</li></ul></li><li>エンティティリスナに実装<ul><li>エンティティの値を変更する処理は実装せず、共通で使用するような処理にとどめておく</li></ul></li><li>→あまり複雑にならないように注意</li></ul></li><li>MEMO: 他のORMにはコールバックメソッドの仕組みある？どんな処理を実装するのがベター？</li></ul><h3 id="8-3-エンティティクラスとテーブル構造"><a href="#8-3-エンティティクラスとテーブル構造" class="headerlink" title="8.3 エンティティクラスとテーブル構造"></a>8.3 エンティティクラスとテーブル構造</h3><p>Javaアプリケーション開発者がエンティティクラスを作成すると、JPAはエンティティクラスの定義を読み込み、<br>データベースへテーブルを作成する</p><ul><li>MEMO: 他のORMはテーブル自動作成とかされるのか確認</li></ul><h4 id="8-3-1-テーブル名とカラム名"><a href="#8-3-1-テーブル名とカラム名" class="headerlink" title="8.3.1 テーブル名とカラム名"></a>8.3.1 テーブル名とカラム名</h4><p>エンティティの変数とカラム名を変更する方法について記載</p><ul><li>多対多の中間表の名前の付け方</li><li>LOB定義 <code>@Lob</code></li></ul><h4 id="8-3-2-索引"><a href="#8-3-2-索引" class="headerlink" title="8.3.2 索引"></a>8.3.2 索引</h4><ul><li>索引を作成する方法について記載<ul><li><code>@Index(columnList =  &quot;xxxxx,xxxxx,xxxxxx&quot;)</code></li></ul></li></ul><h4 id="8-3-3-制約"><a href="#8-3-3-制約" class="headerlink" title="8.3.3 制約"></a>8.3.3 制約</h4><ul><li><p>精度とスケール、長さ</p><ul><li><code>@Column(precision=15, scale=0)</code></li><li><code>@Column(length=500)</code></li></ul></li><li><p>一意制約</p></li><li><p>MEMO: 他のORMでもDBMSの方言を吸収しながらテーブル定義ができるか確認、できなければJPAってすごい</p><ul><li>他のシステムも同じDBを参照していた場合、衝突する可能性あるので、AP:DBが対になるようなシステムであればよいかも</li></ul></li></ul><h3 id="8-4-トランザクション"><a href="#8-4-トランザクション" class="headerlink" title="8.4 トランザクション"></a>8.4 トランザクション</h3><ul><li>JavaEEには<ul><li>EJBコンテナにより自動的に開始されるトランザクション</li><li>Java開発者が任意で開始するトランザクション<ul><li>がある</li></ul></li></ul></li></ul><h3 id="8-5-キャッシュ"><a href="#8-5-キャッシュ" class="headerlink" title="8.5 キャッシュ"></a>8.5 キャッシュ</h3><h4 id="8-5-1-これまでのデータアクセス"><a href="#8-5-1-これまでのデータアクセス" class="headerlink" title="8.5.1 これまでのデータアクセス"></a>8.5.1 これまでのデータアクセス</h4><h4 id="8-5-2-キャッシュを使用したデータアクセス"><a href="#8-5-2-キャッシュを使用したデータアクセス" class="headerlink" title="8.5.2 キャッシュを使用したデータアクセス"></a>8.5.2 キャッシュを使用したデータアクセス</h4><ul><li>Column 複数アプリケーションによるデータ更新<ul><li>複数のアプリケーションが同一のデータベースを更新する場合や他のノードやデータベースでデータが更新されると、</li><li>キャッシュされているエンティティに伝播されないので、整合性が取れなくなる</li><li>MEMO: かなり致命的な問題だと思う… マスタテーブルに使うとか？</li><li>MEMO: 今キャッシュされているエンティティ情報をログに出力する方法などがあれば可視化されてわかりやすいが、ある？</li></ul></li></ul><h4 id="8-5-5-プリロード"><a href="#8-5-5-プリロード" class="headerlink" title="8.5.5 プリロード"></a>8.5.5 プリロード</h4><ul><li>EJBの<code>@Startup</code>などを利用してアプリケーション起動時に１回だけSQLを実行したり、</li><li>JSFやWebサービスを利用して外から初期化処理を起動できるようにすること<ul><li>１回読み込んでおくことでキャッシュに乗せて処理を早くする</li></ul></li></ul><h4 id="8-5-6-EclipseLink"><a href="#8-5-6-EclipseLink" class="headerlink" title="8.5.6 EclipseLink"></a>8.5.6 EclipseLink</h4><ul><li><p>GlassFishではJPAの実行エンジンとして、EclipseLinkを使用している</p></li><li><p>EclipseLinkには</p><ul><li>エンティティキャッシュ<ul><li>エンティティオブジェクトをキャッシュする機能</li></ul></li><li>問い合わせキャッシュ　の２種類が存在する<ul><li>クエリの結果をキャッシュする機能</li></ul></li></ul></li><li><p>MEMO: EcllipseLink以外の実行エンジンなどが存在する？</p></li></ul><h3 id="8-6-永続化ユニット"><a href="#8-6-永続化ユニット" class="headerlink" title="8.6 永続化ユニット"></a>8.6 永続化ユニット</h3><ul><li><a href="http://itdoc.hitachi.co.jp/manuals/link/cosmi_v0870/APKC/EU070266.HTM">http://itdoc.hitachi.co.jp/manuals/link/cosmi_v0870/APKC/EU070266.HTM</a></li></ul><p>アプリケーションからJPAを使用する場合，次のような情報を定義する必要があります。</p><p>アプリケーション内のエンティティクラスの情報<br>エンティティクラスとデータベーステーブルとのマッピング情報<br>JPAプロバイダがデータベースコネクションを取得するためのデータソースの情報<br>これらの情報を定義したものを永続化ユニットといいます。</p><ul><li><p>APサーバーにJNDIを定義し、APサーバー経由で接続→こちらを推奨しますとのこと</p></li><li><p>設定ファイルをアプリケーションに保持して直接接続</p></li><li><p>Column JavaSEでJPAを使う</p><ul><li>jarファイルをクラスパスに追加して、persistence.xmlを用意すれば使えますとのこと</li><li>EJBコンテナがないので、EntityManagerFactory経由でEntityManagerオブジェクトを取得する</li></ul></li></ul><h3 id="8-7-環境構築手順"><a href="#8-7-環境構築手順" class="headerlink" title="8.7 環境構築手順"></a>8.7 環境構築手順</h3><p>割愛</p><h3 id="8-8-アプリケーション開発手順"><a href="#8-8-アプリケーション開発手順" class="headerlink" title="8.8 アプリケーション開発手順"></a>8.8 アプリケーション開発手順</h3><h4 id="8-8-2-JPQLの開発"><a href="#8-8-2-JPQLの開発" class="headerlink" title="8.8.2 JPQLの開発"></a>8.8.2 JPQLの開発</h4><p>IDE上で試しにSQL流せる機能</p><ul><li>MEMO: 他のORMにも同様の機能あるか確認する</li></ul><h2 id="Chapter9-RESTful-Webサービスの開発"><a href="#Chapter9-RESTful-Webサービスの開発" class="headerlink" title="Chapter9 RESTful Webサービスの開発"></a>Chapter9 RESTful Webサービスの開発</h2><h3 id="9-1-Webサービスの基礎"><a href="#9-1-Webサービスの基礎" class="headerlink" title="9.1 Webサービスの基礎"></a>9.1 Webサービスの基礎</h3><h4 id="9-1-1-Webサービスとは"><a href="#9-1-1-Webサービスとは" class="headerlink" title="9.1.1 Webサービスとは"></a>9.1.1 Webサービスとは</h4><ul><li><p>サーバーで行われたなんらかの処理の結果をHTMLではなく、処理結果だけで返すものをWebサービスと呼びます</p></li><li><p>Webサービスを実現するために使われる技術</p><ul><li>SOAP: 信頼性を必要とする企業間でのWebサービスで多用されている</li><li>REST: 一般に公開されているWebサービスでよく使用されている<ul><li>RESTベースのWebサービスをRESTfulWebサービスと呼ぶ</li></ul></li></ul></li><li><p>JavaEEでもSOAPとRESTを利用したWebサービスを作成するためのAPIを提供している</p><ul><li>SOAPを使用したWebサービスを作成するAPIがJAX-WS</li><li>RESTful Webサービスを作成するAPIが、JAX-RS</li></ul></li></ul><h4 id="9-1-2-RESTful-Webサービスとは"><a href="#9-1-2-RESTful-Webサービスとは" class="headerlink" title="9.1.2 RESTful Webサービスとは"></a>9.1.2 RESTful Webサービスとは</h4><ul><li><p>RESTful Webサービスとは、RESTに則ったWebサービス</p></li><li><p>REST原則</p><ul><li>a.すべてのリソースに一意なアドレス（URI）を与える</li><li>b.情報の操作には予め定義された命令体型（統一インターフェイスという）を使用する</li><li>c.プラットフォームに応じて複数の表現（データ形式）を使用する</li><li>d.セッションなどの状態管理を行わず、ステートレスに通信する</li><li>e.アプリケーションはリンクによって、次の状態に遷移する</li></ul></li><li><p>上記のすべてを守る必要はないが、少なくとも、aとbは守っておくべき</p></li><li><p>制約がゆるいので、かんたんに実装できる</p></li><li><p>一方、SOAPは定義が厳密なので実装ハードルが高い</p></li></ul><h4 id="9-1-3-RESTとHTTP"><a href="#9-1-3-RESTとHTTP" class="headerlink" title="9.1.3 RESTとHTTP"></a>9.1.3 RESTとHTTP</h4><ul><li>HTTPヘッダー</li><li>HTTPメソッド<ul><li>GET</li><li>POST</li><li>PUT</li><li>DELETE</li></ul></li><li>URI<ul><li>MEMO: マトリックスパラメータは初めて聞いた</li></ul></li><li>ステータスコード</li></ul><h3 id="9-2-JAX-RSの基本"><a href="#9-2-JAX-RSの基本" class="headerlink" title="9.2 JAX-RSの基本"></a>9.2 JAX-RSの基本</h3><h4 id="9-2-1-JAX-RSとは"><a href="#9-2-1-JAX-RSとは" class="headerlink" title="9.2.1 JAX-RSとは"></a>9.2.1 JAX-RSとは</h4><ul><li><p>リクエストパラメータ</p><ul><li>マーシャル：XML形式やJSON形式→Javaオブジェクト</li><li>アンマーシャル：Javaオブジェクト→XML形式やJSON形式</li><li>JAX-RS2.0仕様の参照実装はJersey</li><li>JerseyはGlassFishサーバーでも使用されている</li></ul></li><li><p>主に５つの機能を提供</p><ul><li>１．HTTPメソッド&#x2F;URIパターンとリソースメソッドとのバインド機能</li><li>２．メッセージボディのデータ形式指定機能</li><li>３．リクエスト情報のインジェクション機能</li><li>４．リクエスト&#x2F;レスポンスのメッセージボディの変換機能</li><li>５．例外のレスポンスマッピング機能</li></ul></li></ul><h4 id="9-2-2-サンプルアプリケーションにおけるJAX-RSの機能"><a href="#9-2-2-サンプルアプリケーションにおけるJAX-RSの機能" class="headerlink" title="9.2.2 サンプルアプリケーションにおけるJAX-RSの機能"></a>9.2.2 サンプルアプリケーションにおけるJAX-RSの機能</h4><h3 id="9-3-RESTful-Webサービス作成のための事前準備"><a href="#9-3-RESTful-Webサービス作成のための事前準備" class="headerlink" title="9.3 RESTful Webサービス作成のための事前準備"></a>9.3 RESTful Webサービス作成のための事前準備</h3><h4 id="9-3-1-RESTful-Webサービスの認証方式"><a href="#9-3-1-RESTful-Webサービスの認証方式" class="headerlink" title="9.3.1 RESTful Webサービスの認証方式"></a>9.3.1 RESTful Webサービスの認証方式</h4><ul><li><p>ナレッジバンクのRESTサービス機能ではWEBアプリケーション機能で採用しているFORM認証ではなく</p></li><li><p>BASIC認証で認証を行う</p></li><li><p>BASIC認証を行うための設定を記載</p><ul><li>web.xmlに追記するみたい</li></ul></li><li><p>MEMO: 他のフレームワークでBASIC認証を行う方法について整理</p></li></ul><h4 id="9-3-2-データクラス（DTO）"><a href="#9-3-2-データクラス（DTO）" class="headerlink" title="9.3.2 データクラス（DTO）"></a>9.3.2 データクラス（DTO）</h4><ul><li>クライアントからのリクエストをJavaオブジェクトに変換する際に受け皿クラスを作成<ul><li><code>@XMLRootElementアノテーション</code>などを不要しないと行けないらしく、不便そう</li></ul></li></ul><h4 id="9-3-3-Application-サブクラス"><a href="#9-3-3-Application-サブクラス" class="headerlink" title="9.3.3 Application サブクラス"></a>9.3.3 Application サブクラス</h4><ul><li>作成するリソースクラスなど、JAX-RSで使用する一連のファイルをJAX-RSランタイムに通知するためにApplicationサブクラスをクラスパス上に配置</li><li>このファイルの存在により、作成するリソースクラスをRESTful Webサービスとして公開できる</li><li><code>ApplicationConfig.java</code>に<code>@ApplicationPath(&quot;xxxxxx&quot;)</code>を指定することでOK</li></ul><h3 id="9-4-RESTサービスクラス（サーバー側）の作成"><a href="#9-4-RESTサービスクラス（サーバー側）の作成" class="headerlink" title="9.4 RESTサービスクラス（サーバー側）の作成"></a>9.4 RESTサービスクラス（サーバー側）の作成</h3><h4 id="9-4-1-リソースクラスの構成要素"><a href="#9-4-1-リソースクラスの構成要素" class="headerlink" title="9.4.1 リソースクラスの構成要素"></a>9.4.1 リソースクラスの構成要素</h4><ul><li>RESTful Webサービスで提供する処理を定義するRESTサービスクラスを作成します。</li><li>RESTではすべてをリソースとして扱うため、リソースクラスとも呼ばれる<ul><li>MEMO: Springの場合、Controller</li></ul></li></ul><h4 id="9-4-2-エンドポイントURIの設定"><a href="#9-4-2-エンドポイントURIの設定" class="headerlink" title="9.4.2 エンドポイントURIの設定"></a>9.4.2 エンドポイントURIの設定</h4><ul><li><code>@Path(&quot;{id}&quot;)</code></li><li>などと指定</li></ul><h4 id="9-4-3-HTTPメソッドとリソースメソッドのバインド"><a href="#9-4-3-HTTPメソッドとリソースメソッドのバインド" class="headerlink" title="9.4.3 HTTPメソッドとリソースメソッドのバインド"></a>9.4.3 HTTPメソッドとリソースメソッドのバインド</h4><ul><li><code>@GET</code>,<code>@POST</code>などを指定</li></ul><h4 id="9-4-4-メッセージボディのデータ形式指定"><a href="#9-4-4-メッセージボディのデータ形式指定" class="headerlink" title="9.4.4 メッセージボディのデータ形式指定"></a>9.4.4 メッセージボディのデータ形式指定</h4><ul><li><p><code>@Consumes({})</code>: クライアントから受け取るデータ形式</p></li><li><p><code>@Produces({})</code>: クライアントに返却するデータ形式</p></li><li><p>MINEタイプの抽象化：<code>javax.ws.rs.core.MediaType</code></p><ul><li><code>APPLICATION_XML = &quot;application/xml&quot;;</code></li><li>などの定義がある</li></ul></li><li><p>Column コンテンツネゴシエーション</p><ul><li>クライアントがサーバーにリクエストする際に、返してもらいたいメッセージボディのデータ形式やエンコード方式などをリクエストヘッダーで要求できる</li><li>これを「HTTPコンテンツネゴシエーション」といいます。</li><li>コンテンツネゴシエーションはAcceptヘッダーに要求するデータ形式を指定して行う</li><li>要求されたデータ形式をサーバーが提供できない場合、「406 Not Acceptable」のステータスコードをクライアントに返す<ul><li><code>Accept-Charset</code>ヘッダー、<code>Accept-Language</code>ヘッダー、<code>Accept-Encoding</code>ヘッダーなど</li></ul></li></ul></li><li><p>MEMO: 見たことはあったが用語として抑えれてなかったので覚えておく</p></li><li><p>メッセージボディとJavaオブジェクトとのマッピング</p><ul><li>アンマーシャル：<code>javax.ws.rs.ext.MessageBodyReader</code></li><li>マーシャル：<code>javax.ws.rs.ext.MessageBodyWriter</code></li></ul></li></ul><h4 id="9-4-5-リクエスト情報のインジェクション"><a href="#9-4-5-リクエスト情報のインジェクション" class="headerlink" title="9.4.5 リクエスト情報のインジェクション"></a>9.4.5 リクエスト情報のインジェクション</h4><ul><li><code>@javax.ws.rs.PathParam</code>アノテーション：{id}などのパスパラメータを取得</li><li><code>@javax.ws.rs.QueryParam</code>アノテーション：クエリパラメータを取得</li><li><code>@javax.ws.rs.MatrixParam</code>アノテーション：URIのマトリクスパラメータを取得する</li><li><code>@javax.ws.rs.FormParam</code>アノテーション：HTMLのフォームから送信された情報を取得する</li><li><code>@javax.ws.rs.HeaderParam</code>アノテーション：リクエストヘッダーから値を取得する</li><li><code>@javax.ws.rs.CookieParam</code>アノテーション：リクエストのCookieヘッダーから値を取得する</li><li><code>@javax.ws.rs.core.Context</code>アノテーション：リクエストURIやリクエストヘッダー、セキュリティ情報などのコンテキスト情報を取得する汎用的なアノテーション</li><li><code>@javax.ws.rs.BeanParam</code>アノテーション：リクエストのパラメータ一式をビーンとして取得する</li><li><code>@javax.ws.rs.DefaultValue</code>アノテーション：対象に値が入らなかった場合、デフォルト値を指定するアノテーション</li></ul><h4 id="9-4-6-リクエストのメッセージボディの受取"><a href="#9-4-6-リクエストのメッセージボディの受取" class="headerlink" title="9.4.6 リクエストのメッセージボディの受取"></a>9.4.6 リクエストのメッセージボディの受取</h4><ul><li>リクエストの引数にアノテーションを付与しなければ、メッセージボディを受け取れる</li></ul><h4 id="9-4-7-入力チェック"><a href="#9-4-7-入力チェック" class="headerlink" title="9.4.7 入力チェック"></a>9.4.7 入力チェック</h4><ul><li>リクエストのメッセージボディにマッピングしているJavaオブジェクトをバリデーションするには<code>@Valid</code>アノテーションを使用する</li></ul><h4 id="9-4-8-レスポンスの定義"><a href="#9-4-8-レスポンスの定義" class="headerlink" title="9.4.8 レスポンスの定義"></a>9.4.8 レスポンスの定義</h4><ul><li><p>return する時に <code>javax.ws.rs.core.Response</code>クラスを用意している</p></li><li><p><code>Response.created(URI.create(&quot;/knowledge&quot; + knowledge.getId())).build()</code></p><ul><li>みたいな感じで生成して返却する</li></ul></li><li><p>レスポンスメッセージボディのみを指定するときは、Response型以外のオブジェクトを戻り値にするとよい</p></li><li><p>エンティティプロバイダ（<code>MessageBodyWriter</code>インターフェース実装クラス）がリクエストのAcceptヘッダーに指定されているデータ形式に変換し、レスポンスのメッセージボディに書き出します</p></li><li><p>成功時のレスポンスにメッセージボディが含まれている場合、「200 OK」</p></li><li><p>メッセージボディが含まれていない場合、「204 No Content」</p><ul><li>MEMO: レスポンスの 204 No Contentは覚えておく</li></ul></li></ul><h3 id="9-5-HTTPメソッドに応じた処理"><a href="#9-5-HTTPメソッドに応じた処理" class="headerlink" title="9.5 HTTPメソッドに応じた処理"></a>9.5 HTTPメソッドに応じた処理</h3><h4 id="9-5-1-ナレッジの検索（GETメソッドによる操作）"><a href="#9-5-1-ナレッジの検索（GETメソッドによる操作）" class="headerlink" title="9.5.1 ナレッジの検索（GETメソッドによる操作）"></a>9.5.1 ナレッジの検索（GETメソッドによる操作）</h4><h4 id="9-5-2-ナレッジの登録（POSTメソッドによる操作）"><a href="#9-5-2-ナレッジの登録（POSTメソッドによる操作）" class="headerlink" title="9.5.2 ナレッジの登録（POSTメソッドによる操作）"></a>9.5.2 ナレッジの登録（POSTメソッドによる操作）</h4><h4 id="9-5-3-ナレッジの更新（PUTメソッドによる操作）"><a href="#9-5-3-ナレッジの更新（PUTメソッドによる操作）" class="headerlink" title="9.5.3 ナレッジの更新（PUTメソッドによる操作）"></a>9.5.3 ナレッジの更新（PUTメソッドによる操作）</h4><h4 id="9-5-4-ナレッジの削除（DELETEメソッドによる操作）"><a href="#9-5-4-ナレッジの削除（DELETEメソッドによる操作）" class="headerlink" title="9.5.4 ナレッジの削除（DELETEメソッドによる操作）"></a>9.5.4 ナレッジの削除（DELETEメソッドによる操作）</h4><h4 id="9-5-5-例外クラス"><a href="#9-5-5-例外クラス" class="headerlink" title="9.5.5 例外クラス"></a>9.5.5 例外クラス</h4><ul><li><p>JAX-RSの例外クラスを使用する</p></li><li><p>JAX-RS2.0の例外体系</p><ul><li>非チェック例外である、<code>WebApplicationException</code>を用意している<ul><li>コンストラクタにステータスコードを指定すると、アプリケーションからスローされた際にステータスコードを含んだResponseインスタンスをクライントに返す</li><li>何も指定しなかったら 500 Internal Server Error</li></ul></li><li>JAX-RS2.0ではこのクラスを継承した例外クラスが追加された</li></ul></li><li><p>ClientErrorExceptionを継承した例外クラス</p><ul><li>BadRequestException(400)</li><li>NotAuthorizedException(401)</li></ul></li><li><p>ServerErrorExceptionを継承した例外クラス</p><ul><li>InternalServerErrorException(500)</li><li>ServiceUnavailableException(503)</li></ul></li><li><p>MEMO: 他のフレームワークでもこの標準エラーを使用しているような気がする。あとで確認しておく</p></li><li><p>独自例外の作成方法</p><ul><li>RuntimeExceptionを継承して例外クラスを作成</li><li>マッパークラスを作成し、JAX-RSに認識させる</li></ul></li><li><p>MEMO: 独自例外を作成することは必ず必要になってくるので、ここ後で見返しておく</p><ul><li>Responseが持っているステータスについても覚えておく</li></ul></li><li><p>MEMO: 標準提供の例外をマッピングすることも可能！</p><ul><li>標準のExceptionはステータスコードしかクライアントに返却しないため、ここでマッピングして再定義しておくと、メッセージも合わせて返却できるということ</li></ul></li></ul><h3 id="9-6-RESTクライアントクラス（クライアント側）の作成"><a href="#9-6-RESTクライアントクラス（クライアント側）の作成" class="headerlink" title="9.6 RESTクライアントクラス（クライアント側）の作成"></a>9.6 RESTクライアントクラス（クライアント側）の作成</h3><h4 id="9-6-1-データクラス（DTO）"><a href="#9-6-1-データクラス（DTO）" class="headerlink" title="9.6.1 データクラス（DTO）"></a>9.6.1 データクラス（DTO）</h4><h4 id="9-6-2-RESTクライアントクラス"><a href="#9-6-2-RESTクライアントクラス" class="headerlink" title="9.6.2 RESTクライアントクラス"></a>9.6.2 RESTクライアントクラス</h4><ul><li>MEMO: Javaクライアント側でJAX-RSのWebサービスを利用したい場合の実装方法<ul><li>BASIC認証にサードパーティのクラスを使う</li></ul></li></ul><h3 id="9-7-メッセージフィルタクラス"><a href="#9-7-メッセージフィルタクラス" class="headerlink" title="9.7 メッセージフィルタクラス"></a>9.7 メッセージフィルタクラス</h3><h4 id="9-7-1-メッセージフィルタとエンティティインターセプタ"><a href="#9-7-1-メッセージフィルタとエンティティインターセプタ" class="headerlink" title="9.7.1 メッセージフィルタとエンティティインターセプタ"></a>9.7.1 メッセージフィルタとエンティティインターセプタ</h4><ul><li>JAX-RS2.0では新たに、<ul><li>メッセージフィルタ：リクエスト&#x2F;レスポンスヘッダーの編集などに使用</li><li>エンティティボディインターセプター：エンティティボディの編集などに使用</li></ul></li></ul><p>割愛</p><ul><li>MEMO: Logging用のフィルタの実装について考える ベストプラクティスは？<ul><li>FileterとInterceptorの違い<a href="https://meetup-jp.toast.com/698">https://meetup-jp.toast.com/698</a></li></ul></li></ul><h3 id="9-8-まとめ"><a href="#9-8-まとめ" class="headerlink" title="9.8 まとめ"></a>9.8 まとめ</h3><ul><li>JAX-RS<ul><li>アノテーションでRESTful-Webサービスを作成できる</li></ul></li></ul><h2 id="Chapter10-バッチアプリケーションの開発"><a href="#Chapter10-バッチアプリケーションの開発" class="headerlink" title="Chapter10 バッチアプリケーションの開発"></a>Chapter10 バッチアプリケーションの開発</h2><p>JavaEE7では、Javaにおけるバッチ処理の標準化仕様が盛り込まれました。</p><p>この仕様はJSR352(Batch Applications for the Java Platform)で規定されている</p><p>通称「jBatch」と呼ばれている</p><h3 id="10-1-jBatchの基本"><a href="#10-1-jBatchの基本" class="headerlink" title="10.1 jBatchの基本"></a>10.1 jBatchの基本</h3><h4 id="10-1-1-バッチ処理とその特徴"><a href="#10-1-1-バッチ処理とその特徴" class="headerlink" title="10.1.1 バッチ処理とその特徴"></a>10.1.1 バッチ処理とその特徴</h4><ul><li><p>バッチ処理とは</p><ul><li>複数のデータや複数の処理を一括して実行する方式のこと</li><li>一方、Webブラウザなどの画面を介して入力と応答が繰り返される処理をリアルタイム処理、オンライン処理と呼ぶ</li></ul></li><li><p>特徴</p><ul><li>一度に多くのデータが処理される</li><li>実行時間が長い</li><li>非対話型（人間による画面での入出力操作を伴わない）</li><li>リクエストに従って起動されることよりも、実行する時刻を指定して起動されることが多い</li></ul></li></ul><h4 id="10-1-2-jBatchとは"><a href="#10-1-2-jBatchとは" class="headerlink" title="10.1.2 jBatchとは"></a>10.1.2 jBatchとは</h4><ul><li><p>jBatchとは</p><ul><li>前項で述べたような特徴を持つバッチ処理をJava言語で実装するためのフレームワーク</li><li>業務システムにおけるバッチ処理は、全体的な処理の流れや設計時に注意すべきポイントなど、</li><li>時代や言語を伴わない共通点が多く見られる</li><li>jBatchはこうした業務システムのバッチ処理似求められる要素を盛り込んだ「以前から培われている雛形」を標準として提供</li><li>jBatchを使わなくてもバッチ処理を実現できるが、活用することで、理解が容易で考慮漏れの少ないバッチ処理を効率よく提供刷ることができる</li></ul></li><li><p>jBatchの機能と構成要素</p><ul><li>大まかに言うと<ul><li>ジョブ</li><li>ステップ<ul><li>で構成される</li></ul></li></ul></li><li>ジョブ：全体の流れを記述</li><li>ステップ：ここの処理を実装する</li><li>ジョブとステップの分離により、業務の変更に対して柔軟に対応できる仕組みになっている</li></ul></li><li><p>jBatchのアーキテクチャはオープンソースのSpringBatchから多くを受け継いでいるが</p></li><li><p>ジョブとステップの分離は、メインフレーム時代から受け継がれているもの</p></li><li><p>メインフレームでは、全体の流れはジョブとしてJCLによって記述され、</p></li><li><p>業務ロジックはステップとして、COBOLやPL&#x2F;Iなどの言語で記述されたプログラムを用いて実装される</p></li><li><p>jBatchの機能と構成要素</p></li><li><p>jBatchにはジョブとステップ以外にいくつか保s所的な機能がある</p><ul><li>リスナ：ジョブやステップの開始直前または終了直後に処理を差し込む</li><li>ジョブリポジトリ：ジョブやステップの状態を永続的に保持する</li><li>コンテキスト：一時的に保持する</li><li>メトリック：統計的な情報を確認刷る</li></ul></li></ul><h4 id="10-1-3-ジョブ"><a href="#10-1-3-ジョブ" class="headerlink" title="10.1.3 ジョブ"></a>10.1.3 ジョブ</h4><ul><li><p>ジョブはステップの入れ物</p><ul><li>１つのジョブの中には１つ以上のステップが必要</li><li>XMLで記述する<ul><li>各ステップの呼び出し先クラス</li><li>実行順序</li><li>ジョブ全体や各ステップに対する設定、エラー発生時の挙動なども記述</li><li>記述のルールを示した仕様は、JSL(Job Specification Language)と呼ばれる</li><li>ジョブを記述したXMLファイルはJob XMLファイルと呼ばれる</li></ul></li><li>JSLには処理の実行順序を制御するために、以下のXML要素が用意されている<ul><li>フロー（flow）</li><li>スプリット（split）</li><li>デシジョン（decision）</li><li>遷移要素（Transition Elements）</li></ul></li></ul></li><li><p>全体図が記載されている（書籍を見たほうが良い）</p></li><li><p>フロー：複数のステップをまとめる要素</p></li><li><p>スプリット：複数のフローを同時実行させることができる</p></li><li><p>デシジョン：ジョブ内部で次の遷移先を細かくカスタマイズするための機能</p></li><li><p>遷移要素</p><ul><li>next: 遷移先には、ステップ、フロー、スプリット、デシジョンが指定できる</li><li>end: 正常終了</li><li>stop: 中断</li><li>fail: 異常終了</li></ul></li><li><p>リトライとスキップ</p><ul><li>リトライ：チャンク型ステップの処理中に特定の例外が発生した場合に、再度そのデータの処理を試みる</li><li>スキップ：チャンク型ステップの処理中に特定の例外が発生した場合に、データを飛ばして次に進む</li><li>リトライもしくはスキップ対象の例外クラスをJob XMLの中に定義</li></ul></li><li><p>ジョブオペレータ</p><ul><li>ジョブ自体の開始や停止の全体的な制御を行う</li></ul></li><li><p>ジョブオペレータの呼び出し方法</p><ul><li>バッチ処理の特徴として、「実行する時刻を指定して起動されることが多い」という点をあげたが、</li><li>jBatchの仕様にはバッチを決まった時間に起動する方式に関する規定や、それを実現するAPIも含まれていない</li><li>この部分に関しては、ジョブスケジューラを連携させる方式が一般的に<ul><li>Linuxなどであればcron</li><li>Windowsであればタスクスケジューラ</li><li>その他市販のジョブスケジューラを使用する…など</li></ul></li><li>ジョブを臨時で実行したい場合や、何らかの異常が発生し、人間が介入して原因を取り除いたあとに再実行する場合は、リクエストに従って起動することになります。（これを「アドホックな実行」と呼びます）<ul><li>そういった場合、画面などのユーザーインターフェースがあると便利だが、この点に関してもjBatchは規定ない</li></ul></li><li>実装する際には、オペレータの運用も考える必要がある</li></ul></li><li><p>MEMO: 手動実行されたジョブか、スケジュールで実行されたジョブかを識別する方法を仕込んでおいた方が良いと思った</p></li></ul><h4 id="10-1-4-ステップ"><a href="#10-1-4-ステップ" class="headerlink" title="10.1.4 ステップ"></a>10.1.4 ステップ</h4><ul><li>バッチ内部の個々の処理を実装する部分<ul><li>ステップの実態は、jBatchのAPIの中で定義されているJavaインターフェースであり、実装テンプレートを提供している</li></ul></li><li>ステップには２種類ある<ul><li>チャンク型：複数のデータを逐次的に処理するために使われる<ul><li><code>ItemReader</code>,<code>ItemProcessor</code>,<code>ItemWriter</code>の３つで構成される</li><li>ItemReaderとItemProcessorを繰り返したあと、ItemWriterが呼ばれる（デフォルトで１０回）</li><li>この塊（１０回などの処理の塊）をチャンクと呼ぶ</li></ul></li><li>バッチレット型：単体で完結する処理で使われます<ul><li>データの加工や計算を１件ずつ繰り返すような処理ではなく、データに依存しない処理やコマンド実行などの処理を担います。</li><li>例えば、ディレクトリ作成やファイル圧縮、送受信処理などの処理</li><li>「タスク志向のステップ」と呼ばれる場合もある</li><li>MEMO: このような単純な処理であれば、スクリプトで完結しそうな気もする..</li></ul></li></ul></li></ul><h4 id="10-1-5-補助機能"><a href="#10-1-5-補助機能" class="headerlink" title="10.1.5 補助機能"></a>10.1.5 補助機能</h4><ul><li><p>リスナ</p><ul><li>リスナを用いることで、バッチ処理の進行に応じた特定のタイミングで任意の処理を実行することができる</li><li>「特定のタイミング」には、ジョブやステップの開始及び終了、リトライやスキップの発生などがある</li></ul></li><li><p>各処理のタイミングごとにリスナが用意されている</p></li><li><p>リスナの設置は任意で、設置したい場合、リスナのクラス名をJob XMLの中で記述</p></li><li><p>ジョブリポジトリ：開発者が意識して操作したりしない部分みたい</p><ul><li>実行中のジョブの情報や、実行が終わったジョブに関する情報が保存される</li><li>情報の更新はコンテナによって自動的に行われ、情報の取得は、前述のジョブオペレータや、後述するコンテキスト、メトリックAPIを利用する</li></ul></li><li><p>コンテキスト</p><ul><li>種類<ul><li>ジョブコンテキスト</li><li>ステップコンテキスト</li></ul></li><li>それぞれ、実行中のジョブやステップに関する情報を提供する役割を担う<ul><li>名前やID、ステータスなどがある</li><li>コンテキストへのアクセスは、jBatchAPIのJobContext、StepContextインターフェースを経由して行います</li></ul></li></ul></li><li><p>メトリック</p><ul><li>チャンク型のステップに対して、実行時の統計情報を提供するのがメトリック</li><li>情報<ul><li>読み取りレコード数</li><li>書き込みレコード数</li><li>スキップが発生した数</li><li>など、処理量に関するもの</li></ul></li><li>メトリックへのアクセスには、jBatchAPI似あるMetricインターフェースを経由して行う</li></ul></li></ul><h3 id="10-2-jBatchの利用――基本編"><a href="#10-2-jBatchの利用――基本編" class="headerlink" title="10.2 jBatchの利用――基本編"></a>10.2 jBatchの利用――基本編</h3><ul><li>実際に実装してみる<ul><li>JobXMLの実装</li><li>チャンク型ステップの実装</li><li>バッチレット型ステップの実装</li><li>ジョブ実行部分の実装</li><li>実行結果の確認</li></ul></li></ul><h4 id="10-2-1-JobXMLの実装"><a href="#10-2-1-JobXMLの実装" class="headerlink" title="10.2.1 JobXMLの実装"></a>10.2.1 JobXMLの実装</h4><ul><li><p>バッチの全体を表すJobXMLを作成刷る</p></li><li><p>ファイル名から拡張子を取り除いた部分がそのままジョブの名前となります。</p></li><li><p>ジョブの名前は実行時にJobOperatorクラスのメソッドにわたす形で利用される</p></li><li><p>それぞれの要素説明</p><ul><li>job</li><li>step</li><li>chunk</li><li>batchlet</li></ul></li></ul><h4 id="10-2-2-チャンク型ステップの実装"><a href="#10-2-2-チャンク型ステップの実装" class="headerlink" title="10.2.2 チャンク型ステップの実装"></a>10.2.2 チャンク型ステップの実装</h4><h4 id="10-2-5-バッチレット型ステップの実装"><a href="#10-2-5-バッチレット型ステップの実装" class="headerlink" title="10.2.5 バッチレット型ステップの実装"></a>10.2.5 バッチレット型ステップの実装</h4><ul><li>Batchletを実装<ul><li>prosess,stopを実装して処理を書くだけ</li><li>保守性を高い状態に保つためにも、１機能の実装にとどめておくべき</li></ul></li></ul><h4 id="10-2-6-ジョブ実行部分の実装"><a href="#10-2-6-ジョブ実行部分の実装" class="headerlink" title="10.2.6 ジョブ実行部分の実装"></a>10.2.6 ジョブ実行部分の実装</h4><ul><li><p>JobInstanceとJobExecution</p><ul><li>最初にジョブを実行すると、コンテナ内部ではこの２つのインスタンスが生成される<ul><li>JobInstanceはジョブの１回分を表現</li><li>JobExecutionはジョブの実行そのものを表現している</li></ul></li></ul></li><li><p>パッケージング</p><ul><li>jBatchでもWebアプリケーションと同様に、構成するファイル群をwarファイル形式にまとめてコンテナにデプロイ刷る</li><li>ここで注意が必要なのは、JobXMLファイルの配置場所<ul><li>JobXMLは、warファイル内部の<code>WEB-INF/classes/META-INF/batch-jobs</code>ディレクトリの配下に「ジョブ名.xml」という名前で配置しなければ行けない</li></ul></li></ul></li><li><p>MEMO: パッケージングする際には一般的にどのようにしているか確認、Gradleとかの前処理で調整している？</p></li></ul><h4 id="10-2-7-実行結果の確認"><a href="#10-2-7-実行結果の確認" class="headerlink" title="10.2.7 実行結果の確認"></a>10.2.7 実行結果の確認</h4><p>バッチログを掲載</p><h3 id="10-3-jBatchの利用――応用編"><a href="#10-3-jBatchの利用――応用編" class="headerlink" title="10.3 jBatchの利用――応用編"></a>10.3 jBatchの利用――応用編</h3><h4 id="10-3-1-サンプル概要"><a href="#10-3-1-サンプル概要" class="headerlink" title="10.3.1 サンプル概要"></a>10.3.1 サンプル概要</h4><ul><li><p>ナレッジ件数ランキング集計バッチ</p></li><li><p>コメント件数ランキング集計バッチ</p></li><li><p>Column キーブレイク処理について</p><ul><li>マスタ表から１件読み込み、トランザクション表を操作して処理するという一連の流れ</li><li>業務におけるバッチ処理では大変多く見られるパターンの１つ</li><li>jBatchのチャンク形式のステップは、このようなキーブレイク処理を念頭においたものと言えるので、本書でも取り上げた</li><li>MEMO: チャンク形式が業務で応用されている例を確認しておくべき<ul><li>SQL一本で済ませる場合が多いのでは？</li></ul></li></ul></li></ul><h3 id="10-4-ジョブの作成"><a href="#10-4-ジョブの作成" class="headerlink" title="10.4 ジョブの作成"></a>10.4 ジョブの作成</h3><h4 id="10-4-1-Job-XMLの実装"><a href="#10-4-1-Job-XMLの実装" class="headerlink" title="10.4.1 Job XMLの実装"></a>10.4.1 Job XMLの実装</h4><ul><li>property要素を利用する方法を記載<ul><li>感覚的にはmavenみたいな感じ</li></ul></li></ul><h4 id="10-4-2-チャンクの実装"><a href="#10-4-2-チャンクの実装" class="headerlink" title="10.4.2 チャンクの実装"></a>10.4.2 チャンクの実装</h4><p>※実際に実装刷る際に必要なった時に見返す</p><h3 id="10-5-ジョブのフロー制御"><a href="#10-5-ジョブのフロー制御" class="headerlink" title="10.5 ジョブのフロー制御"></a>10.5 ジョブのフロー制御</h3><p>※実際に実装刷る際に必要なった時に見返す</p><h3 id="10-6-まとめ"><a href="#10-6-まとめ" class="headerlink" title="10.6 まとめ"></a>10.6 まとめ</h3><ul><li>終了！</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-EE-7徹底入門-標準Javaフレームワークによる高信頼性Webシステムの構築&quot;&gt;&lt;a href=&quot;#Java-EE-7徹底入門-標準Javaフレームワークによる高信頼性Webシステムの構築&quot; class=&quot;headerlink&quot; title=&quot;Java</summary>
      
    
    
    
    <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>Web製作者のためのSassの教科書</title>
    <link href="http://yoursite.com/CSS/2020-04_Web%E8%A3%BD%E4%BD%9C%E8%80%85%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AESass%E3%81%AE%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    <id>http://yoursite.com/CSS/2020-04_Web%E8%A3%BD%E4%BD%9C%E8%80%85%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AESass%E3%81%AE%E6%95%99%E7%A7%91%E6%9B%B8/</id>
    <published>2020-04-08T15:00:00.000Z</published>
    <updated>2020-04-26T03:36:09.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web製作者のためのSassの教科書"><a href="#Web製作者のためのSassの教科書" class="headerlink" title="Web製作者のためのSassの教科書"></a>Web製作者のためのSassの教科書</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">・Sassって聞いたことはあるけど、導入が面倒そう</span><br><span class="line">・Sassをはじめたいけど、あと一歩が踏み出せない</span><br><span class="line">・勉強コストとの天秤にかけて、Sassのメリットが見えない</span><br><span class="line">・周りでSassを使いはじめた人がいて、焦りを感じている</span><br><span class="line">・CSSを今よりも効率的に書きたいと思っている</span><br><span class="line"></span><br><span class="line">こうした方がSassを導入するきっかけとなり、</span><br><span class="line">ひと通りSassの機能を使いこなせるようになるのが本書の目標です。</span><br><span class="line"></span><br><span class="line">本書では、HTML+CSSの基本的な知識は必須ですが、</span><br><span class="line">Sassにまったく触れたことがない方も対象としています。</span><br><span class="line"></span><br><span class="line">CSSをHTMLの構造に合わせて入れ子で書いていく「ネスト」や</span><br><span class="line">便利な「変数」や「演算」などのSassの基本機能はもちろん、</span><br><span class="line"></span><br><span class="line">筆者が実際に仕事の現場で使っている実践的なテクニックから</span><br><span class="line">新機能もカバーした全機能リファレンスまで、この一冊で網羅しています。</span><br></pre></td></tr></table></figure><ul><li><p>発売日：2017&#x2F;9&#x2F;15</p></li><li><p>ページ数：296</p></li><li><p>サイズ：B5変形判</p></li><li><p>著者：平澤 隆（Latele）　著&#x2F;森田 壮　著</p></li><li><p>ISBN：9784295002352</p></li><li><p>URL: <a href="https://book.impress.co.jp/books/1117101020">https://book.impress.co.jp/books/1117101020</a></p></li><li><p>目次</p><ul><li>第1章 Sassのキホン</li><li>第2章 Sassの利用環境を整えよう</li><li>第3章 これだけはマスターしたいSassの基本機能</li><li>第4章 高度な機能を覚えてSassを使いこなそう</li><li>第5章 現場で使える実践Sassコーディング</li><li>第6章 もっとSassを便利にするフレームワークやツール</li><li>第7章 Sass全機能リファレンス</li></ul></li><li><p>公式サポートサイト：<a href="https://book2.scss.jp/">https://book2.scss.jp/</a></p></li></ul><h2 id="第1章-Sassのキホン"><a href="#第1章-Sassのキホン" class="headerlink" title="第1章 Sassのキホン"></a>第1章 Sassのキホン</h2><h3 id="1-1-まずはSassって何なのかを知ろう"><a href="#1-1-まずはSassって何なのかを知ろう" class="headerlink" title="1-1 まずはSassって何なのかを知ろう"></a>1-1 まずはSassって何なのかを知ろう</h3><ul><li><p>Sassは学習コストもあるけれど、CSSを覚え始めた頃のワクワク感や楽しさを思い出させてくれるよっている説明</p></li><li><p>Sass＝CSSを拡張したメタ言語</p></li><li><p>Sass(Syntactically Awesome Strylesheets)</p></li><li><p>Sassには２つの記法がある</p><ul><li>SASS記法：CSSと互換性が無い。インデントの深さで分ける</li><li>SCSS記法：CSSと互換性がある。ネストで記載</li></ul></li><li><p>SCSSファイルはコンパイルが必要だよという説明</p></li><li><p>魅力的な機能</p><ul><li>記述の簡略化（<strong>ネスト</strong>）</li><li>コメントに、<code>//</code>が使える！</li><li><strong>変数定義</strong>で同じ値を使い回すことができる</li><li>１度使ったセレクタを使い回せる（<strong>エクステンド</strong>）</li><li>コードの再利用が可能<ul><li>スタイルをまとめてテンプレートやモジュールのように定義し、簡単に読み込んで使うことができる</li><li><strong>ミックスイン</strong>と呼ばれており、Sassの中でも最も強力な機能の１つ</li></ul></li><li>１つのCSSファイルにまとめることができる（<strong>パーシャル</strong>）</li><li>条件分岐などの<strong>プログラム的な処理</strong>ができる</li><li><strong>関数で様々な処理を実行</strong>できる<ul><li>Sassにはかなり多くの関数が用意されている</li></ul></li><li>CSSファイルを圧縮できる</li><li>他にも魅力が沢山</li></ul></li><li><p>Sassの歴史について説明（割愛）</p></li></ul><h3 id="1-2-Sassを導入する前の疑問や不安"><a href="#1-2-Sassを導入する前の疑問や不安" class="headerlink" title="1-2 Sassを導入する前の疑問や不安"></a>1-2 Sassを導入する前の疑問や不安</h3><ul><li>環境構築に黒い画面を操作することに対しての不安説明</li><li>運用時にSassは導入ハードルが高いのではという不安説明<ul><li>expandedというフォーマットがあり、これを指定してコンパイルすると、普通にCSS書いたみたいになる</li><li><code>//</code>コメントは削除されてしまう</li><li>なので納品後はCSS編集という運用でも問題ない</li></ul></li></ul><h3 id="1-3-何はともあれSassを触ってみよう"><a href="#1-3-何はともあれSassを触ってみよう" class="headerlink" title="1-3 何はともあれSassを触ってみよう"></a>1-3 何はともあれSassを触ってみよう</h3><ul><li><p>使ってみる</p><ul><li>「SassMeister」で検索</li><li><a href="https://www.sassmeister.com/">https://www.sassmeister.com</a></li></ul></li><li><p>meister &#x3D; 師匠</p></li></ul><p>Sassを入力するとCSSが出力されるプレイグラウンド</p><ul><li>Sassに対応しているソースコード共有サービス<ul><li>CodePen</li><li>Create a new Fiddle - jsFiddle</li><li>jsdo.it Share Javascript, HTML5 and CSS</li><li>HTML5, CSS3, JS Demos, Creations and Experiments | CSSDeck</li></ul></li></ul><h2 id="第2章-Sassの利用環境を整えよう"><a href="#第2章-Sassの利用環境を整えよう" class="headerlink" title="第2章 Sassの利用環境を整えよう"></a>第2章 Sassの利用環境を整えよう</h2><h3 id="2-1-本書で使用する環境について"><a href="#2-1-本書で使用する環境について" class="headerlink" title="2-1 本書で使用する環境について"></a>2-1 本書で使用する環境について</h3><ul><li><p>本書では、node-sasssを使用する</p></li><li><p>Sassは大きく分けて２つのSassが存在する</p><ul><li>Ruby Sass：Rubyで開発されたもの</li><li>LibSass：C&#x2F;C++で開発されたもの</li></ul></li><li><p>node-sass</p><ul><li>LibSassをNode.jsで動作できるようにしたライブラリ</li></ul></li><li><p>Node.jsについて：Javascriptで作られたサーバーサイド環境</p></li><li><p>Gulp: タスクランナー</p></li></ul><h3 id="2-2-Node-jsをインストールする"><a href="#2-2-Node-jsをインストールする" class="headerlink" title="2-2 Node.jsをインストールする"></a>2-2 Node.jsをインストールする</h3><ul><li>Webからインストールする手順を記載</li><li>バージョン管理ツールの説明<ul><li>Windowsならnodist</li><li>Macならndenv</li></ul></li></ul><h3 id="2-3-黒い画面を使ってみよう"><a href="#2-3-黒い画面を使ってみよう" class="headerlink" title="2-3 黒い画面を使ってみよう"></a>2-3 黒い画面を使ってみよう</h3><ul><li>コマンドプロンプトを開く手順を記載しているだけ（割愛）</li></ul><h3 id="2-4-セットアップ済みの環境をインストールする"><a href="#2-4-セットアップ済みの環境をインストールする" class="headerlink" title="2-4 セットアップ済みの環境をインストールする"></a>2-4 セットアップ済みの環境をインストールする</h3><ul><li><p>サンプルファイルコピー</p><ul><li><a href="https://book2.scss.jp/dl/c2/">https://book2.scss.jp/dl/c2/</a></li></ul></li><li><p>gulp-cliをインストール</p><ul><li><code>npm install --global gulp-cli</code></li></ul></li><li><p>モジュールをインストールする</p><ul><li><code>npm install</code></li></ul></li></ul><h3 id="2-5-Sass-をコンパイルする"><a href="#2-5-Sass-をコンパイルする" class="headerlink" title="2-5 Sass をコンパイルする"></a>2-5 Sass をコンパイルする</h3><ul><li><p><code>gulpfile.js</code>に記載された処理を実行</p><ul><li><code>gulp sass</code></li></ul></li><li><p>アウトプットスタイルを指定</p><ul><li>Nested</li><li>Expanded</li><li>Compact</li><li>Compressed</li></ul></li><li><p>ファイルの更新を監視する</p><ul><li><code>gulp.watch(&#39;./sass/**/*.scss&#39;,[&#39;sass&#39;]);</code></li></ul></li></ul><h3 id="2-6-セットアップ済みの環境を作成する方法"><a href="#2-6-セットアップ済みの環境を作成する方法" class="headerlink" title="2-6 セットアップ済みの環境を作成する方法"></a>2-6 セットアップ済みの環境を作成する方法</h3><ul><li><p>npm と gulp の説明(割愛)</p></li><li><p>gulpfile.jsのジェネレータについて</p><ul><li><a href="https://steelydylan.github.io/gulp-generator/">https://steelydylan.github.io/gulp-generator/</a></li></ul></li></ul><h3 id="2-7-GUIコンパイラ（Prepros）でSassを使う"><a href="#2-7-GUIコンパイラ（Prepros）でSassを使う" class="headerlink" title="2-7 GUIコンパイラ（Prepros）でSassを使う"></a>2-7 GUIコンパイラ（Prepros）でSassを使う</h3><ul><li><a href="https://prepros.io/">https://prepros.io/</a></li><li>割愛する</li></ul><h3 id="2-8-DreamweaverでSassを使う"><a href="#2-8-DreamweaverでSassを使う" class="headerlink" title="2-8 DreamweaverでSassを使う"></a>2-8 DreamweaverでSassを使う</h3><ul><li>割愛する</li></ul><h2 id="第3章-これだけはマスターしたいSassの基本機能"><a href="#第3章-これだけはマスターしたいSassの基本機能" class="headerlink" title="第3章 これだけはマスターしたいSassの基本機能"></a>第3章 これだけはマスターしたいSassの基本機能</h2><h3 id="3-1-ルールのネスト（Nested-Rules）"><a href="#3-1-ルールのネスト（Nested-Rules）" class="headerlink" title="3-1 ルールのネスト（Nested Rules）"></a>3-1 ルールのネスト（Nested Rules）</h3><ul><li>ネストでCSS定義ができる</li><li>セレクタも使える</li><li>使いすぎるとインデントが深くなり可読性が悪くなる</li><li><code>@media</code>のネストもできる</li></ul><h3 id="3-2-親セレクタの参照-amp-（アンパサンド）"><a href="#3-2-親セレクタの参照-amp-（アンパサンド）" class="headerlink" title="3-2 親セレクタの参照&amp;（アンパサンド）"></a>3-2 親セレクタの参照&amp;（アンパサンド）</h3><ul><li><code>&amp;</code>を使えば親セレクタを参照できる</li><li>BEMやMindBEMingなどBEMの設計思想に近いCSS設計を行っている場合、記述量が大幅に削減される</li></ul><h3 id="3-3-プロパティのネスト（Nested-Properties）"><a href="#3-3-プロパティのネスト（Nested-Properties）" class="headerlink" title="3-3 プロパティのネスト（Nested Properties）"></a>3-3 プロパティのネスト（Nested Properties）</h3><ul><li>プロパティもネストさせてかけるよっていう説明</li><li>ショートハンドでかけるところをネストさせる</li><li>慣れないうちは可読性が下がる原因にもなるので、普通に書いたほうが無難</li><li>Column: -(ハイフン)があるプロパティはすべてネストできる</li></ul><h3 id="3-4-Sassで使えるコメント"><a href="#3-4-Sassで使えるコメント" class="headerlink" title="3-4 Sassで使えるコメント"></a>3-4 Sassで使えるコメント</h3><ul><li>javascriptのコメント<code>//</code>が使える</li><li>通常のCSSコメント <code>/* */</code> だとコンパイルされても残る</li><li>スタイルが「compressed」だとコメントは残らない<ul><li>「compressed」でも残るコメント<ul><li><code>/*! */</code> <code>!</code>を追加すれば残るらしい</li></ul></li></ul></li></ul><h3 id="3-5-変数（Variables）"><a href="#3-5-変数（Variables）" class="headerlink" title="3-5 変数（Variables）"></a>3-5 変数（Variables）</h3><ul><li>変数宣言ができる</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 赤色の変数を宣言</span></span><br><span class="line"><span class="variable">$red</span>: <span class="number">#cf2d3a</span>;</span><br></pre></td></tr></table></figure><ul><li>変数名で使える文字と使えない文字</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$width10</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="variable">$w-10</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="variable">$w_10</span>: <span class="number">10px</span>;</span><br><span class="line">$Ｗｉｄｔｈ１０: <span class="number">10px</span>;</span><br><span class="line">$横幅10px: <span class="number">10px</span>;</span><br><span class="line">$１０px: <span class="number">10px</span>;</span><br><span class="line">$___w10___: <span class="number">10px</span>;</span><br><span class="line"><span class="variable">$-_-______----w</span>:<span class="number">10px</span>;</span><br><span class="line">$変数はSassの便利な機能の１つです:black;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使えない文字</span></span><br><span class="line">$10width: <span class="number">10px</span>; <span class="comment">// 数字から始まっている</span></span><br><span class="line">$@width10: 10px; <span class="comment">// @など使えない記号</span></span><br><span class="line"><span class="variable">$--width</span>: <span class="number">10px</span>; <span class="comment">// 連続したハイフンから始まっている</span></span><br></pre></td></tr></table></figure><ul><li><p>ルールセット内で変数を宣言することもできる</p></li><li><p>変数を参照できる場所</p><ul><li>セレクタから参照したり、他の文字列と結合してパスを作成したい場合などに気をつける必要あり</li></ul></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$セレクタ名: <span class="string">'.pickupContentsArea, section.main'</span>;</span><br><span class="line"><span class="variable">$IMG_PATH</span>: <span class="string">'../img/bg/'</span>;</span><br><span class="line"></span><br><span class="line">#&#123;$セレクタ名&#125; &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: url(#&#123;<span class="variable">$IMG_PATH</span>&#125;pickup.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-演算"><a href="#3-6-演算" class="headerlink" title="3-6 演算"></a>3-6 演算</h3><ul><li><code>+ - * %</code>などの演算子が使える</li><li>コンパイル後は、演算結果が出力される</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// paddingの値が変わった時に変数として持っておくとwidthに反映できる</span></span><br><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">  <span class="variable">$padding</span>: <span class="number">7px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$main_width</span> - <span class="variable">$padding</span> * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>色の演算も算術演算子でできるが将来的には廃止予定らしい<ul><li><code>rgba()</code>を使おうとのこと</li></ul></li></ul><h3 id="3-7-Sassの-import"><a href="#3-7-Sassの-import" class="headerlink" title="3-7 Sassの@import"></a>3-7 Sassの@import</h3><ul><li><p>SassではCSSで使える<code>@import</code>の他に、Sass独自の<code>@import</code>機能がある</p></li><li><p>CSSファイルを生成しないパーシャル</p><ul><li>importしたSassファイルなど、特定のSassファイルをCSSファイルとして生成したくない場合、</li><li>Sassファイルのファイル名の最初に<code>_</code>アンダースコアをつけることで、コンパイルしてもCSSファイルが生成されなくなる</li><li>この機能のことをパーシャル(partial)という</li></ul></li></ul><h2 id="第4章-高度な機能を覚えてSassを使いこなそう"><a href="#第4章-高度な機能を覚えてSassを使いこなそう" class="headerlink" title="第4章 高度な機能を覚えてSassを使いこなそう"></a>第4章 高度な機能を覚えてSassを使いこなそう</h2><h3 id="4-1-スタイルの継承ができるエクステンド（-extend）"><a href="#4-1-スタイルの継承ができるエクステンド（-extend）" class="headerlink" title="4-1 スタイルの継承ができるエクステンド（@extend）"></a>4-1 スタイルの継承ができるエクステンド（@extend）</h3><ul><li><p>エクステンド＝指定したセレクタのスタイルを継承することができる機能</p></li><li><p>あまり継承しすぎると、プロパティがバッティングしてしまう可能性が高くなる</p></li><li><p>エクステンドの連鎖</p><ul><li>継承を連鎖して記載可能</li></ul></li><li><p>エクステンドが使えないセレクタの紹介</p><ul><li><code>.item p</code> 子孫セレクタ</li><li><code>#main &gt; article</code> 子セレクタ</li><li><code>h2 + h3</code> 隣接セレクタ</li><li><code>h3 ~ h3</code> 間接セレクタ</li></ul></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子孫セレクタ</span></span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">p</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子セレクタ</span></span><br><span class="line"><span class="selector-id">#main</span> &gt; <span class="selector-tag">article</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隣接セレクタ</span></span><br><span class="line"><span class="selector-tag">h2</span> + <span class="selector-tag">h3</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 間接セレクタ</span></span><br><span class="line"><span class="selector-tag">h3</span> ~ <span class="selector-tag">h3</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><ul><li>エクステンド専用のプレースホルダーセレクタ</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// エクステンド専用のプレースホルダーセレクタ</span></span><br><span class="line">%boxBase &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// プレースホルダーセレクタを継承</span></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    @<span class="keyword">extend</span> %boxBase;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">    @<span class="keyword">extend</span> %boxBase;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@media</code>内ではエクステンドは使用できない</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// これはコンパイルエラーになってしまう</span></span><br><span class="line">%btnBase &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> all and (orientation:landscape) &#123;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">        @<span class="keyword">extend</span> %btnBase;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// こちらに書き直すとうまくいく</span></span><br><span class="line">@<span class="keyword">media</span> all and (orientation:landscape) &#123;</span><br><span class="line">    %btnBase &#123;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">        @<span class="keyword">extend</span> %btnBase;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>警告を抑止する <code>!optional</code>フラグ</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">    @<span class="keyword">extend</span> %btnBase !optional;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-柔軟なスタイルの定義が可能なミックスイン（-mixin）"><a href="#4-2-柔軟なスタイルの定義が可能なミックスイン（-mixin）" class="headerlink" title="4-2 柔軟なスタイルの定義が可能なミックスイン（@mixin）"></a>4-2 柔軟なスタイルの定義が可能なミックスイン（@mixin）</h3><ul><li>スタイルの集まりを定義しておき、それを他の場所で呼び出して使うことができる</li><li>また、引数を指定することで、定義したミックスインの値を一部変更して使うといった、非常に柔軟で強力な処理が可能</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ミックスインを定義</span></span><br><span class="line">@<span class="keyword">mixin</span> boxSet &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定義したミックスインを呼び出し</span></span><br><span class="line"><span class="selector-class">.relatedArea</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> boxSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>エクステンドと違ってコンパイル後に、展開されて出力されることを確認</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義したミックスインを呼び出し</span></span><br><span class="line"><span class="selector-class">.relatedArea</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> boxSet;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 別のルールセットでも呼び出し</span></span><br><span class="line"><span class="selector-class">.pickupArea</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> boxSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.relatedArea</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pickupArea</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引数を使ったミックスイン</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引数を使ったミックスインを定義</span></span><br><span class="line">@<span class="keyword">mixin</span> kadomaru(<span class="variable">$value</span>) &#123;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="variable">$value</span>;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="variable">$value</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> kadomaru(<span class="number">3px</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">    @<span class="keyword">include</span> kadomaru(<span class="number">5px</span> 10px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可変でプロパティを定義できる</span></span><br></pre></td></tr></table></figure><ul><li>引数に初期値を設定することもできる</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> kadomaru(<span class="variable">$value</span>: 3px) &#123;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="variable">$value</span>;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="variable">$value</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxA</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> kadomaru;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxB</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> kadomaru();</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.boxA</span> &#123;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxB</span> &#123;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引数を複数指定することもできる</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> boxBase(<span class="variable">$margin</span>: 30px 0, <span class="variable">$padding</span>: 10px) &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="variable">$margin</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="variable">$padding</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.boxA</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> boxBase;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxB</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> boxBase(<span class="number">0</span> 0 50px, 20px);</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>,(カンマ)を使うプロパティには可変長引数を利用する</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> shadow(<span class="variable">$value</span>...) &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> shadow(<span class="number">8px</span> 8px 0 <span class="number">#999</span>, 15px -10px 0 <span class="number">#eee</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>複数の引数があるミックスインを読み込む際に可変長引数を使う</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> boxBase(<span class="variable">$w</span>: 250px, <span class="variable">$pd</span>: 15px, <span class="variable">$bg_c</span>: <span class="number">#fff</span>, <span class="variable">$bd_c</span>: <span class="number">#ccc</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="variable">$pd</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$bg_c</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">$bd_c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$values</span>: <span class="number">300px</span>, <span class="number">20px</span>; <span class="comment">// こういう変数定義もできるんだと知った</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    @<span class="keyword">include</span> boxBase(<span class="variable">$values</span>...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ミックスインのスコープ（利用できる範囲）を制限する</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    @<span class="keyword">mixin</span> margin &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.item</span> &#123;</span><br><span class="line">        @<span class="keyword">include</span> margin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// あまりスコープを制限する例は無いが一応覚えておく</span></span><br></pre></td></tr></table></figure><ul><li>ミックスインにコンテントブロックを渡す <code>@content</code><ul><li>→これは便利！</li></ul></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> media(<span class="variable">$width-media</span>: 768px) &#123;</span><br><span class="line">    @<span class="keyword">media</span> only screen and (max-width: <span class="variable">$width-media</span>) &#123;</span><br><span class="line">        @<span class="keyword">content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="selector-class">.image</span> &#123;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        @<span class="keyword">include</span> media &#123;</span><br><span class="line">            <span class="attribute">float</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.text</span> &#123;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">        @<span class="keyword">include</span> media &#123;</span><br><span class="line">            <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> <span class="selector-class">.image</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.item</span> <span class="selector-class">.image</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.item</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ミックスイン名で使える文字と使えない文字</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> shadow1 &#123; ～ &#125;</span><br><span class="line">@<span class="keyword">mixin</span> shadow-1 &#123; ～ &#125;</span><br><span class="line">@<span class="keyword">mixin</span> shadow_1 &#123; ～ &#125;</span><br><span class="line">@<span class="keyword">mixin</span> 影 &#123; ～ &#125;</span><br><span class="line">@<span class="keyword">mixin</span> ｓｈａｄｏw &#123; ～ &#125;</span><br><span class="line">@<span class="keyword">mixin</span> _shadow &#123; ～ &#125;</span><br><span class="line">@<span class="keyword">mixin</span> -shadow &#123; ～ &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使えない文字</span></span><br><span class="line">@<span class="keyword">mixin</span> 01shadow &#123; ～ &#125; <span class="comment">// 数字から始まっている</span></span><br><span class="line">@<span class="keyword">mixin</span> shadow@<span class="number">2</span> &#123; ～ &#125; <span class="comment">// @など使えない記号</span></span><br><span class="line">@<span class="keyword">mixin</span> --shadow &#123; ～ &#125; <span class="comment">// 連続したハイフンから始まっている</span></span><br></pre></td></tr></table></figure><h3 id="4-3-ネストしているセレクタをルートに戻せる-at-root"><a href="#4-3-ネストしているセレクタをルートに戻せる-at-root" class="headerlink" title="4-3 ネストしているセレクタをルートに戻せる @at-root"></a>4-3 ネストしているセレクタをルートに戻せる @at-root</h3><ul><li>あまり使い所が無いと感じたが、使える場面があるらしい</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line">    <span class="selector-class">.element-A</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @at-root .element-B &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span> <span class="selector-class">.element-A</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.element-B</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使い所は５章で確認する</li></ul><h3 id="4-4-Sassのデータタイプについて"><a href="#4-4-Sassのデータタイプについて" class="headerlink" title="4-4 Sassのデータタイプについて"></a>4-4 Sassのデータタイプについて</h3><ul><li>Sassのデータ・タイプについて</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.DataTypes</span> &#123;</span><br><span class="line">    <span class="comment">/* Number型 */</span></span><br><span class="line">    property: type-of(<span class="number">10%</span>);</span><br><span class="line">    <span class="comment">/* Color型 */</span></span><br><span class="line">    property: type-of(red);</span><br><span class="line">    <span class="comment">/* String型 */</span></span><br><span class="line">    property: type-of(sans-serif);</span><br><span class="line">    <span class="comment">/* Boolean型 */</span></span><br><span class="line">    property: type-of(true);</span><br><span class="line">    <span class="comment">/* Null型 */</span></span><br><span class="line">    property: type-of(null);</span><br><span class="line">    <span class="comment">/* List型 */</span></span><br><span class="line">    property: type-of(<span class="number">1.5em</span> <span class="number">1em</span> <span class="number">0</span> <span class="number">2em</span>);</span><br><span class="line">    <span class="comment">/* Map型 */</span></span><br><span class="line">    <span class="variable">$map</span>:(key1: value1, key2: value2);</span><br><span class="line">    property: type-of(<span class="variable">$map</span>);</span><br><span class="line">    <span class="comment">/* Function型 */</span></span><br><span class="line">    property: type-of(get-function(<span class="string">"lighten"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.DataTypes</span> &#123;</span><br><span class="line">  <span class="comment">/* Number型 */</span></span><br><span class="line">  <span class="attribute">property</span>: number;</span><br><span class="line">  <span class="comment">/* Color型 */</span></span><br><span class="line">  <span class="attribute">property</span>: color;</span><br><span class="line">  <span class="comment">/* String型 */</span></span><br><span class="line">  <span class="attribute">property</span>: string;</span><br><span class="line">  <span class="comment">/* Boolean型 */</span></span><br><span class="line">  <span class="attribute">property</span>: bool;</span><br><span class="line">  <span class="comment">/* Null型 */</span></span><br><span class="line">  <span class="attribute">property</span>: null;</span><br><span class="line">  <span class="comment">/* List型 */</span></span><br><span class="line">  <span class="attribute">property</span>: list;</span><br><span class="line">  <span class="comment">/* Map型 */</span></span><br><span class="line">  <span class="attribute">property</span>: map;</span><br><span class="line">  <span class="comment">/* Function型 */</span></span><br><span class="line">  <span class="attribute">property</span>: function;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@function example(<span class="variable">$value</span>) &#123;</span><br><span class="line">    @<span class="keyword">if</span> type-of(<span class="variable">$value</span>) == number &#123;</span><br><span class="line">        処理</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// typeで判断して関数を作れますよという説明</span></span><br></pre></td></tr></table></figure><h3 id="4-5-制御構文で条件分岐や繰り返し処理を行う"><a href="#4-5-制御構文で条件分岐や繰り返し処理を行う" class="headerlink" title="4-5 制御構文で条件分岐や繰り返し処理を行う"></a>4-5 制御構文で条件分岐や繰り返し処理を行う</h3><ul><li><code>@if</code>,<code>@for</code>,<code>@while</code>,<code>@each</code>を使って表現</li></ul><h3 id="4-6-関数を使ってさまざまな処理を実行する"><a href="#4-6-関数を使ってさまざまな処理を実行する" class="headerlink" title="4-6 関数を使ってさまざまな処理を実行する"></a>4-6 関数を使ってさまざまな処理を実行する</h3><ul><li><p>Sassには予め用意された関数がある</p></li><li><p>使用頻度の高いものをピックアップして紹介</p></li><li><p>参照 <a href="https://book2.scss.jp/code/c4/06.html">https://book2.scss.jp/code/c4/06.html</a></p></li></ul><h3 id="4-7-自作関数を定義する-function"><a href="#4-7-自作関数を定義する-function" class="headerlink" title="4-7 自作関数を定義する@function"></a>4-7 自作関数を定義する@function</h3><ul><li>自作関数の定義方法 そんなに変わったことはしていない</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$width</span>: <span class="number">105px</span>;</span><br><span class="line">@function halfSize(<span class="variable">$value</span>:<span class="variable">$width</span>) &#123;</span><br><span class="line">    @return round(<span class="variable">$value</span> / 2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxA</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: halfSize();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.boxB</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: halfSize(<span class="number">200px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-8-テストやデバックで使える-debug、-warn、-error"><a href="#4-8-テストやデバックで使える-debug、-warn、-error" class="headerlink" title="4-8 テストやデバックで使える@debug、@warn、@error"></a>4-8 テストやデバックで使える@debug、@warn、@error</h3><ul><li>変数のデバッグに使用できる機能もある</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">debug</span> 10em + 12em;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.scss:1 DEBUG: 22em</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WARNで警告</span></span><br><span class="line"><span class="variable">$value</span>: <span class="number">1000px</span>;</span><br><span class="line">@function warnTest()&#123;</span><br><span class="line">    @<span class="keyword">if</span> unitless(<span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="variable">$value</span>: <span class="variable">$value</span> + px;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">else</span> &#123;</span><br><span class="line">    @<span class="keyword">warn</span> <span class="string">"#&#123;$value&#125;は駄目！$valueに単位は入れないで！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @return <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: warnTest();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ERROR で処理を中断</span></span><br><span class="line"><span class="variable">$value</span>: <span class="number">1000px</span>;</span><br><span class="line">@function errorTest()&#123;</span><br><span class="line">    @<span class="keyword">if</span> unitless(<span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="variable">$value</span>: <span class="variable">$value</span> + px;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">else</span> &#123;</span><br><span class="line">    @error <span class="string">"#&#123;$value&#125;は駄目！$valueに単位は入れないで！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @return <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: errorTest();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-9-使いどころに合わせて補完（インターポレーション）してくれる"><a href="#4-9-使いどころに合わせて補完（インターポレーション）してくれる" class="headerlink" title="4-9 使いどころに合わせて補完（インターポレーション）してくれる#{}"></a>4-9 使いどころに合わせて補完（インターポレーション）してくれる#{}</h3><ul><li><p>インターポレーションとは</p><ul><li>変数が参照できない場所でも使うことができるようにする機能</li><li><code>#{}</code>←これ</li></ul></li><li><p>演算しないようにする</p><ul><li><code>font: #{$font-size}/#{$line-height}</code></li></ul></li><li><p>演算できない場所で演算する</p><ul><li><code>.mt#{$i * 5} {</code></li></ul></li></ul><h3 id="4-10-変数の振る舞いをコントロールする-default-と-global"><a href="#4-10-変数の振る舞いをコントロールする-default-と-global" class="headerlink" title="4-10 変数の振る舞いをコントロールする !default と !global"></a>4-10 変数の振る舞いをコントロールする !default と !global</h3><ul><li><p><code>!default</code>フラグ</p><ul><li>デフォルト値とは上書きされることを前提にした変数の初期値</li><li>このフラグを使用していると、先に宣言されている変数が優先される<ul><li>→ライブラリで使用しているの確認済み。よく使われる</li></ul></li></ul></li><li><p><code>!global</code>フラグ</p><ul><li>ローカル変数をグローバル変数にするフラグ</li><li>グローバル変数とはドキュメントルートで宣言した、どこからでも参照できる変数のこと</li><li>ネスト内からグローバル変数を上書きしたい場合や、ローカル変数をスコープ外から参照したい場合などに使用する</li></ul></li></ul><h2 id="第5章-現場で使える実践Sassテクニック"><a href="#第5章-現場で使える実践Sassテクニック" class="headerlink" title="第5章 現場で使える実践Sassテクニック"></a>第5章 現場で使える実践Sassテクニック</h2><h3 id="5-1-管理／運用・設計で使えるテクニック"><a href="#5-1-管理／運用・設計で使えるテクニック" class="headerlink" title="5-1 管理／運用・設計で使えるテクニック"></a>5-1 管理／運用・設計で使えるテクニック</h3><ul><li><p>ネストが深すぎると生じる問題を把握して、バランスを見ながら利用する</p></li><li><p>ネストが深すぎて可読性が落ちてしまう</p></li><li><p>セレクタが長くなってしまうことの弊害</p><ul><li>CSSが肥大化する</li></ul></li><li><p>Column: ネストは何階層までがよいか</p><ul><li>2～3階層程度にするのがよい</li><li>HTMLのツリー構造に沿った形でCSSを指定するストラクチャタイプの設計の場合は、</li><li>ある程度ネストを深くしたほうがよい</li></ul></li><li><p>CSSとは違うパーシャルによるSassファイルの分割</p><ul><li><code>_mixin.scss</code>など分けて作成して、<code>@import</code>でまとめる</li></ul></li><li><p>サイトの基本設定を変数にして一元管理する</p></li><li><p>複数人で制作する場合は各自のSassファイルを用意する</p><ul><li>Gitなどが汚れるのではとも感じる…</li></ul></li><li><p>コメントを活用してソースをわかりやすくする</p></li><li><p>大規模サイトで活用できる<code>@import</code>のネスト</p></li><li><p>&amp;(アンパサンド)を活用してBEM的な設計を快適に</p></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.navigation</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &amp;__item &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">        &amp;_state_active &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@keyframes</code>をルールセット内に書いて関係性をわかりやすくする</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">    @keyframes anima-example &#123;</span><br><span class="line">        0% &#123;</span><br><span class="line">            <span class="attribute">transform</span>: translate(<span class="number">0%</span>, -<span class="number">100%</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        100% &#123;</span><br><span class="line">            <span class="attribute">transform</span>: translate(<span class="number">0%</span>, <span class="number">0%</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">animation</span>: anima-example <span class="number">0.9s</span> linear <span class="number">500ms</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@keyframes</code>はルートに書き出してくれる</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: anima-example <span class="number">0.9s</span> linear <span class="number">500ms</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> anima-example &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0%, -100%);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0%, 0%);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>EditorConfigとStylelintでコーディングルールを統一する</p><ul><li>EditorConfig：拡張機能を入れて、<code>.editorconfig</code>ファイルを作成</li><li>Stylelint：拡張機能を入れる<ul><li><code>npm install --global stylelint</code></li><li><code>.stylelintrc</code>という設定ファイルをおけばOK</li></ul></li></ul></li><li><p>Column: 他の人を思いやってSass設計をしよう</p><ul><li>本書のシリーズ「Web製作者のためのCSS設計の教科書」はFLOCSS（フロックス）を提唱しているらしい</li></ul></li></ul><h3 id="5-2-レイアウト・パーツで使えるテクニック"><a href="#5-2-レイアウト・パーツで使えるテクニック" class="headerlink" title="5-2 レイアウト・パーツで使えるテクニック"></a>5-2 レイアウト・パーツで使えるテクニック</h3><ul><li>clearfixをミックスインで活用する</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> clearfix &#123;</span><br><span class="line">    &amp;::after &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">clear</span>: both;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// include</span></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> .clearfix;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="selector-class">.image</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>変数を使って、サイドバーの幅を自動的に計算する</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全体の幅</span></span><br><span class="line"><span class="variable">$wrap-width</span>: <span class="number">960px</span>;</span><br><span class="line"><span class="comment">// メインエリアの幅</span></span><br><span class="line"><span class="variable">$main-width</span>: <span class="number">640px</span>;</span><br><span class="line"><span class="comment">// サイドバーの幅</span></span><br><span class="line"><span class="variable">$side_width</span>: <span class="variable">$wrap_width</span> - <span class="variable">$main_width</span> - <span class="number">20</span>;</span><br><span class="line"><span class="selector-id">#contents</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$wrap_width</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$main_width</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#side</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$side_width</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>nullで簡単に条件分岐してレイアウトする</p><ul><li>nullを指定するとコンパイルした時にプロパティごと生成されない</li></ul></li><li><p>calc と Sass を組み合わせて四則演算を便利に使う</p><ul><li>calcと組み合わせる際の注意点について</li></ul></li><li><p><code>@for</code>を使って余白調整用のclassを生成する</p></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$spaceClass</span>: true !default;</span><br><span class="line"><span class="variable">$spacePadding</span>: false !default;</span><br><span class="line"><span class="variable">$endValue</span>: <span class="number">10</span> !default;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">if</span> <span class="variable">$spaceClass</span> &#123;</span><br><span class="line">    @<span class="keyword">for</span> <span class="variable">$i</span> from 0 through <span class="variable">$space_endValue</span> &#123;</span><br><span class="line">        <span class="selector-class">.mt</span>#&#123;<span class="variable">$i</span> * 5&#125; &#123;</span><br><span class="line">            <span class="attribute">margin-top</span>: <span class="number">5px</span> * <span class="variable">$i</span> <span class="meta">!important</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.mb</span>#&#123;<span class="variable">$i</span> * 5&#125; &#123;</span><br><span class="line">            <span class="attribute">margin-bottom</span>: <span class="number">5px</span> * <span class="variable">$i</span> <span class="meta">!important</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">if</span> <span class="variable">$spacePadding</span> &#123;</span><br><span class="line">            <span class="selector-class">.pt</span>#&#123;<span class="variable">$i</span> * 5&#125; &#123;</span><br><span class="line">                <span class="attribute">padding-top</span>: <span class="number">5px</span> * <span class="variable">$i</span> <span class="meta">!important</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.pb</span>#&#123;<span class="variable">$i</span> * 5&#125; &#123;</span><br><span class="line">                <span class="attribute">padding-bottom</span>: <span class="number">5px</span> * <span class="variable">$i</span> <span class="meta">!important</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mt0</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mb0</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mt5</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mb5</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">...（略）...</span><br><span class="line"><span class="selector-class">.mt50</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">50px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mb50</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">50px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">// あまり作成しすぎるとCSSコード量も増えるので程々に</span><br></pre></td></tr></table></figure><ul><li><p>リストマーカー用の連番を使った class名 を作成する</p></li><li><p>連番を使ったclass名のゼロパディング（0埋め）をする</p></li><li><p>文字リンクカラーのミックスインを作る</p></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> link-color2(<span class="variable">$n</span>) &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$n</span>;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        <span class="attribute">color</span>: lighten(<span class="variable">$n</span>, <span class="number">30%</span>);</span><br><span class="line">        <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> link-color2(<span class="number">#f00</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>複数の値を<code>@each</code>でループし、ページによって背景を変更する</p></li><li><p>シンプルなグラデーションのミックスインを作る</p></li><li><p>Map型と<code>@each</code>を使ってSNSアイコンを管理する</p></li><li><p>値が比較しづらい <code>z-index</code> をMap型で一括管理する</p></li><li><p>メディアクエリ用のミックスインを作成して楽々レスポンシブ対応</p></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$breakpoints</span>: (</span><br><span class="line">    xs: <span class="string">"only screen and (max-width: 320px)"</span>,</span><br><span class="line">    s: <span class="string">"only screen and (max-width: 575px)"</span>,</span><br><span class="line">    m: <span class="string">"only screen and (max-width: 767px)"</span>,</span><br><span class="line">    l: <span class="string">"only screen and (max-width: 991px)"</span>,</span><br><span class="line">    xl: <span class="string">"only screen and (max-width: 1199px)"</span>,</span><br><span class="line">);</span><br><span class="line">@<span class="keyword">mixin</span> media(<span class="variable">$breakpoint</span>) &#123;</span><br><span class="line">    @<span class="keyword">media</span> #&#123;<span class="selector-tag">map</span>-get(<span class="variable">$breakpoints</span>, <span class="variable">$breakpoint</span>)&#125; &#123;</span><br><span class="line">        @<span class="keyword">content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    @<span class="keyword">include</span> media(l) &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: blue;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">include</span> media(m) &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">include</span> media(xs) &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-スマホ・マルチデバイス、ブラウザで使えるテクニック"><a href="#5-3-スマホ・マルチデバイス、ブラウザで使えるテクニック" class="headerlink" title="5-3 スマホ・マルチデバイス、ブラウザで使えるテクニック"></a>5-3 スマホ・マルチデバイス、ブラウザで使えるテクニック</h3><h3 id="5-4-gulpのタスクを追加してもっと便利な環境にする"><a href="#5-4-gulpのタスクを追加してもっと便利な環境にする" class="headerlink" title="5-4 gulpのタスクを追加してもっと便利な環境にする"></a>5-4 gulpのタスクを追加してもっと便利な環境にする</h3><ul><li>パーシャルファイルを一括で読み込む</li><li>ソースマップでコンパイル前のソース場所を知る</li><li>エラー時にWatchを停止させずに、自動コンパイルを継続させる</li><li>エラーに気づきやすくするために通知を出す</li></ul><h3 id="5-5-PostCSSでSassをさらに便利にする"><a href="#5-5-PostCSSでSassをさらに便利にする" class="headerlink" title="5-5 PostCSSでSassをさらに便利にする"></a>5-5 PostCSSでSassをさらに便利にする</h3><ul><li><p>PostCSSとは</p><ul><li>Node.js製のCSSの変換ツール</li></ul></li><li><p>ベンダープレフィックスを自動付与する</p><ul><li>対象ブラウザを確認するには<ul><li><a href="https://browserl.ist/">https://browserl.ist/</a></li></ul></li></ul></li><li><p>画像名だけで画像のパスやサイズを取得する</p></li><li><p>CSSプロパティの記述順を自動でソートする</p><ul><li>並び替えオーダーの種類<ul><li>alphabetically</li><li>smacss</li><li>concentric-css</li></ul></li></ul></li><li><p>バラバラになったメディアクエリをまとめてコード量を削減してスッキリさせる</p></li></ul><h2 id="第6章-もっとSassを便利にするフレームワークやツール"><a href="#第6章-もっとSassを便利にするフレームワークやツール" class="headerlink" title="第6章 もっとSassを便利にするフレームワークやツール"></a>第6章 もっとSassを便利にするフレームワークやツール</h2><h3 id="6-1-Sassのフレームワーク紹介"><a href="#6-1-Sassのフレームワーク紹介" class="headerlink" title="6-1 Sassのフレームワーク紹介"></a>6-1 Sassのフレームワーク紹介</h3><h3 id="6-2-SassのGUIコンパイラ"><a href="#6-2-SassのGUIコンパイラ" class="headerlink" title="6-2 SassのGUIコンパイラ"></a>6-2 SassのGUIコンパイラ</h3><h2 id="第7章-Sass全機能リファレンス"><a href="#第7章-Sass全機能リファレンス" class="headerlink" title="第7章 Sass全機能リファレンス"></a>第7章 Sass全機能リファレンス</h2><h3 id="7-1-Sassの基本と高度な機能"><a href="#7-1-Sassの基本と高度な機能" class="headerlink" title="7-1 Sassの基本と高度な機能"></a>7-1 Sassの基本と高度な機能</h3><h3 id="7-2-Sassの関数一覧"><a href="#7-2-Sassの関数一覧" class="headerlink" title="7-2 Sassの関数一覧"></a>7-2 Sassの関数一覧</h3><h3 id="7-3-Sassの拡張"><a href="#7-3-Sassの拡張" class="headerlink" title="7-3 Sassの拡張"></a>7-3 Sassの拡張</h3><h2 id="付録"><a href="#付録" class="headerlink" title="付録"></a>付録</h2><h2 id="コマンド一覧"><a href="#コマンド一覧" class="headerlink" title="コマンド一覧"></a>コマンド一覧</h2><h2 id="用語集"><a href="#用語集" class="headerlink" title="用語集"></a>用語集</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web製作者のためのSassの教科書&quot;&gt;&lt;a href=&quot;#Web製作者のためのSassの教科書&quot; class=&quot;headerlink&quot; title=&quot;Web製作者のためのSassの教科書&quot;&gt;&lt;/a&gt;Web製作者のためのSassの教科書&lt;/h1&gt;&lt;figure c</summary>
      
    
    
    
    <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>１分で話せ</title>
    <link href="http://yoursite.com/EX/2020-03_%EF%BC%91%E5%88%86%E3%81%A7%E8%A9%B1%E3%81%9B/"/>
    <id>http://yoursite.com/EX/2020-03_%EF%BC%91%E5%88%86%E3%81%A7%E8%A9%B1%E3%81%9B/</id>
    <published>2020-02-29T15:00:00.000Z</published>
    <updated>2020-04-26T03:36:09.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="１分で話せ"><a href="#１分で話せ" class="headerlink" title="１分で話せ"></a>１分で話せ</h1><ul><li>立ち読みレベル</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">プレゼンのゴールを設定する</span><br><span class="line">相手に動いて欲しいのか？</span><br><span class="line">相手に賛成、許可をして欲しいのか</span><br><span class="line">意見が欲しいのか、教えて欲しいのか</span><br><span class="line"></span><br><span class="line">ロジカルな１分ストーリーを考える</span><br><span class="line">主張　結論がある</span><br><span class="line">複数の根拠がある　意味が結論に通じている</span><br><span class="line"></span><br><span class="line">根拠は３つ必要</span><br><span class="line">あのお店美味しいから行こう！</span><br><span class="line">じゃあ、美味しいお店は他にもあるよ、、</span><br><span class="line">あのお店美味しくて、安くて、雰囲気いいから行こう！</span><br><span class="line">そこまでいうなら行ってみようか！</span><br><span class="line"></span><br><span class="line">より聞き手に伝わるように削った文章を話す</span><br><span class="line">基本的に、は、例外を離さないならいらない</span><br><span class="line">念頭に、は、~すべく</span><br><span class="line">横文字は伝わりやすいか考える</span><br><span class="line">先ほど述べたように、も、いらない</span><br><span class="line"></span><br><span class="line">頑張ったことは話すな</span><br><span class="line">結論だけ話すこと！</span><br><span class="line"></span><br><span class="line">聞き手の数や会議室の広さを考えて</span><br><span class="line">パワポの文字サイズを考える</span><br><span class="line">1番後ろの席の人が見えるように</span><br><span class="line"></span><br><span class="line">聞き手が行動するもう一歩をイメージさせる</span><br><span class="line">ポイントについての深掘りをするために</span><br><span class="line">たとえば、具体的に、などで繋げて話す</span><br><span class="line"></span><br><span class="line">人は80%のことを聞いていない</span><br><span class="line">キチリクルンの例</span><br><span class="line">私という人間はどういう人間かを伝えることが大事</span><br><span class="line">覚えてもらうことが大事</span><br><span class="line">会社の上司に説明してもらうことが大事</span><br><span class="line">そのためには短い言葉で印象に残らせる必要がある</span><br><span class="line"></span><br><span class="line">人前で話すときの4つのポイント</span><br><span class="line">視線　しっかり相手を見る</span><br><span class="line">手振り　多少、動きをつける</span><br><span class="line">声　相手と対話するように声を届ける</span><br><span class="line">間合い　話の区切りで普段より3秒ほど長く間をとってみる</span><br><span class="line"></span><br><span class="line">メタ認知は優秀なビジネスパーソンに共通するスキル</span><br><span class="line"></span><br><span class="line">■人から話しかけられた時</span><br><span class="line">◯状況判断</span><br><span class="line">・目的は何なのか（連絡されるのか、相談されるのか、何かしてほしいのか）</span><br><span class="line">・相手の目的を満たす回答をする</span><br><span class="line">・この話はどれくらいかかるのかを考える（場合によっては後に回してもらう）</span><br><span class="line"></span><br><span class="line">■人に話しかける時</span><br><span class="line">◯目的別</span><br><span class="line">・報告、連絡</span><br><span class="line">・相談、解決策やアドバイスが欲しい</span><br><span class="line">・依頼、何かをして欲しい</span><br><span class="line">・説得、自分はこう思う、理由はこうです</span><br><span class="line">・雑談</span><br><span class="line">◯ジェスチャー、振る舞い</span><br><span class="line">・視線 しっかり相手の目を見る</span><br><span class="line">・手振り 多少動きをつける</span><br><span class="line">・声 相手に声を確実に届ける、聞こえているか、理解しているかを確認しないままだらだら話さない</span><br><span class="line">・間合い 話の区切りで3秒ほど長く間をとる</span><br><span class="line">◯構成</span><br><span class="line">・結論ファースト</span><br><span class="line">・要点をまとめておく</span><br><span class="line">◯振り返り</span><br><span class="line">・メタ認知</span><br><span class="line">・反省</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;１分で話せ&quot;&gt;&lt;a href=&quot;#１分で話せ&quot; class=&quot;headerlink&quot; title=&quot;１分で話せ&quot;&gt;&lt;/a&gt;１分で話せ&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;立ち読みレベル&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="EX" scheme="http://yoursite.com/categories/EX/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>AngularWebアプリ開発スタートブック</title>
    <link href="http://yoursite.com/EX/2020-02_Angular%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    <id>http://yoursite.com/EX/2020-02_Angular%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</id>
    <published>2020-02-14T15:00:00.000Z</published>
    <updated>2020-02-24T12:31:34.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angularアプリケーションプログラミング"><a href="#Angularアプリケーションプログラミング" class="headerlink" title="Angularアプリケーションプログラミング"></a>Angularアプリケーションプログラミング</h1><ul><li><p>電子書籍購入</p></li><li><p>説明書</p></li><li><p><a href="/pdf/Angular%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0.pdf">学習ログ</a></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">こちらの書籍は 2019&#x2F;06&#x2F;19 紙版の3刷に対応するため更新をおこないました。</span><br><span class="line">（概要）</span><br><span class="line">本書は，JavaScriptの定番SPA開発フレームワーク「Angular」の解説書です。データバインディング，コンポーネント，依存性注入といったAngularを理解するための基本要素をはじめ，ディレクティブ／パイプ，フォーム，ルーティング，モジュール／コンポーネントの技術解説，ディレクティブ／パイプ／サービスの自作やテストなどの応用的なテーマまでを網羅。また，Angular 4に対応し，5以降のアップグレードにも留意した解説を行っています。Angularによる動的Webアプリケーション開発に必要となる知識が，この1冊で身に付きます！</span><br><span class="line"></span><br><span class="line">（こんな方におすすめ）</span><br><span class="line">・Angularを利用したSPAアプリケーション開発に興味のある人</span><br><span class="line"></span><br><span class="line">（目次）</span><br><span class="line">導入編</span><br><span class="line">第1章イントロダクション</span><br><span class="line"></span><br><span class="line">第2章Angular の基本</span><br><span class="line"></span><br><span class="line">第3章データバインディング</span><br><span class="line"></span><br><span class="line">基本編</span><br><span class="line">第4章標準パイプ／ディレクティブ</span><br><span class="line"></span><br><span class="line">第5章フォーム開発</span><br><span class="line"></span><br><span class="line">第6章コンポーネント開発</span><br><span class="line"></span><br><span class="line">第7章サービス開発</span><br><span class="line"></span><br><span class="line">応用編</span><br><span class="line">第8章ルーティング</span><br><span class="line"></span><br><span class="line">第9章パイプ／ディレクティブの自作</span><br><span class="line"></span><br><span class="line">第10章テスト</span><br><span class="line"></span><br><span class="line">第11章関連ライブラリ／ツール</span><br><span class="line"></span><br><span class="line">AppendixTypeScript簡易リファレンス</span><br><span class="line"></span><br><span class="line">フォーマット： Kindle版</span><br><span class="line">ファイルサイズ： 56752 KB</span><br><span class="line">推定ページ数： 838 ページ</span><br><span class="line">出版社: 技術評論社 (2017&#x2F;8&#x2F;4)</span><br><span class="line">販売： Amazon Services International, Inc.</span><br><span class="line">言語: 日本語</span><br><span class="line">ASIN: B074M54GM5</span><br><span class="line">Text-to-Speech（テキスト読み上げ機能）: 有効 </span><br><span class="line">X-Ray:</span><br><span class="line">有効</span><br><span class="line">Word Wise: 有効にされていません</span><br><span class="line">カスタマーレビュー: 5つ星のうち 4.7   14件のカスタマーレビュー</span><br><span class="line">Amazon 売れ筋ランキング: Kindleストア 有料タイトル - 21,411位 (Kindleストア 有料タイトルの売れ筋ランキングを見る)</span><br><span class="line">1165位 ─ 工学 (Kindleストア)</span><br></pre></td></tr></table></figure><ul><li>書籍情報ページ<a href="https://wings.msn.to/index.php/-/A-03/978-4-7741-9130-0/">https://wings.msn.to/index.php/-/A-03/978-4-7741-9130-0/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Angularアプリケーションプログラミング&quot;&gt;&lt;a href=&quot;#Angularアプリケーションプログラミング&quot; class=&quot;headerlink&quot; title=&quot;Angularアプリケーションプログラミング&quot;&gt;&lt;/a&gt;Angularアプリケーションプログラミ</summary>
      
    
    
    
    <category term="EX" scheme="http://yoursite.com/categories/EX/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>AngularWebアプリ開発スタートブック</title>
    <link href="http://yoursite.com/EX/2019-12_AngularWeb%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88%E3%83%96%E3%83%83%E3%82%AF/"/>
    <id>http://yoursite.com/EX/2019-12_AngularWeb%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88%E3%83%96%E3%83%83%E3%82%AF/</id>
    <published>2019-12-28T15:00:00.000Z</published>
    <updated>2020-02-24T12:29:25.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AngularWebアプリ開発スタートブック"><a href="#AngularWebアプリ開発スタートブック" class="headerlink" title="AngularWebアプリ開発スタートブック"></a>AngularWebアプリ開発スタートブック</h1><ul><li><p>電子書籍購入</p></li><li><p><a href="/pdf/AngularWeb%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88%E3%83%96%E3%83%83%E3%82%AF.pdf">学習ログ</a></p></li></ul><h2 id="書籍情報"><a href="#書籍情報" class="headerlink" title="書籍情報"></a>書籍情報</h2><ul><li><p>著者</p><ul><li>大澤 文孝</li></ul></li><li><p>出版社</p><ul><li>ソーテック社; B5変形版 (2018&#x2F;4&#x2F;7)</li></ul></li><li><p>定価</p><ul><li>3,025円</li></ul></li><li><p>発売日</p><ul><li>2018&#x2F;4&#x2F;7</li></ul></li><li><p>ISBN-13</p><ul><li>978-4-8026-1185-5</li></ul></li><li><p>ISBN-10</p><ul><li>4800711975</li></ul></li><li><p>目次</p><ul><li>Chapter1 Angularって何?</li><li>Chapter2 開発環境を整えよう</li><li>Chapter3 Angularプロジェクトを作ろう</li><li>Chapter4 Angularの基本</li><li>Chapter5 入力フォームを作ってみよう</li><li>Chapter6 入力エラーを検知するバリデータ</li><li>Chapter7 リアクティブフォーム入門</li><li>Chapter8 さまざまな入力コントロール</li><li>Chapter9 ページの割り当てと遷移</li><li>Chapter10 検索機能を実装する</li><li>Chapter11 Webサーバで動かす</li></ul></li><li><p>サンプルプログラム</p><ul><li><a href="http://www.sotechsha.co.jp/sp/1197/">http://www.sotechsha.co.jp/sp/1197/</a></li></ul></li><li><p>こんな方に</p><ul><li>○「将来、Webアプリ開発に取り組みたい」</li><li>○「Angular特有の機能について学びたい」</li><li>○「TypeScriptの作法について学びたい」</li><li>○「新しいフレームワークの作法をざっと知りたい」</li></ul></li><li><p>はじめに</p><ul><li>次の２点を重点的に解説<ul><li>Angularの動作の仕組み</li><li>何をどのような書式で記述しなければならないのか</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AngularWebアプリ開発スタートブック&quot;&gt;&lt;a href=&quot;#AngularWebアプリ開発スタートブック&quot; class=&quot;headerlink&quot; title=&quot;AngularWebアプリ開発スタートブック&quot;&gt;&lt;/a&gt;AngularWebアプリ開発スタートブ</summary>
      
    
    
    
    <category term="EX" scheme="http://yoursite.com/categories/EX/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>コンサル一年目が学ぶこと</title>
    <link href="http://yoursite.com/EX/2019_11_%E3%82%B3%E3%83%B3%E3%82%B5%E3%83%AB%E4%B8%80%E5%B9%B4%E7%9B%AE%E3%81%8C%E5%AD%A6%E3%81%B6%E3%81%93%E3%81%A8/"/>
    <id>http://yoursite.com/EX/2019_11_%E3%82%B3%E3%83%B3%E3%82%B5%E3%83%AB%E4%B8%80%E5%B9%B4%E7%9B%AE%E3%81%8C%E5%AD%A6%E3%81%B6%E3%81%93%E3%81%A8/</id>
    <published>2019-11-02T15:00:00.000Z</published>
    <updated>2020-02-24T12:12:16.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="コンサル一年目が学ぶこと"><a href="#コンサル一年目が学ぶこと" class="headerlink" title="コンサル一年目が学ぶこと"></a>コンサル一年目が学ぶこと</h1><div style="text-align:center; margin-bottom: 40px"><img src="/img/cover/2019_11_consone.jpg" alt="2019_11_consone" title="2019_11_consone" style="width:980px"></div><ul><li><a href="/pdf/%E3%82%B3%E3%83%B3%E3%82%B5%E3%83%AB%E4%B8%80%E5%B9%B4%E7%9B%AE%E3%81%8C%E5%AD%A6%E3%81%B6%E3%81%93%E3%81%A8.pdf">学習ログ</a></li></ul><h2 id="学んだこと"><a href="#学んだこと" class="headerlink" title="学んだこと"></a>学んだこと</h2><ul><li>結論ファースト、PREP法で話す、言い訳から取り繕った話し方をしない（Talk Straight）</li><li>出来ないときは出来る方法を提案することが大事（何があればできるのか、何人いればできるのか、いつまでならできるのか）</li><li>相手の期待値を把握することの重要性</li><li>数値を用いて説明する</li><li>考えてから仕事を進める（道筋決めてから）</li><li>ロジックツリーを使いこなす（ケース問題の紐解き方法と同じだと感じた）</li><li>「雲雨傘」提案法 事実、解釈、アクションの区別をつける</li><li>議事録のエッセンス（日時・場所・参加者・アジェンダ・決まったこと・決まらなかったこと・確認が必要な事・次回TODO・キーパーソンの意見）</li><li>説明資料はワンスライド・ワンメッセージの構成にすること</li><li>余計なことをやらない・価値のあることだけする</li><li>しゃべらないなら会議に出るな</li><li>コミットメント力の高い人の傍にいること</li><li>フォロワーシップは部下としてのリーダーシップ</li></ul><h2 id="手に取った理由"><a href="#手に取った理由" class="headerlink" title="手に取った理由"></a>手に取った理由</h2><ul><li>コンサルタントとしての考え方の基礎的な要素が知りたかった</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;コンサル一年目が学ぶこと&quot;&gt;&lt;a href=&quot;#コンサル一年目が学ぶこと&quot; class=&quot;headerlink&quot; title=&quot;コンサル一年目が学ぶこと&quot;&gt;&lt;/a&gt;コンサル一年目が学ぶこと&lt;/h1&gt;&lt;div style=&quot;text-align:center; ma</summary>
      
    
    
    
    <category term="EX" scheme="http://yoursite.com/categories/EX/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>Github実践入門</title>
    <link href="http://yoursite.com/EX/2019_03_Github%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80/"/>
    <id>http://yoursite.com/EX/2019_03_Github%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80/</id>
    <published>2019-02-28T15:00:00.000Z</published>
    <updated>2019-08-05T15:15:35.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github実践入門"><a href="#Github実践入門" class="headerlink" title="Github実践入門"></a>Github実践入門</h1><div style="text-align:center; margin-bottom: 40px"><img src="/img/cover/2019_03_github.jpg" alt="2019_03_github" title="2019_03_github" style="width:980px"></div><h2 id="学んだこと"><a href="#学んだこと" class="headerlink" title="学んだこと"></a>学んだこと</h2><ul><li>そもそも「Githubとは」という部分</li><li>Githubの基本的な使い方を手を動かしながら確認できた</li><li>途中、UIがそもそも変わっており、情報として古さを感じたため、さっと確認で済ませている</li></ul><h2 id="手に取った理由"><a href="#手に取った理由" class="headerlink" title="手に取った理由"></a>手に取った理由</h2><ul><li>業務でGitの構成管理方針を決定する立場となったため、今一度基礎から情報を取得する必要があると考えたため</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Github実践入門&quot;&gt;&lt;a href=&quot;#Github実践入門&quot; class=&quot;headerlink&quot; title=&quot;Github実践入門&quot;&gt;&lt;/a&gt;Github実践入門&lt;/h1&gt;&lt;div style=&quot;text-align:center; margin-bot</summary>
      
    
    
    
    <category term="EX" scheme="http://yoursite.com/categories/EX/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>Azure実践ガイド</title>
    <link href="http://yoursite.com/Azure/2019_03_Azure%E5%AE%9F%E8%B7%B5%E3%82%AC%E3%82%A4%E3%83%89/"/>
    <id>http://yoursite.com/Azure/2019_03_Azure%E5%AE%9F%E8%B7%B5%E3%82%AC%E3%82%A4%E3%83%89/</id>
    <published>2019-02-28T15:00:00.000Z</published>
    <updated>2019-07-21T16:44:04.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Azure実践ガイド"><a href="#Azure実践ガイド" class="headerlink" title="Azure実践ガイド"></a>Azure実践ガイド</h1><div style="text-align:center; margin-bottom: 40px"><img src="/img/cover/2019_03_azure.jpg" alt="2019_03_azure" title="2019_03_azure" style="width:980px"></div><h2 id="学んだこと"><a href="#学んだこと" class="headerlink" title="学んだこと"></a>学んだこと</h2><ul><li><p>※読書中..</p></li><li><p><a href="/pdf/Microsoft-Azure%E5%AE%9F%E8%B7%B5%E3%82%AC%E3%82%A4%E3%83%89.pdf">学習メモ</a></p></li></ul><h2 id="手に取った理由"><a href="#手に取った理由" class="headerlink" title="手に取った理由"></a>手に取った理由</h2><ul><li>業務でAzure環境を使用することになり、基礎知識を養うために購入</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Azure実践ガイド&quot;&gt;&lt;a href=&quot;#Azure実践ガイド&quot; class=&quot;headerlink&quot; title=&quot;Azure実践ガイド&quot;&gt;&lt;/a&gt;Azure実践ガイド&lt;/h1&gt;&lt;div style=&quot;text-align:center; margin-bot</summary>
      
    
    
    
    <category term="Azure" scheme="http://yoursite.com/categories/Azure/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
    <category term="読書中" scheme="http://yoursite.com/tags/%E8%AA%AD%E6%9B%B8%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>AmazonAlexa開発ガイド</title>
    <link href="http://yoursite.com/AI/2019_01_AmazonAlexa%E9%96%8B%E7%99%BA%E3%82%AC%E3%82%A4%E3%83%89/"/>
    <id>http://yoursite.com/AI/2019_01_AmazonAlexa%E9%96%8B%E7%99%BA%E3%82%AC%E3%82%A4%E3%83%89/</id>
    <published>2018-12-31T15:00:00.000Z</published>
    <updated>2019-07-20T15:44:41.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AmazonAlexa開発ガイド"><a href="#AmazonAlexa開発ガイド" class="headerlink" title="AmazonAlexa開発ガイド"></a>AmazonAlexa開発ガイド</h1><div style="text-align:center; margin-bottom: 40px"><img src="/img/cover/2019_01_alexa_handson.jpg" alt="2019_01_alexa_handson" title="2019_01_alexa_handson" style="width:980px"></div><ul><li>目次<ul><li>Chapter 1 Amazon AlexaとAmazon Echo</li><li>Chapter 2 Amazon AlexaとAWSの準備</li><li>Chapter 3 スキル開発入門</li><li>Chapter 4 スキルのデバッグから公開</li><li>Chapter 5 Webサービス連携アプリの開発</li><li>Chapter 6 スマートホームスキルの開発</li><li>Chapter 7 AVSを利用したアプリケーションの構築方法</li><li>Appendix SSML&#x2F;CLI</li></ul></li></ul><h2 id="学んだこと"><a href="#学んだこと" class="headerlink" title="学んだこと"></a>学んだこと</h2><ul><li>AmazonAlexaSkillKitを利用したスキル開発方法</li><li>AWS Lambda にサンプルをデプロイし実際に動作させる方法</li><li>AlexaSkillKitについての基礎知識<ul><li>インテント・スロットなど</li><li>SSML</li></ul></li><li>※本書では、後半、AVSについても述べられているが、直近で必要な知識ではなかったため割愛</li></ul><h2 id="手に取った理由"><a href="#手に取った理由" class="headerlink" title="手に取った理由"></a>手に取った理由</h2><ul><li>Alexaスキル開発の基礎知識を習得するため</li></ul><h2 id="学習メモ"><a href="#学習メモ" class="headerlink" title="学習メモ"></a>学習メモ</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># はじめに</span><br><span class="line"></span><br><span class="line">□付属データ（amazon_alexa_sample.zip）の内容</span><br><span class="line">付属データには、以下の内容が含まれています。</span><br><span class="line"></span><br><span class="line">Chapter2～7、Appendixで紹介しているサンプルデータ</span><br><span class="line">Chapter7の04節のコマンド入力用テキスト（一部修正用テキスト含む）</span><br><span class="line">Chapter5の02節（P.137）：補足資料1「Twitter developer accountへのアプリ登録」（PDFファイル）</span><br><span class="line">Chapter7の04節（P.210）：補足資料2「Raspberry Pi 3の初回起動時のセットアップ」（PDFファイル）</span><br><span class="line">Chapter7の04節（P.248）：補足資料3「Lチカを行うための配線」（PDFファイル）</span><br><span class="line">□付属データのテスト環境</span><br><span class="line">OS：macOS 10.13.5</span><br><span class="line">Node.js：8.11.1</span><br><span class="line">npm：5.6.0</span><br><span class="line">Alexa開発者コンソール</span><br><span class="line">URL https:&#x2F;&#x2F;developer.amazon.com&#x2F;alexa&#x2F;console&#x2F;</span><br><span class="line">AWS</span><br><span class="line">URL https:&#x2F;&#x2F;aws.amazon.com&#x2F;jp&#x2F;</span><br><span class="line">ASK SDK for Node.js：2.0.5</span><br><span class="line">Amazon Echoデバイス</span><br><span class="line">Amazon Echo dot</span><br><span class="line">URL https:&#x2F;&#x2F;www.amazon.co.jp&#x2F;dp&#x2F;B072B5BTLK</span><br><span class="line">Homebrew: 1.6.7</span><br><span class="line">AVS Device SDK：1.8.1</span><br><span class="line">□Chapter7 04節で利用した機材</span><br><span class="line">サンワサプライUSBマイクロホンMM-MCU02BK</span><br><span class="line">URL https:&#x2F;&#x2F;direct.sanwa.co.jp&#x2F;のサイトで「MM-MCU02BK」で検索</span><br><span class="line">Raspberry Pi 3（Model B）</span><br><span class="line">Raspberry Pi 3 Model Bケース+ヒートシンク</span><br><span class="line">https:&#x2F;&#x2F;www.physical-computing.jpのサイトで「Raspberry Pi 3」で検索</span><br><span class="line">ブレッドボード　マイコンボード用実験パーツセット　KP-PRTSET01</span><br><span class="line">URL http:&#x2F;&#x2F;eleshop.jp&#x2F;shop&#x2F;g&#x2F;g402534&#x2F;</span><br><span class="line">※補足1：上記の「ブレッドボード　マイコンボード用実験パーツセット」には、ジャンプワイヤ（オス・オス）しかありませんので、別途ジャンプワイヤ（オス・メス）をご購入ください。</span><br><span class="line">ジャンプワイヤ（オス・メス）の購入先例</span><br><span class="line">例：ELEGOO 50 PCS オスメスジャンパーワイヤ200mm (無料 170 タイポイント ブレッドボード)</span><br><span class="line">URL https:&#x2F;&#x2F;www.amazon.co.jp&#x2F;dp&#x2F;B06ZZXH4XT&#x2F;</span><br><span class="line">□Chapter7 04節に関するコマンドやリンク先（著者提供サイト）</span><br><span class="line">紙面コマンド &amp; リンクまとめ</span><br><span class="line">URL https:&#x2F;&#x2F;gist.github.com&#x2F;ShinjiKobayashi&#x2F;1383691df9d43edd60267e44f6e2e923</span><br><span class="line"></span><br><span class="line"># Chapter 1 Amazon AlexaとAmazon Echo</span><br><span class="line"></span><br><span class="line">##### Echo Show</span><br><span class="line">2018&#x2F;08時点では発売されていないがecho show という製品があったりする（画面がついている）</span><br><span class="line"></span><br><span class="line">スマートフォンやブラウザ上で実行できるAlexaアプリへカードを表示する機能はあるが、別のデバイスに取り出す必要があり、シームレスな体験でない</span><br><span class="line"></span><br><span class="line">##### Echo Look</span><br><span class="line">360度の3Dスキャンが可能な衣装のコーディネートの良し悪しを判断してくれる機能をもつ製品</span><br><span class="line"></span><br><span class="line">##### 車載Alexa</span><br><span class="line">BMWやToyotaがプレスリリース</span><br><span class="line"></span><br><span class="line">手がふさがっていてもVUIであれば操作可能</span><br><span class="line"></span><br><span class="line">##### Alexa Mobile Accessory Kit</span><br><span class="line">スマートフォンのAlexaアプリを介してAlexaの機能を利用できるようにするアプリ</span><br><span class="line"></span><br><span class="line">##### Amazon Lex</span><br><span class="line">AWSサービス</span><br><span class="line"></span><br><span class="line">Alexaに採用されている深層学習の技術と同等の技術を利用できるサービス</span><br><span class="line"></span><br><span class="line">### Alexaスキルキット（ASK）</span><br><span class="line">開発者がAlexaを通じて公開できるアプリケーションのような機能</span><br><span class="line"></span><br><span class="line">### Alexaの特色</span><br><span class="line"></span><br><span class="line">- スキルの種類</span><br><span class="line">    * カスタムスキル</span><br><span class="line">        + 料理レシピやしりとりゲームな一般的なAlexaスキル</span><br><span class="line">        + Alexaを通じて商品の購入ができるようになったりする</span><br><span class="line">    * スマートホームスキル</span><br><span class="line">        + カメラや証明、鍵等のスマートホームデバイスを制御するスキル</span><br><span class="line">    * フラッシュブリーフィングスキル</span><br><span class="line">        + ※言及なし</span><br><span class="line"></span><br><span class="line">## 02カスタムスキルの開発事例</span><br><span class="line">### Alexaスキルの動きを確認する</span><br><span class="line">##### インテント</span><br><span class="line">音声入力の内容を解釈して、キーワードに合わせたタグ付けのようなことを行い、対話モデルを作成</span><br><span class="line"></span><br><span class="line">##### スロット</span><br><span class="line">対話モデルをより柔軟に活用することができる（プログラミングにおける変数に近い役割）</span><br><span class="line"></span><br><span class="line">「*東京タワー*の天気を教えて」という発話があった場合、*東京タワー*がPlaceスロットに格納されて、インテントと同じくタグ付けされる</span><br><span class="line"></span><br><span class="line">この要素を参照すれば、ユーザがどこの天気を知りたいのか把握できる</span><br><span class="line"></span><br><span class="line">##### マルチターン会話とダイアログ</span><br><span class="line"></span><br><span class="line">まるで本当に会話している様に実装できる</span><br><span class="line"></span><br><span class="line">### Alexaスキルの開発事例</span><br><span class="line"></span><br><span class="line">##### 人気のあるスキルについて</span><br><span class="line">スキル順位を記載している</span><br><span class="line"></span><br><span class="line">##### ユーザーストーリーの作成</span><br><span class="line"></span><br><span class="line">##### スキルの目的を決める</span><br><span class="line">##### 明確なユーザ操作をイメージする</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## チャプターまとめ</span><br><span class="line">- Alexaを取り巻く世界観やスキルを用いて実現できること</span><br><span class="line">- Alexaの機能や大まかな挙動</span><br><span class="line">- スキル開発をするときに気をつけておくとよいこと</span><br><span class="line"></span><br><span class="line"># Chapter 2 Amazon AlexaとAWSの準備</span><br><span class="line"></span><br><span class="line">## 01Alexaの開発環境の準備</span><br><span class="line">※割愛</span><br><span class="line">### 全体の構成</span><br><span class="line">### Amazon開発者コンソールの登録方法</span><br><span class="line">### AWSの登録方法</span><br><span class="line"></span><br><span class="line">## 02Amazon Echo を使って Hello World</span><br><span class="line"></span><br><span class="line">### カスタムスキルの開発工程</span><br><span class="line">- Amazon開発者コンソールの設定</span><br><span class="line">- Lambdaの実装及び設定</span><br><span class="line">- 動作確認</span><br><span class="line"></span><br><span class="line">### Amazon 開発者コンソールの設定およびLambdaの実装</span><br><span class="line">1. スキルの基本情報設定</span><br><span class="line">2. Alexaデバイスの応答設定</span><br><span class="line">3. Lambdaの設定及び実装</span><br><span class="line">4. LambdaとAlexaデバイスの応答設定と紐付け</span><br><span class="line"></span><br><span class="line">～実際に操作してハローワールドを表示～</span><br><span class="line"></span><br><span class="line"># Chapter 3 スキル開発入門</span><br><span class="line"></span><br><span class="line">## 01カスタムスキルの開発方法</span><br><span class="line"></span><br><span class="line">### カスタムスキルの開発環境構築</span><br><span class="line">### カスタムスキル開発の基本</span><br><span class="line">- Amazon開発者コンソールの設定</span><br><span class="line">- Lambdaの実装</span><br><span class="line"></span><br><span class="line">### Amazon開発者コンソールの設定方法</span><br><span class="line"></span><br><span class="line">命令文をインテントと呼ばれるものに変換して該当のスキルにわたす</span><br><span class="line"></span><br><span class="line">アニマルブックスという架空のスキルを作成する例</span><br><span class="line"></span><br><span class="line">### Lambdaの実装方法</span><br><span class="line"></span><br><span class="line">npm install --loglevel&#x3D;error ask-sdk-core ask-sdk-model</span><br><span class="line"></span><br><span class="line">##### 実装について見ていく</span><br><span class="line"></span><br><span class="line">### 対話型のカスタムスキル開発</span><br><span class="line"></span><br><span class="line">repromptを使用して「本のおすすめでよろしいですか？」と聞き返す実装</span><br><span class="line"></span><br><span class="line">### 会話内容の一部を扱うスキル開発</span><br><span class="line"></span><br><span class="line">##### スロットの実装</span><br><span class="line"></span><br><span class="line">## 02Alexaアプリにカードを表示させる</span><br><span class="line">### カードの表示</span><br><span class="line">Alexaではスキルでの発話と同時に発話内容の保管情報としてカードをAlexaアプリに表示することができます。</span><br><span class="line"></span><br><span class="line">- カードの種類</span><br><span class="line">    * シンプルカード</span><br><span class="line">    * スタンダードカード</span><br><span class="line"></span><br><span class="line">## 03AudioPlayerでスキルを開発する</span><br><span class="line">### AudioPlayerとは</span><br><span class="line">- MP3などのオーディオファイルをストリーミング再生するAlexaの仕組み</span><br><span class="line">- 一時停止やシャッフル再生、ループ再生、キューイングなどもサポートしている</span><br><span class="line">- 再生状態をモニタリングするための仕組みもある</span><br><span class="line">- SSMLを用いることでオーディオファイルの再生をすることも可能だが、90秒の制限がある</span><br><span class="line"></span><br><span class="line">### AudioPlayerを使ったスキルを作成する</span><br><span class="line"></span><br><span class="line"># Chapter 4 スキルのデバッグから公開</span><br><span class="line"></span><br><span class="line">## 01Alexaスキルのデバッグ方法</span><br><span class="line">### Alexaスキルのデバッグ方法</span><br><span class="line">- Alexa Skill Testing Toolについての説明</span><br><span class="line"></span><br><span class="line">### Lambdaのデバッグ方法</span><br><span class="line">- Cloud Watchで設定する</span><br><span class="line">- </span><br><span class="line"></span><br><span class="line">## Alexaスキルの公開方法</span><br><span class="line"></span><br><span class="line">## 多言語対応</span><br><span class="line"></span><br><span class="line"># Chapter 5 Webサービス連携アプリの開発</span><br><span class="line"></span><br><span class="line">## 01フラッシュブリーフィングの作り方</span><br><span class="line">### フラッシュブリーフィングスキルとは</span><br><span class="line">- 最新のニュースフィードを提供する機能</span><br><span class="line">- インストールされているフラッシュブリーフィングスキルから提供される最新のニュースフィードをすべて収集し、ユーザに対して収集したニュースを提供する</span><br><span class="line">- 作成手順について</span><br><span class="line">    * フィード提供環境構築</span><br><span class="line">    * フィードの登録</span><br><span class="line"></span><br><span class="line">### フィード提供環境構築</span><br><span class="line"></span><br><span class="line">amzon api gatewayの設定で躓いた！！</span><br><span class="line"></span><br><span class="line">問いかけても「フラッシュニュースです」という内容しか返さない</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 02外部サービス連携アプリの作り方(Twitter連携)</span><br><span class="line">※一旦とばす！</span><br><span class="line"></span><br><span class="line"># Chapter 6 スマートホームスキルの開発</span><br><span class="line">※一旦とばす！</span><br><span class="line"></span><br><span class="line"># Chapter 7 AVSを利用したアプリケーションの構築方法</span><br><span class="line">※一旦とばす！</span><br><span class="line">端末メーカー様のコネクテット製品に、 簡単にAlexaを実装するためのSDK</span><br><span class="line"></span><br><span class="line"># Appendix SSML&#x2F;CLI</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AmazonAlexa開発ガイド&quot;&gt;&lt;a href=&quot;#AmazonAlexa開発ガイド&quot; class=&quot;headerlink&quot; title=&quot;AmazonAlexa開発ガイド&quot;&gt;&lt;/a&gt;AmazonAlexa開発ガイド&lt;/h1&gt;&lt;div style=&quot;text-</summary>
      
    
    
    
    <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
  </entry>
  
  <entry>
    <title>Googleアシスタントアプリ開発入門</title>
    <link href="http://yoursite.com/AI/2019_01_Google%E3%82%A2%E3%82%B7%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%88%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA%E5%85%A5%E9%96%80/"/>
    <id>http://yoursite.com/AI/2019_01_Google%E3%82%A2%E3%82%B7%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%88%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA%E5%85%A5%E9%96%80/</id>
    <published>2018-12-31T15:00:00.000Z</published>
    <updated>2019-07-20T15:51:52.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Googleアシスタントアプリ開発入門"><a href="#Googleアシスタントアプリ開発入門" class="headerlink" title="Googleアシスタントアプリ開発入門"></a>Googleアシスタントアプリ開発入門</h1><div style="text-align:center; margin-bottom: 40px"><img src="/img/cover/2019_01_google_assistant_handson.jpg" alt="2019_01_google_assistant_handson" title="2019_01_google_assistant_handson" style="width:980px"></div><ul><li>目次<ul><li><p>●chapter1 GoogleアシスタントとAction</p><ul><li>1.1 AIアシスタント ～対話型のインタフェースで問題を解決～</li><li>1.2 Googleアシスタントとは？</li><li>1.3 Googleアシスタントから呼ばれる機能「Action」を使いこなそう</li></ul></li><li><p>●chapter2 Googleアシスタントのアプリ「Action」の作り方</p><ul><li>2.1 アプリ開発エコシステム「Actions on Google」で快適開発</li><li>2.2 簡単な会話アプリを作ってみる</li><li>2.3 やまびこアプリを作ろう（会話アプリのはじめの一歩）</li></ul></li><li><p>●chapter3 しっかり作るGoogleアシスタントアプリ</p><ul><li>3.1 標準的なアプリ実行環境を知ろう</li><li>3.2 基本的な処理フローをおさえよう</li><li>3.3 アプリのテーマと会話内容を決めよう</li><li>3.4 スピーカー向けアプリを作ろう1（静的会話をDialogflowで実装してみる）</li><li>3.5 スピーカー向けアプリを作ろう2（「じゃんけんアプリ」に動的会話を実装）</li><li>3.6 シミュレータや実機でしっかりテストしよう</li><li>3.7 アプリの会話音声をチューニングしよう（SSMLを使う）</li><li>3.8 UIを視覚的にリッチにしよう（Rich Responses）</li><li>3.9 最終的なプログラムコードを確認しよう</li><li>3.10 column：アプリのアルファリリース、ベータリリース</li></ul></li><li><p>●chapter4 いろいろな機能を活用してアプリを作ってみよう</p><ul><li>4.1 ToDoリストアプリを作ろう（データベースを利用する）</li><li>4.2 位置情報を音声で返すアプリを作ろう（位置情報を利用する）</li><li>4.3 天気予報アプリを作ろう（位置情報を利用して周囲の天気予報を応える）</li><li>4.4 アラームアプリを作ろう（Push APIを使う）</li><li>4.5 column：Actions on Googleのさまざまな機能</li></ul></li><li><p>●chapter5 アプリが世の中に出るまで／出たあと</p><ul><li>5.1 作ったアプリを配信しよう（Google社の審査）</li><li>5.2 Googleアシスタントにアプリをおすすめしてもらおう</li><li>5.3 船出のあと……</li></ul></li></ul></li></ul><h2 id="学んだこと"><a href="#学んだこと" class="headerlink" title="学んだこと"></a>学んだこと</h2><ul><li>Googleアシスタントアプリ開発に必要な用語</li><li>※業務で必要な箇所のみ拾い読み</li><li>あとで再読したい</li></ul><h2 id="手に取った理由"><a href="#手に取った理由" class="headerlink" title="手に取った理由"></a>手に取った理由</h2><ul><li>Googleアシスタントアプリの運用&#x2F;保守に携わっていく上で必要なスキルを習得するため</li><li>スピーカー開発関連の知識を増やすため</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Googleアシスタントアプリ開発入門&quot;&gt;&lt;a href=&quot;#Googleアシスタントアプリ開発入門&quot; class=&quot;headerlink&quot; title=&quot;Googleアシスタントアプリ開発入門&quot;&gt;&lt;/a&gt;Googleアシスタントアプリ開発入門&lt;/h1&gt;&lt;div </summary>
      
    
    
    
    <category term="AI" scheme="http://yoursite.com/categories/AI/"/>
    
    
    <category term="教科書" scheme="http://yoursite.com/tags/%E6%95%99%E7%A7%91%E6%9B%B8/"/>
    
    <category term="再読" scheme="http://yoursite.com/tags/%E5%86%8D%E8%AA%AD/"/>
    
  </entry>
  
</feed>
